complete:
- name: "in="
  desc: The input type -if not provided it will try to be auto-detected-
  opts:
  # oafp ../oafp/data/usage.json path="[1][].{name:concat-'in=',\"Input type\"-,desc:replace-Description,'[\-\-]','g','!'-}" out=yaml
  - name: in=ask       
    desc: Interactively asks questions to an user -using JSON/SLON for OpenAF's askStruct-
  - name: in=base64
    desc: A base64 text input format
  - name: in=ch
    desc: An OpenAF channel input format
    opts:
    - name: inch        
      desc: A JSON/SLON configuration string with type and options/url
    - name: inchall
      desc: A boolean flag to determine if the input map will be used for a getAll query
  - name: in=csv
    desc: A CSV format -auto-detected-
    opts:
    - name: incsv=
      desc: If in=csv, the CSV options to use
  - name: in=db
    desc: A JDBC query to a database
    opts:
    - name: indbjdbc=
      desc: The JDBC URL to access the input database
    - name: indbuser=
      desc: The JDBC access user
    - name: indbpass=
      desc: The JDBC access password
    - name: indbtimeout=
      desc: The JDBC access timeout
    - name: indblib=
      desc: Use a JDBC driver oPack generated by ojob.io/db/getDriver
    - name: indbexec=
      desc: If true the input SQL is not a query but a DML statement
  - name: in=gb64json
    desc: Equivalent to in=base64 and base64gzip=true
  - name: in=hsperf
    desc: A Java hsperfdata* file -requires file=hsperfdata_user/123-
  - name: in=ini
    desc: INI/Properties format
  - name: in=javas
    desc: Tries to list java processes running locally
    opts:
    - name: javasinception=
      desc: If true will include also oafp itself
  - name: in=javagc
    desc: A Java GC log text file format
    opts:
    - name: javagcjoin=
      desc: If true it will return an array with each processed line.
  - name: in=jmx
    desc: Uses Java JMX to retrieve data from another Java process
    opts:
    - name: jmxpid=
      desc: The PID of the Java process to connect to
    - name: jmxurl=
      desc: The JMX URL to connect to
    - name: jmxuser=
      desc: The JMX user to connect to
    - name: jmxpass=
      desc: The JMX password to connect to
    - name: jmxprovider=
      desc: The JMX Java class provider to use
    - name: jmxop=
      desc: The JMX operation to execute between 'all', 'domains', 'query' and 'get'
  - name: in=json
    desc: A JSON format -auto-detected-
    opts:
    - name: jsondesc=  
      desc: If true the output will be a list of JSON paths of the original json.
    - name: jsonprefix=
      desc: Given the 'jsondesc=true' output list you can use each to filter big json files by prefix.
  - name: in=jsonschema
    desc: Given a JSON schema format tries to generate sample data for it
  - name: in=jwt
    desc: Decodes and/or verifies a JSON Web Token -JWT-
    opts:
    - name: injwtverify= 
      desc: If true the boolean entry '__verified' will be added to the result.
    - name: injwtsecret=
      desc: A string secret for using HS256, HS384 or HS512 depending on secret size used to verify.
    - name: injwtpubkey=
      desc: A public key file used to verify -might require specifying the injwtalg-.
    - name: injwtalg=
      desc: Specifies the algorithm used to verify the JWT -HS* or RSA by default-. Depends on available algorithms on the current JVM.
    - name: injwtraw=
      desc: If true it won't try to convert Unix epoch timestamps to dates.
  - name: in=lines
    desc: A given string/text to be processed line by line
    opts:
    - name: linesjoin=   
      desc: If true it will return an array with each processed line
    - name: linesvisual=
      desc: If true it will try to determine header and column position from spaces and tabs
    - name: linesvisualsepre=
      desc: Regular expression representing the separator between columns when linesvisual=true -defaults to ' \\s+'-
    - name: linesvisualheadsep
      desc: If true will try to process the second line as header separator aiding on column position determination -if linesvisualsepre is not defined it will default to '\\s+'-
  - name: in=llm
    desc: A large language model input -uses 'llmenv' or 'llmoptions'-
  - name: in=llmmodels
    desc: Lists the large language models available -using 'llmenv' or 'llmoptions'-
  - name: in=ls
    desc: Returns a list of files and folders for a given directory path or zip or tar or tgz file
    opts:
    - name: lsext=       
      desc: Forces the file format parsing of the provided path or file -between zip, tar, tgz-
    - name: lsrecursive=
      desc: Will list all files and folders recursively -for folders-
    - name: lsposix=
      desc: Tries to add extra posix data if available -for ZIP files-
  - name: in=md
    desc: A Markdown input format
  - name: in=mdtable
    desc: A Markdown table format
    opts:
    - name: inmdtablejoin=
      desc: Scans an entire markdown input for tables and returns an array with the data of each markdown table
  - name: in=ndjson
    desc: A NDJSON input format
    opts:
    - name: ndjsonjoin=  
      desc: If true will join the ndjson records to build an output array
    - name: ndjsonfilter=
      desc: If true each line is interpreted as an array before filters execute -this allows to filter json records on a ndjson-
  - name: in=oaf
    desc: Takes an OpenAF scripting code to execute and use the result as input
  - name: in=oafp
    desc: Takes a JSON/SLON map input as parameters for calling a sub oafp process -arrays will call multiple oafp processes-
    opts:
    - name: inoafpseq=
      desc: If true and if input is an array the oafp processes will be executed in sequence
  - name: in=openmetrics
    desc: An OpenMetrics/Prometheus compatible format
  - name: in=raw
    desc: Passes the input directly to transforms and output
  - name: in=rawhex
    desc: Tries to read the input char by char converting into lines with the hexadecimal representation
    opts:
    - name: inrawhexline=
      desc: Number of hexadecimal characters per returned array line
  - name: in=sh
    desc: Executes a shell command returning stdout, stderr and exitcode as a map
    opts:
    - name: inshformat=  
      desc: The format to parse stdout and stderr between raw, yaml or json -default-
  - name: in=slon
    desc: A SLON format -auto-detected-
  - name: in=sql
    desc: One or more SQLs statements to AST -Abstract Syntax Tree- or beautified SQL
    opts:
    - name: sqlparse=   
      desc: If true instead of returning a SQL AST representation it will beautify the SQL statements
    - name: sqloptions=
      desc: A JSON/SLON map with options for sqlparse=true
  - name: in=snmp
    desc: Retrieves data from a SNMP device
    opts:
    - name: insnmp=
      desc: The SNMP address 'udp://1.2.3.4/161'
    - name: insnmpcommunity=
      desc: The SNMP community
    - name: insnmpversion=
      desc: The SNMP version -1, 2, 3-
    - name: insnmptimeout=
      desc: The SNMP timeout
    - name: insnmpretries=
      desc: The SNMP retries
    - name: insnmpsec=
      desc: JSON/SLON map with SNMPv3 security options
  - name: in=toml
    desc: TOML format
  - name: in=xls
    desc: A XLSx compatible file -requires file=abc.xlsx-
    opts:
    - name: inxlssheet=
      desc: The name of sheet to consider -default to the first sheet-
    - name: inxlsevalformulas=
      desc: If false the existing formulas won't be evaluated -defaults to true-
    - name: inxlsdesc=
      desc: If true, instead of retrieving data, either a list of sheet names will be returned, or, if inxlssheet is provided, a table empty and non-empty will be returned
    - name: inxlscol=
      desc: The column on the sheet where a table should be detected -e.g. "A"-
    - name: inxlsrow=
      desc: The row on the sheet where a table should be detected -e.g. 1-
  - name: in=xml
    desc: An XML format -auto-detected-
    opts:
    - name: xmlignored= 
      desc: A comma-separated list of XML tags to ignore
    - name: xmlprefix=
      desc: A prefix to add to all XML tags
    - name: xmlfiltertag=
      desc: If true will filter the XML tags
  - name: in=yaml
    desc: A YAML format -auto-detected-
- name: "out="
  desc: 'The output format -default ctree-'
  opts:
  # oafp ../oafp/data/usage.json path="[3][].{name:concat-'in=',\"Output format\"-,desc:replace-Description,'[\-\-]','g','-'-}" out=yaml
  - name: out=base64   
    desc: A base64 text output format
    opts:
    - name: base64gzip= 
      desc: If true the contents will thet gzip/gunzip respectively to reduce the size of the base64 output
  - name: out=ch
    desc: An OpenAF channel output format
    opts:
    - name: ch=         
      desc: A JSON/SLON configuration string with type and options/url
    - name: chkey=
      desc: A comma delimited list of map keys to build a key from each array value
    - name: chunset=
      desc: If true the input data will be used to unset data on the output channel instead of set
  - name: out=chart
    desc: A line-chart like chart -usefull together with 'loop'-
    opts:
    - name: chart=      
      desc: Chart definition in the format --unit path:color:legend... -min:0 -max:100--
    - name: chartcls=
      desc: If true the screen will be cleared for each execution
  - name: out=cjson
    desc: A JSON forcely colored format
  - name: out=cmd
    desc: Executes a command for each input data entry
    opts:
    - name: outcmd=     
      desc: The command to execute receiving, in pipeline, each input entry in json
    - name: outcmdjoin=
      desc: If true and if input is an array the entire array will be the input entry
    - name: outcmdseq=
      desc: If true and if input is an array the commands will be executed in sequence
    - name: outcmdnl=
      desc: If true each command execution output will be appended with a new-line
    - name: outcmdparam=
      desc: If true the input entry will be replaced on the 'outcmd' where '{}' is found
    - name: outcmdtmpl=
      desc: If true the input entry will be considered as an OpenAF template
  - name: out=cslon
    desc: A SLON format forcely colored
  - name: out=csv
    desc: A CSV format -only for list outputs-
    opts:
    - name: csv=
      desc: If out=csv, the CSV options to use
  - name: out=ctable
    desc: A table-like forcely colored format -only for list outputs-
  - name: out=ctree
    desc: A tree-like forcely colored format
  - name: out=cyaml
    desc: An YAML colored format
  - name: out=db
    desc: Output to a JDBC database
    opts:
    - name: dbjdbc=
      desc: The JDBC URL to access the input database
    - name: dbuser=
      desc: The JDBC access user
    - name: dbpass=
      desc: The JDBC access password
    - name: dbtimeout=
      desc: The JDBC access timeout
    - name: dblib=
      desc: Use a JDBC driver oPack generated by ojob.io/db/getDriver
    - name: dbtable=
      desc: The db table in which should be inserted -'data' by default-
    - name: dbnocreate=
      desc: If true no table creation command will be executed -if the table already exists set this to true-
    - name: dbicase=
      desc: If true table and field names will try to ignore case
    - name: dbbatchsize=
      desc: If defined it will changed the default batch data insert process
  - name: out=envs
    desc: Tries to output the input data as OS environment variables setting commands
    opts:
    - name: envscmd=
      desc: If defined will output the provided command to set each environment variable -defaults to 'export' or 'set' in Windows-
    - name: envsprefix=
      desc: If defined uses the provided prefix for each environment variable key -defaults to 'OAFP'-
    - name: envsnoprefix=
      desc: Boolean flag to indicate that no envsprefix should be used -defaults to false-
  - name: out=gb64json
    desc: Equivalent to out=base64 and base64gzip=true
  - name: out=grid
    desc: A multiple output ascii grid -usefull together with 'loop'-
    opts:
    - name: grid=     
      desc: A JSON/SLON configuration composed of an array with another array per grid line. Each line array should have a map per column -see below for the map options-
  - name: out=html
    desc: An HTML format
    opts:
    - name: htmlcompact= 
      desc: Boolean flag that if true and the input data is a string or markdown the generated html will have a visual compact width format
    - name: htmlpart=
      desc: Boolean flag that if true and the input data is a string or markdown the generated html will be partial and not the complete file
    - name: htmlopen=
      desc: Boolean that if false won't try to open the output contents in a browser -defaults to true-
    - name: htmlwait=
      desc: Amount of ms, when htmlopen=true, to wait for the system browser to open an render the html output
  - name: out=ini
    desc: A INI/Properties format -arrays are not supported-
  - name: out=json
    desc: A JSON format without spacing
  - name: out=jwt
    desc: Signs map data into a JSON Web Token -JWT-
    opts:
    - name: jwtsecret= 
      desc: A string secret for using HS256, HS384 or HS512 depending on secret size used to sign the JWT.
    - name: jwtprivkey=
      desc: A private key file used to sign -might require specifying the jwtalg-.
    - name: jwtalg=
      desc: Specifies the algorithm used to sign the JWT -HS* or RSA by default-. Depends on available algorithms on the current JVM.
  - name: out=lines
    desc: Given an array of strings prints each line
  - name: out=log
    desc: If input has Logstash compatible fields outputs a human-readable log
    opts:
    - name: logprintall=
      desc: If true all original non data -string- lines will be output
  - name: out=map
    desc: A rectangle map format
  - name: out=md
    desc: An output Markdown format
    opts:
    - name: mdtemplate=
      desc: If true will apply a template output without any input data
  - name: out=mdtable
    desc: A Markdown table format -only for list outputs-
  - name: out=mdyaml
    desc: A multi document YAML format -only for list outputs-
  - name: out=ndjson
    desc: A NDJSON output format
  - name: out=openmetrics
    desc: Converts a map or list to OpenMetrics/Prometheus compatible format
    opts:
    - name: metricsprefix=
      desc: The prefix to use for each metric -defaults to 'metrics'-
    - name: metricstimestamp=
      desc: Unix Epoch in seconds for each metric
  - name: out=pjson
    desc: A JSON format with spacing -equivalent to prettyjson-
  - name: out=prettyjson
    desc: A JSON format with spacing
  - name: out=pxml
    desc: Tries to output the input data into pretty xml
    opts:
    - name: pxmlprefix
      desc: A prefix added to all XML tags
  - name: out=raw
    desc: Tries to output the internal representation -string or json- of the input transformed data
  - name: out=schart
    desc: A static line-chart like chart -for a fixed list/array of values-
    opts:
    - name: schart=      
      desc: Chart definition in the format --unit path:color:legend... -min:0 -max:100--
  - name: out=slon
    desc: A SLON format
  - name: out=sql
    desc: Outputs a series of SQL statements for an input list/array data
    opts:
    - name: sqltable=    
      desc: The table name to use for the SQL statements -defaults to 'data'-
    - name: sqlicase=
      desc: If true the table and fields names won't be double-quoted
    - name: sqlnocreate=
      desc: If true the create table statement won't be generated
  - name: out=stable
    desc: A table-like format with separation -only for list outputs-
  - name: out=table
    desc: A table-like format without size constraints -only for list outputs-
  - name: out=template
    desc: A Handlebars template format
    opts:
    - name: template=   
      desc: A file path to a HandleBars' template or a string template definition if 'templatetmpl' is true
    - name: templatepath=
      desc: If 'template' is not provided a path to the template definition -pre-transformation-
    - name: templatedata=
      desc: If defined the template data will be retrieved from the provided path
    - name: templatetmpl=
      desc: If true the 'template' will be interpreted as the template defintion instead of a file path
  - name: out=text
    desc: A string text format
  - name: out=toml
    desc: A TOML format -arrays will have outkey=list-
  - name: out=tree
    desc: A tree-like format
  - name: out=xls
    desc: A XLSx output format
    opts:
    - name: xlsfile=    
      desc: The output filename -if not defined a temporary file will be used to open with the OS's Excel-compatible application-
    - name: xlssheet=
      desc: The name of sheet to use -default to 'data'-
    - name: xlsformat=
      desc: 'A SLON or JSON string with the formatting of the output file -e.g. -bold: true, borderBottom: "medium", borderBottomColor: "red"--'
    - name: xlsopen=
      desc: If false it won't try to open the OS's Excel-compatible application -defaults to true-
    - name: xlsopenwait=
      desc: The amount of time, in ms, to keep the temporary file for the OS's Excel-compatible application to start and open the file
  - name: out=xml
    desc: An XML format
    opts:
    - name: outxmlprefix
      desc: A prefix added to all XML tags
  - name: out=yaml
    desc: A YAML format
- name: '-h'        
  desc: Shows the help document
- name: help=
  desc: If true will show the help document or other available -e.g. filters, template-
  opts:
  - name: help=filters
    desc: Shows the filters help
  - name: help=template
    desc: Shows the template help
  - name: help=examples
    desc: Shows examples
- name: file=
  desc: The file to parse -if not provide stdin is used-
- name: cmd=
  desc: Alternative to file and stdin to execute a command -e.g. kubectl, docker- to get the file contents
- name: data=
  desc: Alternative to file, stdin and cmd to provide data input
- name: from=
  desc: An OpenAF nLinq path expression to filter output
- name: sql=
  desc: A SQL expression to filter output
- name: sqlfilter=
  desc: 'Enables the forcing of the sql filter parser -values: auto, simple, advanced-'
- name: sqlfiltertables=
  desc: A JSON/SLON array composed of 'table' name and 'path' to each table's data to be used with the sqlfilter
- name: path=
  desc: A JMESPath expression to filter output
- name: outkey=
  desc: If defined the map/list output will be prefix with the provided key
- name: outfile=
  desc: If defined all output will be written to the provided file
- name: outfileappend=
  desc: If 'true' and outfile=true the output will be appended on the provided file
- name: pause=
  desc: If 'true' will try to pause contents in alternative to _less -r_
- name: color=
  desc: If 'true' will force colored output if available
- name: url=
  desc: Retrieves data from the provided URL
- name: urlmethod=
  desc: If 'url' is provided defines the http method to use if different from GET
- name: urlparams=
  desc: If 'url' is provided extra parameters -equivalent to OpenAF's $rest- can be provided in JSON/SLON
- name: urldata=
  desc: If 'url' is provided a JSON/SLON/text data can be provided
- name: chs=
  desc: A JSON/SLON map or array composed of an OpenAF channel 'name', 'type' and optional 'options'
- name: loop=
  desc: If defined will loop the processing by the number of seconds provided
- name: loopcls=
  desc: If 'true' and loop is defined it will clear the screen -or file- on each loop cycle
- name: libs=
  desc: Comma delimited list of installed OpenAF's oPacks to consider to extend oafp's inputs, transformations and outputs
- name: '-examples'
  desc: Will access an internet based list of oafp examples and list them
- name: examples=
  desc: Will search the provided keyword or 'category::subcategory' in the internet based list of oafp examples
- name: version=
  desc: Alternative way to change the input to a map with the tool's version
- name: '-v'
  desc: Changes the input to a map with the tool's version info
- name: arraytomap=
  desc: If true will try to convert the input array to a map -see arraytomapkey, arraytomapkeepkey-
- name: arraytomapkeepkey=
  desc: If true and arraytomap=true the defined arraytomapkey won't be removed from each map
- name: arraytomapkey=
  desc: For arraytomap=true defines the name of the map property that will be each element key -see arraytomapkeepkey-
- name: cmlt=
  desc: If true will accumulate the input values into an output array -useful with loop-
  opts:
  - name: cmltch=     
    desc: A JSON/SLON OpenAF channel configuration string with type and options/url -defaults to simple-
  - name: cmltsize=
    desc: The number of input data values to keep -default 100-. If -1 it will keep without a limit
- name: correcttypes=
  desc: If true will try to convert alpha-numeric field values with just numbers to number fields, string date fields to dates and boolean fields
- name: denormalize=
  desc: Reverses 'normalize' given a JSON/SLON map with a normalize schema -see OpenAF's ow.ai.normalize.withSchema-
- name: diff=
  desc: A JSON/SLON map with a 'a' path and a 'b' path to compare and provide diff data
  opts:
  - name: difftheme= 
    desc: A JSON/SLON map with the colors to use if color = true
  - name: diffnlines=
    desc: If true will append each line with a line number of the final result of the differences between 'a' and 'b' -just for rough reference-
  - name: diffwords=
    desc: If true and the input is text based will perform the diff at the word level
  - name: diffwordswithspace=
    desc: If true and the input is text based will perform the diff at the word + spaces level
  - name: difflines=
    desc: If true and the input is text based will perform the diff at the lines level
  - name: diffsentences=
    desc: If true and the input is text based will perfom the diff at the sentence level
  - name: diffchars=
    desc: If true and the input is text based will perform the diff at the char level
- name: flatmap=
  desc: If true a map structure will be flat to just one level -optionally flatmapsep=[char] to use a different separator that '.'-
- name: getlist=
  desc: If true will try to find the first array on the input value -if number will stop only after the number of checks-
- name: jsonschema=
  desc: The JSON schema file to use for validation returning a map with a boolean valid and errors if exist
- name: jsonschemacmd=
  desc: Alternative option to 'jsonschema' to retrieve the JSON schema data to use for validation returning a map with a boolean valid and errors if exist
- name: jsonschemagen=
  desc: If true will taken the provided input map as an example to generate an output json schema
- name: kmeans=
  desc: Given an array of 'normalized' data will cluster data into the number of centroids provided
- name: llmprompt=
  desc: A large language model prompt to transform the input data to json -uses the same input options 'llmenv' and 'llmoptions'-
  opts:
  - name: llmcontext=
    desc: If 'llmprompt' is defined provides extra context to the model regarding the input data
  - name: llmenv= 
    desc: The environment variable containing the value of 'llmoptions' -defaults to OAFP_MODEL-
  - name: llmoptions=
    desc: A JSON or SLON string with OpenAF's LLM 'type' -e.g. openai/ollama-, 'model' name, 'timeout' in ms for answers, 'url' for the ollama type or 'key' for openai type
  - name: llmconversation=
    desc: File to keep the LLM conversation
  - name: llmimage=
    desc: For visual models you can provide a base64 image or an image file path or an URL of an image
- name: maptoarray=
  desc: If true will try to convert the input map to an array -see maptoarraykey-
- name: maptoarraykey=
  desc: If maptoarray=true defines the name of the map property that will hold the key for each map in the new array
- name: merge=
  desc: If input is a list/array of maps will merge each element into one map
- name: normalize=
  desc: A JSON/SLON map with a normalize schema -see OpenAF's ow.ai.normalize.withSchema-
- name: numformat=
  desc: For all number values applies a java.util.Formatter format -e.g. %,d-
- name: regression=
  desc: Performs a regression -linear, log, exp, poly or power- over a provided list/array of numeric values
  opts:
  - name: regressionpath=
    desc: The path to the array of y values for the regression formulas
  - name: regressionx=
    desc: Optional path to the array of x values for the regression formulas -defaults to 1, 2, 3, ...-
  - name: regressionoptions=
    desc: A JSON/SLON configuration with order -defaults to 2- and/or precision -defaults to 5-
  - name: regressionforecast=
    desc: Optional path to an array of x values for which to forecast the corresponding y
- name: set=
  desc: Performs set operations (intersection by default) over an 'a' and 'b' path to an array defined in a JSON/SLON map
  opts:
  - name: setop=
    desc: Allows to choose a different set operation between 'union', 'diffa', 'diffb', 'diffab' -symetric difference- and 'intersect' -default-
    opts:
    - name: setop=union
      desc: Will return the union of the two sets
    - name: setop=diffa
      desc: Will return the difference between 'a' and 'b'
    - name: setop=diffb
      desc: Will return the difference between 'b' and 'a'
    - name: setop=diffab
      desc: Will return the symetric difference between 'a' and 'b'
    - name: setop=intersect
      desc: Will return the intersection of the two sets
- name: removedups=
  desc: If true will try to remove duplicates from an array
- name: removeempty=
  desc: If true will remove array/list entries that are either null or undefined
- name: removenulls=
  desc: If true will try to remove nulls and undefined values from a map or array
- name: spacekeys=
  desc: Replaces spaces in keys with the provided string -for example, helpful to xml output-
- name: searchkeys=
  desc: Will return a map with only keys that match the provided string
- name: searchvalues=
  desc: Will return am map with only values that match the provided string
- name: sortmapkeys=
  desc: If true the resulting map keys will be sorted
- name: trim=
  desc: If true all the strings of the result map/list will be trimmed
- name: forcearray=
  desc: If true and if the input is map it will force it to be an array with that map as the only element
- name: secKey=
  desc: The mandatory sBucket bucket key to use
  opts:
  - name: secEnv=
    desc: A boolean flag to use environment variables as sBuckets 
  - name: secFile=
    desc: Optional sBucket file source
  - name: secMainPass=
    desc: sBucket repository password
  - name: secPass=
    desc: sBucket bucket password
  - name: secBucket=
    desc: sBucket bucket name
  - name: secRepo=
    desc: sBucket repository
- name: xjs=
  desc: A .js file with function code manipulating an input 'args'. Returns the transformed 'args' variable
- name: xpy=
  desc: A .py file with Python function code manipulating an input 'args'. Returns the transformed 'args' variable
- name: xfn=
  desc: A javascript code, receiving input as 'args' and return it's code evaluation
- name: xrjs=
  desc: A .js file with function code to manipulate each input array record as 'args'. Returns the transformed 'args' record
- name: xrpy=
  desc: A .py file with function code to manipulate each input array record as 'args'. Returns the transformed 'args' record
- name: xrfn=
  desc: A javascript code, receiving each input array record as 'args' and return it's code evaluation
