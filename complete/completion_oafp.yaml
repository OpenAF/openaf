complete:
- name: "in="
  desc: The input type -if not provided it will try to be auto-detected-
  opts:
  # oafp ../oafp/data/usage.json path="[1][].{name:concat('in=',\"Input type\"),desc:replace(Description,'[\(\)]','g','!')}" out=yaml
  - name: in=ask       
    desc: Interactively asks questions to an user -using JSON/SLON for OpenAF's askStruct-
  - name: in=base64
    desc: A base64 text format
  - name: in=ch
    desc: An OpenAF channel format
  - name: in=csv
    desc: A CSV format -auto-detected-
  - name: in=db
    desc: A JDBC query to a database
    opts:
    - name: indbjdbc=
      desc: The JDBC URL to access the input database
    - name: indbuser=
      desc: The JDBC access user
    - name: indbpass=
      desc: The JDBC access password
    - name: indbtimeout=
      desc: The JDBC access timeout
    - name: indblib=
      desc: Use a JDBC driver oPack generated by ojob.io/db/getDriver
    - name: indbexec=
      desc: If true the input SQL is not a query but a DML statement
  - name: in=gb64json
    desc: Equivalent to in=base64 and base64gzip=true
  - name: in=hsperf
    desc: A Java hsperfdata* file -requires file=hsperfdata_user/123-
  - name: in=ini
    desc: INI/Properties format
  - name: in=json
    desc: A JSON format -auto-detected-
  - name: in=jsonschema
    desc: Given a JSON schema format tries to generate sample data for it
  - name: in=jwt
    desc: Decodes and/or verifies a JSON Web Token -JWT-
  - name: in=lines
    desc: A given string/text to be processed line by line
  - name: in=llm
    desc: A large language model input -uses 'llmenv' or 'llmoptions'-
  - name: in=llmmodels
    desc: Lists the large language models available -using 'llmenv' or 'llmoptions'-
  - name: in=ls
    desc: Returns a list of files and folders for a given directory path or zip or tar or tgz file
  - name: in=md
    desc: A Markdown format
  - name: in=mdtable
    desc: A Markdown table format
  - name: in=ndjson
    desc: A NDJSON format
  - name: in=oaf
    desc: Takes an OpenAF scripting code to execute and use the result as input
  - name: in=oafp
    desc: Takes a JSON/SLON map input as parameters for calling a sub oafp process -arrays will call multiple oafp processes-
  - name: in=openmetrics
    desc: An OpenMetrics/Prometheus compatible format
  - name: in=raw
    desc: Passes the input directly to transforms and output
  - name: in=rawhex
    desc: Tries to read the input char by char converting into lines with the hexadecimal representation
  - name: in=sh
    desc: Executes a shell command returning stdout, stderr and exitcode as a map
  - name: in=slon
    desc: A SLON format -auto-detected-
  - name: in=sql
    desc: One or more SQLs statements to AST -Abstract Syntax Tree- or beautified SQL
  - name: in=toml
    desc: TOML format
  - name: in=xls
    desc: A XLSx compatible file -requires file=abc.xlsx-
  - name: in=xml
    desc: An XML format -auto-detected-
  - name: in=yaml
    desc: A YAML format -auto-detected-
- name: "out="
  desc: 'The output format -default ctree-'
  opts:
  # oafp ../oafp/data/usage.json path="[3][].{name:concat('in=',\"Output format\"),desc:replace(Description,'[\(\)]','g','-')}" out=yaml
  - name: out=base64   
    desc: A base64 text format
  - name: out=ch
    desc: An OpenAF channel format
  - name: out=chart
    desc: A line-chart like chart -usefull together with 'loop'-
  - name: out=cjson
    desc: A JSON forcely colored format
  - name: out=cmd
    desc: Executes a command for each input data entry
  - name: out=cslon
    desc: A SLON format forcely colored
  - name: out=csv
    desc: A CSV format -only for list outputs-
  - name: out=ctable
    desc: A table-like forcely colored format -only for list outputs-
  - name: out=ctree
    desc: A tree-like forcely colored format
  - name: out=db
    desc: Output to a JDBC database
  - name: out=envs
    desc: Tries to output the input data as OS environment variables setting commands
    opts:
    - name: envscmd=
      desc: If defined will output the provided command to set each environment variable -defaults to 'export' or 'set' in Windows-
    - name: envsprefix=
      desc: If defined uses the provided prefix for each environment variable key -defaults to 'OAFP'-
  - name: out=gb64json
    desc: Equivalent to out=base64 and base64gzip=true
  - name: out=grid
    desc: A multiple output ascii grid -usefull together with 'loop'-
  - name: out=html
    desc: An HTML format
  - name: out=ini
    desc: A INI/Properties format -arrays are not supported-
  - name: out=json
    desc: A JSON format without spacing
  - name: out=jwt
    desc: Signs map data into a JSON Web Token -JWT-
  - name: out=lines
    desc: Given an array of strings prints each line
  - name: out=log
    desc: If input has Logstash compatible fields outputs a human-readable log
  - name: out=map
    desc: A rectangle map format
  - name: out=md
    desc: A Markdown format
  - name: out=mdtable
    desc: A Markdown table format -only for list outputs-
  - name: out=mdyaml
    desc: A multi document YAML format -only for list outputs-
  - name: out=ndjson
    desc: A NDJSON format
  - name: out=openmetrics
    desc: Converts a map or list to OpenMetrics/Prometheus compatible format
  - name: out=pjson
    desc: A JSON format with spacing -equivalent to prettyjson-
  - name: out=prettyjson
    desc: A JSON format with spacing
  - name: out=pxml
    desc: Tries to output the input data into pretty xml
  - name: out=raw
    desc: Tries to output the internal representation -string or json- of the input transformed data
  - name: out=schart
    desc: A static line-chart like chart -for a fixed list/array of values-
  - name: out=slon
    desc: A SLON format
  - name: out=sql
    desc: Outputs a series of SQL statements for an input list/array data
  - name: out=stable
    desc: A table-like format with separation -only for list outputs-
  - name: out=table
    desc: A table-like format without size constraints -only for list outputs-
  - name: out=template
    desc: A Handlebars template format
  - name: out=toml
    desc: A TOML format -arrays will have outkey=list-
  - name: out=tree
    desc: A tree-like format
  - name: out=xls
    desc: A XLSx output format
  - name: out=xml
    desc: An XML format
  - name: out=yaml
    desc: A YAML format
- name: '-h'        
  desc: Shows the help document
- name: help=
  desc: If true will show the help document or other available -e.g. filters, template-
  opts:
  - name: help=filters
    desc: Shows the filters help
  - name: help=template
    desc: Shows the template help
  - name: help=examples
    desc: Shows examples
- name: file=
  desc: The file to parse -if not provide stdin is used-
- name: cmd=
  desc: Alternative to file and stdin to execute a command -e.g. kubectl, docker- to get the file contents
- name: data=
  desc: Alternative to file, stdin and cmd to provide data input
- name: from=
  desc: An OpenAF nLinq path expression to filter output
- name: sql=
  desc: A SQL expression to filter output
- name: sqlfilter=
  desc: 'Enables the forcing of the sql filter parser -values: auto, simple, advanced-'
- name: sqlfiltertables=
  desc: A JSON/SLON array composed of 'table' name and 'path' to each table's data to be used with the sqlfilter
- name: path=
  desc: A JMESPath expression to filter output
- name: csv=
  desc: If type=csv, the CSV options to use
- name: outkey=
  desc: If defined the map/list output will be prefix with the provided key
- name: outfile=
  desc: If defined all output will be written to the provided file
- name: outfileappend=
  desc: If 'true' and outfile=true the output will be appended on the provided file
- name: pause=
  desc: If 'true' will try to pause contents in alternative to _less -r_
- name: color=
  desc: If 'true' will force colored output if available
- name: url=
  desc: Retrieves data from the provided URL
- name: urlmethod=
  desc: If 'url' is provided defines the http method to use if different from GET
- name: urlparams=
  desc: If 'url' is provided extra parameters -equivalent to OpenAF's $rest- can be provided in JSON/SLON
- name: urldata=
  desc: If 'url' is provided a JSON/SLON/text data can be provided
- name: chs=
  desc: A JSON/SLON map or array composed of an OpenAF channel 'name', 'type' and optional 'options'
- name: loop=
  desc: If defined will loop the processing by the number of seconds provided
- name: loopcls=
  desc: If 'true' and loop is defined it will clear the screen -or file- on each loop cycle
- name: libs=
  desc: Comma delimited list of installed OpenAF's oPacks to consider to extend oafp's inputs, transformations and outputs
- name: '-examples'
  desc: Will access an internet based list of oafp examples and list them
- name: examples=
  desc: Will search the provided keyword or 'category::subcategory' in the internet based list of oafp examples
- name: version=
  desc: Alternative way to change the input to a map with the tool's version
- name: '-v'
  desc: Changes the input to a map with the tool's version info