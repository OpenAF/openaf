var params=processExpr(" ");
// (author: Nuno Aguiar, version: 20240228, license: Apache 2.0, url: https://github.com/openaf/oafp)
// ---
const _oafphelp={'docs/EXAMPLES.md':af.fromBytes2String(io.gunzip(af.fromBase64("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"))),
'docs/TEMPLATE.md':af.fromBytes2String(io.gunzip(af.fromBase64("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"))),
'docs/USAGE.md':af.fromBytes2String(io.gunzip(af.fromBase64("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"))),
'docs/FILTERS.md':af.fromBytes2String(io.gunzip(af.fromBase64("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")))};

const oafp=a=>{if(!isUnDef(a)&&!isDef(a.____ojob)){var E=b=>{for(var d=Object.keys(v),c=0;c<d.length;c++){var e=d[c];isDef(a[e])&&(b=v[e](b))}return b},A=(b,d)=>{d.__path&&(b=$path(b,d.__path.trim()),delete d.__path);if(isString(b))return E(b);d.__from&&(b=$from(b).query(af.fromNLinq(d.__from.trim())),delete d.__from);if(d.__sql){var c="auto";if(isString(a.sqlfilter))switch(a.sqlfilter.toLowerCase()){case "simple":c="nlinq";break;case "advanced":c="h2";break;default:c="auto"}isArray(b)&&0<b.length&&
(b=$sql(b,d.__sql.trim(),c));delete d.__sql}return b=E(b)},k=(b,d,c)=>{toBoolean(a.color)&&(__conConsole=!0);b=isString(b)?b.trim().startsWith("{")&&b.trim().endsWith("}")?A(jsonParse(b,__,__,!0),d):A(b,d):c?A([b],d)[0]:A(b,d);isDef(a.outputkey)&&(b=$$({}).set(a.outputkey,b));isDef(a.outkey)&&(b=$$({}).set(a.outkey,b));printErrnl("\r"+" ".repeat(_$(void 0).default("(processing data...)").length)+"\r");z.has(d.__format)?z.get(d.__format)(b,d):$o(b,d)},t=(b,d)=>{var c=af.fromString2Bytes(""),e=af.newOutputStream();
$sh(b).cb((f,h,g)=>{ioStreamCopy(e,f);f=e.toByteArray();0<f.length&&(c=f)}).get();return d?af.fromBytes2String(c):c},m=(b,d)=>{isUnDef(d)&&(d="exit: "+b);if(isUnDef(ow.oJob)&&!toBoolean(a.noexit))0!=b&&printErr(d),exit(b);else throw d;},B=()=>{__initializeCon();a.help=_$(a.help,"help").isString().default("");switch(a.help.toLowerCase()){case "filters":var b="docs/FILTERS.md";break;case "template":b="docs/TEMPLATE.md";break;case "examples":b="docs/EXAMPLES.md";break;case "readme":case "usage":b="docs/USAGE.md";
break;default:b=a.help.toLowerCase(),b=isDef(w[b])?"docs/"+b+".md":"docs/USAGE.md"}var d=(getOPackPath("oafproc")||".")+"/"+b;let c="";if("docs/USAGE.md"==b&&0<Object.keys(w).length){c="\n---\n\n## \ud83d\udcda Libs help documents\n\n| Lib | Help |\n| --- | --- |\n";for(let e in w)c+="| "+e+" | help="+e+" |\n"}isDef(d)&&io.fileExists(d)?(__conConsole=__ansiColorFlag=!0,isDef(ow.format.string.pauseString)&&toBoolean(a.pause)?ow.format.string.pauseString(ow.format.withMD(io.readFileString(d)+c)):print(ow.format.withMD(io.readFileString(d)+
c))):isDef(global._oafphelp)&&isDef(global._oafphelp[b])?(__conConsole=__ansiColorFlag=!0,isDef(ow.format.string.pauseString)&&toBoolean(a.pause)?ow.format.string.pauseString(ow.format.withMD(global._oafphelp[b]+c)):print(ow.format.withMD(global._oafphelp[b]+c))):isString(w[a.help])?(__conConsole=__ansiColorFlag=!0,isDef(ow.format.string.pauseString)&&toBoolean(a.pause)?ow.format.string.pauseString(ow.format.withMD(w[a.help])):print(ow.format.withMD(w[a.help]))):print("Check https://github.com/OpenAF/oafp/blob/master/src/"+
b);m(0)},p=()=>{var b=(getOPackPath("oafproc")||".")+"/.package.yaml";b={oafp:{version:io.fileExists(b)?io.readFileYAML(b).version:"(not available)",inputs:Array.from(x.keys()).filter(d=>"?"!=d).sort(),transforms:Object.keys(v).filter(d=>"transforms"!=d).sort(),outputs:Array.from(z.keys()).filter(d=>"?"!=d).sort(),flags:__flags.OAFP},openaf:{version:getVersion(),distribution:getDistribution(),home:getOpenAFPath(),opacks:$from($m4a(getOPackLocalDB())).notEquals("name","OpenAF").sort("name").select({name:"",
version:""})},java:{version:ow.format.getJavaVersion(),home:ow.format.getJavaHome(),vendor:String(java.lang.System.getProperty("java.vendor")),params:af.fromJavaArray(java.lang.management.ManagementFactory.getRuntimeMXBean().getInputArguments())},os:{name:String(java.lang.System.getProperty("os.name")),version:String(java.lang.System.getProperty("os.version")),arch:ow.format.getOSArch(),cpuCores:getNumberOfCores(!0),mem:{max:Number(java.lang.Runtime.getRuntime().maxMemory()),total:Number(java.lang.Runtime.getRuntime().totalMemory())},
store:{tmpDirPath:String(java.lang.System.getProperty("java.io.tmpdir")),freeTmpDirBytes:Number(java.nio.file.Files.getFileStore(java.nio.file.Paths.get(java.lang.System.getProperty("java.io.tmpdir"))).getUsableSpace())}}};return stringify(b,__,"")};ow.loadFormat();a.format=a.output||a.format||a.out;a.type=a.input||a.type||a.in;a.out=a.format;a.output=a.format;a.in=a.type;a.input=a.type;if(isUnDef(a.file)&&isUnDef(a.cmd)){let b=__;for(let d in a)if(""===a[d]){b=d;break}a.file=b}var C=new Map([[".json",
"json"],[".ndjson","ndjson"],[".yaml","yaml"],[".xml","xml"],[".csv","csv"],[".ini","ini"],[".md","md"],[".xls","xls"],[".xlsx","xls"],[".sql","sql"]]),F=new Set(["csv","ndjson"]),G={lines:(b,d)=>{isBoolean(a.linesjoin)||(a.linesjoin=toBoolean(_$(a.linesjoin,"linesjoin").isString().default(__)));if(!a.linesjoin&&isString(b))0!=b.trim().length&&(0<b.trim().length&&(b=b.trim().split(/\r?\n/)),k(b,d,!0)),D=!0;else return!0},ndjson:(b,d)=>{isBoolean(a.ndjsonjoin)||(a.ndjsonjoin=toBoolean(_$(a.ndjsonjoin,
"ndjsonjoin").isString().default(__)));if(a.ndjsonjoin)return!0;isUnDef(global.__ndjsonbuf)&&0!=b.length&&b.trim().startsWith("{")&&(global.__ndjsonbuf="");if(isDef(global.__ndjsonbuf)){if(0!=b.length&&!b.trim().endsWith("}")){global.__ndjsonbuf+=b.trim();return}0<global.__ndjsonbuf.length&&(b=global.__ndjsonbuf+b,global.__ndjsonbuf=__)}0==b.length||0<b.length&&"{"!=b.trim().substring(0,1)?(k(jsonParse(global.__ndjsonbuf,__,__,!0),d,!0),D=!0,global.__ndjsonbuf=__):(k(jsonParse(b,__,__,!0),d,!0),D=
!0)}},v={transforms:b=>{if(toBoolean(a.transforms))return Object.keys(v).filter(d=>"transforms"!=d).sort()},jsonschemagen:b=>{if(toBoolean(a.jsonschemagen))return ow.loadObj(),ow.obj.schemaGenerator(b)},jsonschemacmd:b=>v.jsonschema(b),jsonschema:b=>{isMap(b)||m(-1,"jsonschema is only supported with a map.");isUnDef(a.jsonschema)&&isUnDef(a.jsonschemacmd)&&m(-1,"You need to provide a jsonschema=someFile.json or jsonschemacmd=someCommand");ow.loadObj();var d;if(isDef(a.jsonschemacmd)){var c=$sh(a.jsonschemacmd).getJson(0);
0==c.exitcode?d=c.stdout:m(-1,"Error executing the command '"+a.jsonschemacmd+"': "+c.stderr)}else d=io.readFileJSON(a.jsonschema);isMap(d)||m(-1,"The schema provided is not a valid JSON schema.");ow.obj.schemaInit({allErrors:!0});d=ow.obj.schemaCompile(d);return{valid:d(b),errors:d.errors}},sortmapkeys:b=>{if(toBoolean(a.sortmapkeys)&&isObject(b)){let d=(c,e)=>{let f=Object.keys(c).sort(),h={};for(let g=0;g<f.length;g++){let n=f[g],l=c[n];Array.isArray(l)?h[n]=l.map(q=>"object"===typeof q&&null!==
q&&void 0!==q?sortMapKeys(q,e):q):h[n]=e&&"object"===typeof l&&null!==l&&void 0!==l?d(l,e):l}return h};return d(b,!0)}return b},searchkeys:b=>isObject(b)?searchKeys(b,a.searchkeys):b,searchvalues:b=>isObject(b)?searchValues(b,a.searchvalues):b,maptoarray:b=>toBoolean(a.maptoarray)&&isMap(b)?$m4a(b,a.maptoarraykey):b,arraytomap:b=>toBoolean(a.arraytomap)&&isArray(b)?$a4m(b,a.arraytomapkey,toBoolean(a.arraytomapkeepkey)):b,flatmap:b=>toBoolean(a.flatmap)&&isObject(b)?ow.loadObj().flatMap(b,a.flatmapkey):
b,merge:b=>{if(toBoolean(a.merge)&&isArray(b)&&1<b.length){for(var d,c=0;c<b.length;c++)d=0==c?b[c]:merge(d,b[c]);return d}return b},correcttypes:b=>{toBoolean(a.correcttypes)&&isObject(b)&&traverse(b,(d,c,e,f)=>{switch(descType(c)){case "number":isString(c)&&(f[d]=Number(c));break;case "string":"true"==c.trim().toLowerCase()||"false"==c.trim().toLowerCase()?f[d]=toBoolean(c):c.trim().match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$/)?f[d]=new Date(c):c.trim().match(/^\d{4}-\d{2}-\d{2}$/)?f[d]=new Date(c):
c.trim().match(/^\d{2}:\d{2}:\d{2}$/)?f[d]=new Date(c):c.trim().match(/^\d{2}:\d{2}$/)&&(f[d]=new Date(c))}});return b},removenulls:b=>{toBoolean(a.removenulls)&&traverse(b,(d,c,e,f)=>{(isNull(c)||isUnDef(c))&&delete f[d]});return b},removedups:b=>{if(toBoolean(a.removedups)){if(isArray(b)){var d=new Set,c=[];b.forEach(e=>{var f=e;isObject(e)&&(f=sortMapKeys(f));f=stringify(f,__,!0);d.has(f)||(d.add(f),c.push(e))});return c}m(-1,"removedups is only supported for arrays")}return b},llmprompt:b=>{if(isString(a.llmprompt)){a.llmenv=
_$(a.llmenv,"llmenv").isString().default("OAFP_MODEL");a.llmoptions=_$(a.llmoptions,"llmoptions").isString().default(__);var d=$llm(isDef(a.llmoptions)?a.llmoptions:$sec("system","envs").get(a.llmenv)),c="json",e=!0;isString(a.input)&&("md"==a.input&&(c="markdown",e=!1),"mdtable"==a.input&&(c="markdown table",e=!1),"hsperf"==a.input&&(c="java hsperf file"),"raw"==a.input&&(c="raw",e=!1));d=d.withContext(e?stringify(b,__,!0):b,isDef(a.llmcontext)?a.llmcontext:`${c} input data`);return!isString(a.output)||
"md"!=a.output&&"mdtable"!=a.output&&"raw"!=a.output?d=d.promptJSON(a.llmprompt):d=d.prompt(a.llmprompt)}return b},splitlines:b=>toBoolean(a.splitlines)&&isString(b)?b.split(/\r?\n/):b},z=new Map([["?",(b,d)=>{b=Array.from(z.keys()).filter(c=>"?"!=c).sort();$o(b,d)}],["pm",(b,d)=>{$o(b,d)}],["key",(b,d)=>{$o(b,d)}],["ctable",(b,d)=>{$o(b,d)}],["stable",(b,d)=>{$o(b,d)}],["table",(b,d)=>{$o(b,d)}],["log",(b,d)=>{isString(b)&&toBoolean(a.logprintall)?print(b.replace(/\n$/,"")):(d=b,isMap(b)&&(d=[b]),
isArray(d)&&d.forEach(c=>{if(isMap(c)){let e=isDef(c["@timestamp"])?c["@timestamp"]:__,f=isDef(c.level)?c.level:__;c=isDef(c.message)?c.message:__;let h;isDef(f)&&(0<=f.toLowerCase().indexOf("err")&&(h="RED,BOLD"),0<=f.toLowerCase().indexOf("warn")&&(h="YELLOW"));isDef(e)&&24<e.length&&(e=e.substring(0,23)+"Z");(isDef(c)||isDef(e))&&print(ansiColor("BOLD",e)+(isDef(f)?" | "+ansiColor(h,f):"")+" | "+ansiColor(h,c))}}))}],["raw",(b,d)=>{isString(b)?print(b):sprint(b)}],["ini",(b,d)=>{isString(b)||(ow.loadJava(),
d=new ow.java.ini,print(d.put(b).save()))}],["mdyaml",(b,d)=>{isArray(b)?b.forEach((c,e)=>{$o(c,merge(d,{__format:"yaml"}));e<b.length-1&&print("---\n")}):$o(b,merge(d,{__format:"yaml"}))}],["mdtable",(b,d)=>{isArray(b)&&(ow.loadTemplate(),print(ow.template.md.table(b)))}],["template",(b,d)=>{isString(b)||(ow.loadTemplate(),ow.template.addConditionalHelpers(),ow.template.addOpenAFHelpers(),ow.template.addFormatHelpers(),isUnDef(a.template)&&m(-1,"For output=handlebars you need to provide a template=someFile.hbs"),
tprint(io.readFileString(a.template),b))}],["openmetrics",(b,d)=>{isString(b)||(ow.loadMetrics(),b=ow.metrics.fromObj2OpenMetrics(b,a.metricsprefix,a.metricstimestamp),b=b.split("\n").map(c=>{0<=c.indexOf('{_id="')&&(c=c.replace(/{_id="\d+",/,"{"));0<=c.indexOf(',_id="')&&(c=c.replace(/,_id="\d+"}/,"}"));0<=c.indexOf('_id="')&&(c=c.replace(/,_id="\d+",/,","));return c}).join("\n"),$o(b,d))}],["pjson",(b,d)=>{d.__format="prettyjson";$o(b,d)}],["base64",(b,d)=>{b=isString(b)?b:stringify(b);toBoolean(a.base64gzip)?
print(af.fromBytes2String(af.toBase64Bytes(io.gzip(af.fromString2Bytes(b))))):print(af.fromBytes2String(af.toBase64Bytes(b)))}],["db",(b,d)=>{(!isArray(b)||1>b.length)&&m(-1,"db is only supported for filled arrays/lists");a.dbtable=_$(a.dbtable,"outdbtable").isString().default("data");a.dbnocreate=toBoolean(_$(a.dbnocreate,"outdbnocreate").isString().default("false"));a.dbicase=toBoolean(_$(a.dbicase,"outdbicase").isString().default("false"));a.dbbatchsize=_$(a.dbbatchsize,"dbbatchsize").isNumber().default(__);
ow.loadObj();try{isString(a.dbjdbc)||m(-1,"dbjdbc URL is not defined.");isDef(a.dblib)&&loadLib("jdbc-"+a.dblib+".js");var c=new DB(a.dbjdbc,a.dbuser,a.dbpass,a.dbtimeout);if(!a.dbnocreate)try{var e=ow.obj.fromObj2DBTableCreate(a.dbtable,b,__,!a.dbicase);c.u(e);c.commit()}catch(l){c.rollback(),m(-1,"Error creating table: "+l)}var f=Object.keys(ow.obj.flatMap(b[0]));var h=a.dbicase?f.join(",").toUpperCase():'"'+f.join('", "')+'"';let n="";var g=b.map(l=>{var q=ow.obj.flatMap(l);l=[];for(var u in f)l.push(q[f[u]]);
u=f.map(y=>String(q[y]));l="INSERT INTO "+(a.dbicase?a.dbtable:'"'+a.dbtable+'"')+" ("+h+") VALUES ("+u.map(y=>"?").join(", ")+")";l.length>n.length&&(n=String(l));return u});c.usArray(n,g,a.dbbatchsize)}catch(n){isDef(c)&&c.rollback(),printErr(n),m(-1,"Error connecting to the database: "+n)}finally{isDef(c)&&(c.commit(),c.close())}}],["sql",(b,d)=>{(!isArray(b)||1>b.length)&&m(-1,"sql is only supported for filled arrays/lists");a.sqltable=_$(a.sqltable,"sqltable").isString().default("data");a.sqlicase=
toBoolean(_$(a.sqlicase,"sqlicase").isString().default("false"));a.sqlnocreate=toBoolean(_$(a.sqlnocreate,"sqlnocreate").isString().default("false"));ow.loadObj();a.sqlnocreate||print(ow.obj.fromObj2DBTableCreate(a.sqltable,b,__,!a.sqlicase)+";\n");var c=Object.keys(ow.obj.flatMap(b[0]));var e=a.sqlicase?c.join(",").toUpperCase():'"'+c.join('", "')+'"';print(b.map(f=>{var h=ow.obj.flatMap(f);f=[];for(var g in c)f.push(h[c[g]]);g=c.map(n=>{n=h[n];isString(n)&&(n="'"+n.replace(/'/g,"''")+"'");isNull(n)&&
(n="null");return n});return"INSERT INTO "+(a.sqlicase?a.sqltable:'"'+a.sqltable+'"')+" ("+e+") VALUES ("+g.join(",")+");"}).join("\n"))}],["xls",(b,d)=>{if(!isString(b)){try{includeOPack("plugin-XLS")}catch(h){m(-1,"plugin-XLS not found. You need to install it to use the XLS output (opack install plugin-XLS)")}plugin("XLS");if(isMap(b)){ow.loadObj();var c=ow.obj.flatMap(b);var e=Object.keys(c).map(h=>({key:h,value:c[h]}))}isArray(b)&&(e=b);traverse(e,(h,g,n,l)=>{isString(g)&&g.startsWith("=")&&(l[h]=
"'"+g)});b=!1;d=a.xlsfile;isUnDef(a.xlsfile)&&(b=!0,a.xlsfile=io.createTempFile("oafp",".xlsx"));d=new XLS(isDef(d)&&io.fileExists(d)?d:__);var f=d.getSheet(_$(a.xlssheet,"xlssheet").isString().default("data"));a.xlsformat=_$(a.xlsformat,"xlsformat").isString().default('(bold: true, borderBottom: "medium", borderBottomColor: "red")');a.xlsformat.trim().startsWith("{")&&(a.xlsformat=jsonParse(a.xlsformat,!0));a.xlsformat.trim().startsWith("(")&&(a.xlsformat=af.fromSLON(a.xlsformat));ow.format.xls.setTable(d,
f,"A",1,e,__,a.xlsformat);d.writeFile(a.xlsfile);d.close();a.xlsopenwait=_$(a.xlsopenwait,"xlsopenwait").isNumber().default(5E3);a.xlsopen=toBoolean(_$(a.xlsopen,"xlsopen").isString().default("true"));a.xlsopen&&(ow.format.isWindows()?($sh("start "+a.xlsfile).exec(),b&&sleep(a.xlsopenwait,!0)):ow.format.getOS().startsWith("Mac")&&($sh("open "+a.xlsfile).exec(),b&&sleep(a.xlsopenwait,!0)))}}]]),x=new Map([["?",(b,d)=>{b=Array.from(x.keys()).filter(c=>"?"!=c).sort();k(b,d)}],["pm",(b,d)=>{printErrnl(_$(void 0).default("(processing data...)"));
isDef(__pm._map)&&(b=__pm._map);isDef(__pm._list)&&(b=__pm._list);k(b,d)}],["jsonschema",(b,d)=>{printErrnl(_$(void 0).default("(processing data...)"));b=jsonParse(b,__,__,!0);isMap(b)||m(-1,"jsonschema is only supported with a map.");ow.loadObj();b=ow.obj.schemaSampleGenerator(b);k(b,d)}],["yaml",(b,d)=>{printErrnl(_$(void 0).default("(processing data...)"));b=af.fromYAML(b);k(b,d)}],["xml",(b,d)=>{printErrnl(_$(void 0).default("(processing data...)"));a.xmlignored=_$(a.xmlignored,"xmlignored").isString().default(__);
a.xmlprefix=_$(a.xmlprefix,"xmlprefix").isString().default(__);a.xmlfiltertag=toBoolean(_$(a.xmlfiltertag,"xmlfiltertag").isString().default(__));0<=b.indexOf("<?xml")&&(b=b.substring(b.indexOf("?>")+2).trim());0<=b.indexOf("<!DOCTYPE")&&(b=b.substring(b.indexOf(">")+1).trim());b=af.fromXML2Obj(b,a.xmlignored,a.xmlprefix,!a.xmlfiltertag);k(b,d)}],["lines",(b,d)=>{isBoolean(a.linesjoin)||(a.linesjoin=toBoolean(_$(a.linesjoin,"linesjoin").isString().default(__)));printErrnl(_$(void 0).default("(processing data...)"));
let c=__,e=[],f=g=>{g=g.split("\n").map(l=>{let q="",u=0;for(let y=0;y<l.length;y++)if("\t"===l[y]){let J=8-u%8;q+=" ".repeat(J);u+=J}else q+=l[y],u++;return q}).join("\n");if(isUnDef(c))return c=[],isUnDef(a.linesvisualsepre)&&(a.linesvisualsepre=" \\s+"),g.split(new RegExp(a.linesvisualsepre)).forEach(l=>{c.push(l);e.push(g.indexOf(l))}),__;var n={};e.forEach((l,q)=>{n[c[q]]=g.substring(l,q+1<e.length?e[q+1]-1:__).trim()});return n};if(a.linesjoin)if(isDef(a.file)&&isUnDef(a.cmd)&&(b=io.readFileString(a.file)),
isDef(a.cmd)&&(b=t(a.cmd,!0)),b=b.split(/\r?\n/),toBoolean(a.linesvisual)){var h=[];b.forEach(g=>{0!=g.length&&(g=f(g),isDef(g)&&h.push(g))});k(h,d)}else k(b,d);else b=isDef(a.file)&&isUnDef(a.cmd)?io.readFileStream(a.file):isDef(a.cmd)?af.fromBytes2InputStream(t(a.cmd)):af.fromString2InputStream(b),ioStreamReadLines(b,g=>{toBoolean(a.linesvisual)?(g=f(g),isDef(g)&&k(g,clone(d),!0)):k(g,clone(d),!0)}),b.close()}],["ndjson",(b,d)=>{isBoolean(a.ndjsonjoin)||(a.ndjsonjoin=toBoolean(_$(a.ndjsonjoin,"ndjsonjoin").isString().default(__)));
printErrnl(_$(void 0).default("(processing data...)"));global.__ndjsonbuf=__;var c=(f,h)=>{isUnDef(global.__ndjsonbuf)&&0!=f.length&&f.trim().startsWith("{")&&(global.__ndjsonbuf="");if(isDef(global.__ndjsonbuf)){if(0!=f.length&&!f.trim().endsWith("}")){global.__ndjsonbuf+=f.trim();return}0<global.__ndjsonbuf.length&&(f=global.__ndjsonbuf+f,global.__ndjsonbuf=__)}0==f.length||0<f.length&&"{"!=f.trim().substring(0,1)?(h(f),global.__ndjsonbuf=__):h(f)},e=f=>{var h=[];f.split("\n").filter(g=>0<g.length).forEach(g=>
c(g,n=>h.push(jsonParse(n,__,__,toBoolean(a.ndjsonfilter)))));return h};a.ndjsonjoin?(isDef(a.file)&&isUnDef(a.cmd)&&(b=io.readFileString(a.file)),isDef(a.cmd)&&(b=t(a.cmd,!0)),k(e(b),d)):(b=isDef(a.file)&&isUnDef(a.cmd)?io.readFileStream(a.file):isDef(a.cmd)?af.fromBytes2InputStream(t(a.cmd)):af.fromString2InputStream(b),ioStreamReadLines(b,f=>{c(f,h=>k(jsonParse(h,__,__,!0),clone(d),!0))}),b.close())}],["md",(b,d)=>{printErrnl(_$(void 0).default("(processing data...)"));__conConsole=__ansiColorFlag=
!0;isUnDef(a.format)&&isUnDef(d.__format)&&(a.format="md",d.__format="md");k(b,d)}],["mdtable",(b,d)=>{printErrnl(_$(void 0).default("(processing data...)"));ow.loadTemplate();b=ow.template.md.fromTable(b);k(b,d)}],["raw",(b,d)=>{printErrnl(_$(void 0).default("(processing data...)"));k(b,d)}],["ini",(b,d)=>{printErrnl(_$(void 0).default("(processing data...)"));ow.loadJava();var c=new ow.java.ini;b=isDef(a.file)?c.loadFile(a.file).get():c.load(b).get();k(b,d)}],["sql",(b,d)=>{isString(b)?k(af.fromSQL(b).ast,
d):k(b,d)}],["db",(b,d)=>{if(isString(b)){printErrnl(_$(void 0).default("(processing data...)"));isString(a.indbjdbc)||m(-1,"indbjdbc URL is not defined.");try{isDef(a.indblib)&&loadLib("jdbc-"+a.indblib+".js");var c=new DB(a.indbjdbc,a.indbuser,a.indbpass,a.indbtimeout);c.convertDates(!0);if(toBoolean(a.indbexec)){var e=c.u(b);k({affectedRows:e},d);c.commit()}else e=c.q(b),isMap(e)&&isArray(e.results)?k(e.results,d):m(-1,"Invalid DB result: "+stringify(e))}catch(f){printErr(f.message),isDef(c)&&
c.rollback(),m(-1,"Error executing SQL: "+f.message)}finally{isDef(c)&&(c.rollback(),c.close())}}else m(-1,"db is only supported with a SQL string.")}],["xls",(b,d)=>{printErrnl(_$(void 0).default("(processing data...)"));try{includeOPack("plugin-XLS")}catch(e){m(-1,"plugin-XLS not found. You need to install it to use the XLS output (opack install plugin-XLS)")}a.xlssheet=_$(a.xlssheet,"xlssheet").isString().default(0);a.xlsevalformulas=toBoolean(_$(a.xlsevalformulas,"xlsevalformulas").isString().default(!0));
a.xlscol=_$(a.xlscol,"xlscol").isString().default("A");a.xlsrow=_$(a.xlsrow,"xlsrow").isString().default(1);plugin("XLS");if(isDef(a.file)||isDef(a.cmd)){b=new XLS(isDef(a.cmd)?t(a.cmd):a.file);var c=b.getSheet(a.xlssheet);c=b.getTable(c,a.xlsevalformulas,a.xlscol,a.xlsrow);b.close();isDef(c)&&isMap(c)&&(c=c.table);k(c,d)}else m(-1,"XLS is only support with 'file' or 'cmd' defined. Please provide a file=... or a cmd=...")}],["csv",(b,d)=>{printErrnl(_$(void 0).default("(processing data...)"));if(isDef(a.file)||
isDef(a.cmd)){var c=isDef(a.cmd)?af.fromBytes2InputStream(t(a.cmd)):io.readFileStream(a.file);b=$csv(a.inputcsv).fromInStream(c).toOutArray();c.close()}else b=$csv(a.inputcsv).fromInString(b).toOutArray();k(b,d)}],["hsperf",(b,d)=>{if(isDef(a.file)||isDef(a.cmd)){printErrnl(_$(void 0).default("(processing data...)"));ow.loadJava();var c=isDef(a.cmd)?ow.java.parseHSPerf(t(a.cmd)):ow.java.parseHSPerf(a.file);c.__ts=new Date;var e=0,f=0;c.sun.gc.generation.forEach(h=>{h.space.forEach(g=>{f+=Number(g.used);
e=isNumber(g.capacity)?e+Number(g.capacity):e;c.sun.gc["__percUsed_"+g.name]=100*g.used/g.capacity})});c.sun.gc.__percUsed_meta=100*c.sun.gc.metaspace.used/c.sun.gc.metaspace.capacity;c.sun.gc.__percUsed_ccs=100*c.sun.gc.compressedclassspace.used/c.sun.gc.compressedclassspace.capacity;b=$from(c.sun.gc.collector).equals("name","PSScavenge").at(0);c.sun.gc.__ygc=isDef(b)?Number(b.invocations):0;c.sun.gc.__ygct=isDef(b)?Number(b.time/1E9):0;b=$from(c.sun.gc.collector).equals("name","PSParallelCompact").orEquals("name",
"").at(0);c.sun.gc.__fgc=isDef(b)?Number(b.invocations):0;c.sun.gc.__fgct=isDef(b)?Number(b.time/1E9):0;c.sun.gc.__gct=$from(c.sun.gc.collector).sum("time")/1E9;c.java.__mem={total:e,used:f,free:e-f,metaMax:c.sun.gc.metaspace.maxCapacity,metaTotal:c.sun.gc.metaspace.capacity,metaUsed:c.sun.gc.metaspace.used,metaFree:c.sun.gc.metaspace.capacity-c.sun.gc.metaspace.used};k(c,d)}else m(-1,"hsperf is only supported with either 'file' or 'cmd' defined.")}],["base64",(b,d)=>{printErrnl(_$(void 0).default("(processing data...)"));
b=toBoolean(a.base64gzip)?af.fromBytes2String(io.gunzip(af.fromBase64(b,!0))):af.fromBytes2String(af.fromBase64(b));k(b,d)}],["llm",(b,d)=>{a.llmenv=_$(a.llmenv,"llmenv").isString().default("OAFP_MODEL");a.llmoptions=_$(a.llmoptions,"llmoptions").isString().default(__);isUnDef(a.llmoptions)&&!isString(getEnv(a.llmenv))&&m(-1,"llmoptions not defined and "+a.llmenv+" not found.");printErrnl(_$(void 0).default("(processing data...)"));var c=$llm(isDef(a.llmoptions)?a.llmoptions:$sec("system","envs").get(a.llmenv));
c="md"==a.output||"mdtable"==a.output||"raw"==a.output?c.prompt(b):c.promptJSON(b);k(jsonParse(c,__,__,isString(c)),d)}],["json",(b,d)=>{printErrnl(_$(void 0).default("(processing data...)"));k(jsonParse(b,__,__,isString(b)),d)}]]),w={};isString(a.libs)&&(a.libs=a.libs.split(",").map(b=>b.trim()).filter(b=>0<b.length));isDef(__flags.OAFP)&&isArray(__flags.OAFP.libs)&&isArray(a.libs)?a.libs=__flags.OAFP.libs.concat(a.libs):a.libs=isDef(__flags.OAFP)?__flags.OAFP.libs:[];isArray(a.libs)&&a.libs.forEach(b=>
{try{var d=require("oafp_"+b+".js");if(isDef(d.oafplib)){var c=d.oafplib(clone(a),k,$o);isMap(c)&&(isArray(c.fileExtensions)&&c.fileExtensions.forEach(e=>{var f=e.ext;e=e.type;C.has(f)?printErr("WARN: Extension '"+f+"' already exists."):C.set(f,e)}),isArray(c.fileExtensionsNoMem)&&c.fileExtensionsNoMem.forEach(e=>{e=e.ext;F.has(e)?printErr("WARN: Extension '"+e+"' already exists."):F.add(e)}),isArray(c.input)&&c.input.forEach(e=>{var f=e.type;e=e.fn;x.has(f)?printErr("WARN: Input type '"+f+"' already exists."):
x.set(f,e)}),isArray(c.inputLine)&&c.inputLine.forEach(e=>{var f=e.type;e=e.fn;isUnDef(_inputLinesFns[f])?G[f]=e:printErr("WARN: Input type '"+f+"' already exists.")}),isArray(c.transform)&&c.transform.forEach(e=>{var f=e.type;e=e.fn;isUnDef(v[f])?v[f]=e:printErr("WARN: Transform '"+f+"' already exists.")}),isArray(c.output)&&c.output.forEach(e=>{var f=e.type;e=e.fn;z.has(f)?printErr("WARN: Output type '"+f+"' already exists."):z.set(f,e)}),isString(c.help)&&(w[b.toLowerCase()]=c.help))}else printErr("WARN: Library '"+
b+"' does not have oafplib.")}catch(e){printErr("WARN: Library '"+b+"' error: "+e)}});(""==a["-h"]||isString(a.help)&&0<a.help.length)&&B();a.format=_$(a.format,"format").isString().default(__);__initializeCon();String(java.lang.System.getProperty("os.name")).match(/Windows/)||__con.getTerminal().settings.set("sane");var H={__format:a.format,__from:a.from,__sql:a.sql,__path:a.path,__csv:a.csv,__pause:a.pause,__key:a.__key};isDef(a.inputcsv)&&(a.inputcsv=a.inputcsv.trim().startsWith("{")?jsonParse(a.inputcsv,
!0):af.fromSLON(a.inputcsv));isDef(a.csv)&&(a.csv=a.csv.trim().startsWith("{")?jsonParse(a.csv,!0):af.fromSLON(a.csv));B=!1;if(""==a["-v"]||isString(a.version)&&0<a.version.length)B=!0,p();var r="",D=!1;if(B)r=p();else if(a.jsonprefix=_$(a.jsonprefix,"jsonprefix").isString().default(__),a.jsondesc=toBoolean(_$(a.jsondesc,"jsondesc").isString().default("false")),isDef(a.file)){if(io.fileExists(a.file)||m(-1,"ERROR: File not found: '"+a.file+"'"),!F.has(a.type))if("json"==a.type||isUnDef(a.type))if(a.jsondesc){var I=
new Set;io.readStreamJSON(a.file,b=>{b=b.substring(2);isDef(a.jsonprefix)?b.startsWith(a.jsonprefix)&&I.add(b):I.add(b);return!1});r=stringify(Array.from(I),__,"")}else isDef(a.jsonprefix)?(p=io.readStreamJSON(a.file,b=>b.substring(2).startsWith(a.jsonprefix)),r=stringify(p,__,"")):r=io.readFileString(a.file);else r=io.readFileString(a.file)}else a.jsondesc&&m(-1,"ERROR: jsondesc only available for file input."),a.jsonprefix&&m(-1,"ERROR: jsonprefix only available for file input."),isDef(a.cmd)?r=
t(a.cmd,!0):"pm"!=a.input&&(r=[],io.pipeLn(b=>{isDef(G[a.type])?G[a.type](E(b),clone(H))&&r.push(b):r.push(b);return!1}),r=r.join("\n"));D||(isUnDef(a.type)&&(isDef(a.file)&&(p=a.file.substring(a.file.lastIndexOf(".")),C.has(p)&&(a.type=C.get(p))),isUnDef(a.type)&&(p=r.trim(),p.startsWith("{")||p.startsWith("[")?a.type="json":p.startsWith("<")?a.type="xml":isString(p)&&0<p.length?1<p.substring(0,p.indexOf("\n")).split(",").length?a.type="csv":p.substring(0,0<p.indexOf(": "))&&(a.type="yaml"):m(-1,
"Please provide the input type."))),isDef(a.type)&&x.has(a.type)?x.get(a.type)(r,H):(isString(a.type)&&printErr("WARN: "+a.type+" input type not supported. Using json."),x.get("json")(r,H)))}};oafp(params);
