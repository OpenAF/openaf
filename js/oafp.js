var params=processExpr(" ");
// (author: Nuno Aguiar, version: 20240312, license: Apache 2.0, url: https://github.com/openaf/oafp)
// ---
const _oafphelp={'docs/EXAMPLES.md':af.fromBytes2String(io.gunzip(af.fromBase64("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"))),
'docs/TEMPLATE.md':af.fromBytes2String(io.gunzip(af.fromBase64("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"))),
'docs/USAGE.md':af.fromBytes2String(io.gunzip(af.fromBase64(""))),
'docs/FILTERS.md':af.fromBytes2String(io.gunzip(af.fromBase64("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")))};

const oafp=a=>{if(!isUnDef(a)&&!isDef(a.____ojob)){Object.keys(a).forEach(b=>{var c=b.toLowerCase();b!=c&&isUnDef(a[c])&&(a[c]=a[b],delete a[b])});var E=b=>{for(var c=Object.keys(v),d=0;d<c.length;d++){var e=c[d];isDef(a[e])&&(b=v[e](b))}return b},A=(b,c)=>{c.__ifrom&&(b=$from(b).query(af.fromNLinq(c.__ifrom.trim())),delete c.__ifrom);if(c.__isql){var d=__;if(isString(a.sqlfilter))switch(a.sqlfilter.toLowerCase()){case "simple":d="nlinq";break;case "advanced":d="h2";break;default:d=__}isArray(b)&&
0<b.length&&(b=$sql(b,c.__isql.trim(),d));delete c.__isql}c.__path&&(b=$path(b,c.__path.trim()),delete c.__path);if(isString(b))return E(b);b=E(b);c.__from&&(b=$from(b).query(af.fromNLinq(c.__from.trim())),delete c.__from);if(c.__sql){d=__;if(isString(a.sqlfilter))switch(a.sqlfilter.toLowerCase()){case "simple":d="nlinq";break;case "advanced":d="h2";break;default:d=__}isArray(b)&&0<b.length&&(b=$sql(b,c.__sql.trim(),d));delete c.__sql}c.__opath&&(b=$path(b,c.__opath.trim()),delete c.__opath);return b},
l=(b,c,d)=>{c=clone(c);toBoolean(a.color)&&(__conConsole=!0);b=isString(b)?b.trim().startsWith("{")&&b.trim().endsWith("}")?A(jsonParse(b,__,__,!0),c):A(b,c):d?A([b],c)[0]:A(b,c);isDef(a.outputkey)&&(b=$$({}).set(a.outputkey,b));isDef(a.outkey)&&(b=$$({}).set(a.outkey,b));printErrnl("\r"+" ".repeat(_$(void 0).default("(processing data...)").length)+"\r");z.has(c.__format)?z.get(c.__format)(b,c):$o(b,c)},r=(b,c)=>{var d=af.fromString2Bytes(""),e=af.newOutputStream();$sh(b).cb((f,h,g)=>{ioStreamCopy(e,
f);f=e.toByteArray();0<f.length&&(d=f)}).get();return c?af.fromBytes2String(d):d},t=b=>{if(!isString(b)||""==b||isNull(b))return"";b=b.trim();return b.startsWith("{")?jsonParse(b,__,__,!0):af.fromSLON(b)},k=(b,c)=>{isUnDef(c)&&(c="exit: "+b);if(isUnDef(ow.oJob)&&!toBoolean(a.noexit))0!=b&&printErr(c),exit(b);else throw c;},B=()=>{__initializeCon();a.help=_$(a.help,"help").isString().default("");switch(a.help.toLowerCase()){case "filters":var b="docs/FILTERS.md";break;case "template":b="docs/TEMPLATE.md";
break;case "examples":b="docs/EXAMPLES.md";break;case "readme":case "usage":b="docs/USAGE.md";break;default:b=a.help.toLowerCase(),b=isDef(w[b])?"docs/"+b+".md":"docs/USAGE.md"}var c=(getOPackPath("oafproc")||".")+"/"+b;let d="";if("docs/USAGE.md"==b&&0<Object.keys(w).length){d="\n---\n\n## \ud83d\udcda Libs help documents\n\n| Lib | Help |\n| --- | --- |\n";for(let e in w)d+="| "+e+" | help="+e+" |\n"}isDef(c)&&io.fileExists(c)?(__conConsole=__ansiColorFlag=!0,isDef(ow.format.string.pauseString)&&
toBoolean(a.pause)?ow.format.string.pauseString(ow.format.withMD(io.readFileString(c)+d)):print(ow.format.withMD(io.readFileString(c)+d))):isDef(global._oafphelp)&&isDef(global._oafphelp[b])?(__conConsole=__ansiColorFlag=!0,isDef(ow.format.string.pauseString)&&toBoolean(a.pause)?ow.format.string.pauseString(ow.format.withMD(global._oafphelp[b]+d)):print(ow.format.withMD(global._oafphelp[b]+d))):isString(w[a.help])?(__conConsole=__ansiColorFlag=!0,isDef(ow.format.string.pauseString)&&toBoolean(a.pause)?
ow.format.string.pauseString(ow.format.withMD(w[a.help])):print(ow.format.withMD(w[a.help]))):print("Check https://github.com/OpenAF/oafp/blob/master/src/"+b);k(0)},I=()=>{var b=(getOPackPath("oafproc")||".")+"/.package.yaml";b={oafp:{version:io.fileExists(b)?io.readFileYAML(b).version:"(not available/embedded)",inputs:Array.from(x.keys()).filter(c=>"?"!=c).sort(),transforms:Object.keys(v).filter(c=>"transforms"!=c).sort(),outputs:Array.from(z.keys()).filter(c=>"?"!=c).sort(),flags:__flags.OAFP},
openaf:{version:getVersion(),distribution:getDistribution(),home:getOpenAFPath(),opacks:$from($m4a(getOPackLocalDB())).notEquals("name","OpenAF").sort("name").select({name:"",version:""})},java:{version:ow.format.getJavaVersion(),home:ow.format.getJavaHome(),vendor:String(java.lang.System.getProperty("java.vendor")),params:af.fromJavaArray(java.lang.management.ManagementFactory.getRuntimeMXBean().getInputArguments())},os:{name:String(java.lang.System.getProperty("os.name")),version:String(java.lang.System.getProperty("os.version")),
arch:ow.format.getOSArch(),cpuCores:getNumberOfCores(!0),mem:{max:Number(java.lang.Runtime.getRuntime().maxMemory()),total:Number(java.lang.Runtime.getRuntime().totalMemory())},store:{tmpDirPath:String(java.lang.System.getProperty("java.io.tmpdir")),freeTmpDirBytes:Number(java.nio.file.Files.getFileStore(java.nio.file.Paths.get(java.lang.System.getProperty("java.io.tmpdir"))).getUsableSpace())}}};return stringify(b,__,"")};ow.loadFormat();a.format=a.output||a.format||a.out;a.type=a.input||a.type||
a.in;a.out=a.format;a.output=a.format;a.in=a.type;a.input=a.type;if(isUnDef(a.file)&&isUnDef(a.cmd)){let b=__;for(let c in a)if(""===a[c]){b=c;break}a.file=b}var C=new Map([[".json","json"],[".ndjson","ndjson"],[".yaml","yaml"],[".xml","xml"],[".csv","csv"],[".ini","ini"],[".md","md"],[".xls","xls"],[".xlsx","xls"],[".sql","sql"]]),F=new Set(["csv","ndjson"]),G={lines:(b,c)=>{isBoolean(a.linesjoin)||(a.linesjoin=toBoolean(_$(a.linesjoin,"linesjoin").isString().default(__)));if(!a.linesjoin&&isString(b))0!=
b.trim().length&&(0<b.trim().length&&(b=b.trim().split(/\r?\n/)),l(b,c,!0)),D=!0;else return!0},ndjson:(b,c)=>{isBoolean(a.ndjsonjoin)||(a.ndjsonjoin=toBoolean(_$(a.ndjsonjoin,"ndjsonjoin").isString().default(__)));if(a.ndjsonjoin)return!0;isUnDef(global.__ndjsonbuf)&&0!=b.length&&b.trim().startsWith("{")&&(global.__ndjsonbuf="");if(isDef(global.__ndjsonbuf)){if(0!=b.length&&!b.trim().endsWith("}")){global.__ndjsonbuf+=b.trim();return}0<global.__ndjsonbuf.length&&(b=global.__ndjsonbuf+b,global.__ndjsonbuf=
__)}0==b.length||0<b.length&&"{"!=b.trim().substring(0,1)?(l(jsonParse(global.__ndjsonbuf,__,__,!0),c,!0),D=!0,global.__ndjsonbuf=__):(l(jsonParse(b,__,__,!0),c,!0),D=!0)}},v={transforms:b=>{if(toBoolean(a.transforms))return Object.keys(v).filter(c=>"transforms"!=c).sort()},cmlt:b=>{if(toBoolean(a.cmlt)){b=isArray(b)?b:[b];a.cmltch=_$(a.cmltch,"cmltch").default("(type: simple)");var c=t(a.cmltch);if(isMap(c))return isUnDef(c.type)&&k(-1,"cmltch.type is not defined."),isDef(c.lib)&&loadLib(c.lib),
0>$ch().list().indexOf("oafp::cmltdata")&&("remote"==c.type?$ch("oafp::cmltdata").createRemote(c.url):$ch("oafp::cmltdata").create(c.type,c.options),c=Number(_$(a.cmltsize,"cmltsize").isNumber().default(100))-1,0<c&&$ch("oafp::cmltdata").subscribe(ow.ch.utils.getHousekeepSubscriber("oafp::cmltdata",c))),b.forEach(d=>$ch("oafp::cmltdata").set({t:nowNano()},d)),$ch("oafp::cmltdata").getAll();k(-1,"Invalid cmltch parameter")}},jsonschemagen:b=>{if(toBoolean(a.jsonschemagen))return ow.loadObj(),ow.obj.schemaGenerator(b)},
jsonschemacmd:b=>v.jsonschema(b),jsonschema:b=>{isMap(b)||k(-1,"jsonschema is only supported with a map.");isUnDef(a.jsonschema)&&isUnDef(a.jsonschemacmd)&&k(-1,"You need to provide a jsonschema=someFile.json or jsonschemacmd=someCommand");ow.loadObj();var c;if(isDef(a.jsonschemacmd)){var d=$sh(a.jsonschemacmd).getJson(0);0==d.exitcode?c=d.stdout:k(-1,"Error executing the command '"+a.jsonschemacmd+"': "+d.stderr)}else c=io.readFileJSON(a.jsonschema);isMap(c)||k(-1,"The schema provided is not a valid JSON schema.");
ow.obj.schemaInit({allErrors:!0});c=ow.obj.schemaCompile(c);return{valid:c(b),errors:c.errors}},sortmapkeys:b=>{if(toBoolean(a.sortmapkeys)&&isObject(b)){let c=(d,e)=>{let f=Object.keys(d).sort(),h={};for(let g=0;g<f.length;g++){let n=f[g],m=d[n];Array.isArray(m)?h[n]=m.map(p=>"object"===typeof p&&null!==p&&void 0!==p?sortMapKeys(p,e):p):h[n]=e&&"object"===typeof m&&null!==m&&void 0!==m?c(m,e):m}return h};return c(b,!0)}return b},searchkeys:b=>isObject(b)?searchKeys(b,a.searchkeys):b,searchvalues:b=>
isObject(b)?searchValues(b,a.searchvalues):b,maptoarray:b=>toBoolean(a.maptoarray)&&isMap(b)?$m4a(b,a.maptoarraykey):b,arraytomap:b=>toBoolean(a.arraytomap)&&isArray(b)?$a4m(b,a.arraytomapkey,toBoolean(a.arraytomapkeepkey)):b,flatmap:b=>toBoolean(a.flatmap)&&isObject(b)?ow.loadObj().flatMap(b,a.flatmapkey):b,merge:b=>{if(toBoolean(a.merge)&&isArray(b)&&1<b.length){for(var c,d=0;d<b.length;d++)c=0==d?b[d]:merge(c,b[d]);return c}return b},correcttypes:b=>{toBoolean(a.correcttypes)&&isObject(b)&&traverse(b,
(c,d,e,f)=>{switch(descType(d)){case "number":isString(d)&&(f[c]=Number(d));break;case "string":"true"==d.trim().toLowerCase()||"false"==d.trim().toLowerCase()?f[c]=toBoolean(d):d.trim().match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$/)?f[c]=new Date(d):d.trim().match(/^\d{4}-\d{2}-\d{2}$/)?f[c]=new Date(d):d.trim().match(/^\d{2}:\d{2}:\d{2}$/)?f[c]=new Date(d):d.trim().match(/^\d{2}:\d{2}$/)&&(f[c]=new Date(d))}});return b},removenulls:b=>{toBoolean(a.removenulls)&&traverse(b,(c,d,e,f)=>{(isNull(d)||
isUnDef(d))&&delete f[c]});return b},removedups:b=>{if(toBoolean(a.removedups)){if(isArray(b)){var c=new Set,d=[];b.forEach(e=>{var f=e;isObject(e)&&(f=sortMapKeys(f));f=stringify(f,__,!0);c.has(f)||(c.add(f),d.push(e))});return d}k(-1,"removedups is only supported for arrays")}return b},llmprompt:b=>{if(isString(a.llmprompt)){a.llmenv=_$(a.llmenv,"llmenv").isString().default("OAFP_MODEL");a.llmoptions=_$(a.llmoptions,"llmoptions").isString().default(__);var c=$llm(isDef(a.llmoptions)?a.llmoptions:
$sec("system","envs").get(a.llmenv)),d="json",e=!0;isString(a.input)&&("md"==a.input&&(d="markdown",e=!1),"mdtable"==a.input&&(d="markdown table",e=!1),"hsperf"==a.input&&(d="java hsperf file"),"raw"==a.input&&(d="raw",e=!1));c=c.withContext(e?stringify(b,__,!0):b,isDef(a.llmcontext)?a.llmcontext:`${d} input data`);return!isString(a.output)||"md"!=a.output&&"mdtable"!=a.output&&"raw"!=a.output?c=c.promptJSON(a.llmprompt):c=c.prompt(a.llmprompt)}return b},splitlines:b=>toBoolean(a.splitlines)&&isString(b)?
b.split(/\r?\n/):b},z=new Map([["?",(b,c)=>{b=Array.from(z.keys()).filter(d=>"?"!=d).sort();$o(b,c)}],["pm",(b,c)=>{$o(b,c)}],["key",(b,c)=>{$o(b,c)}],["html",(b,c)=>{let d;c=!1;a.htmlopen=toBoolean(_$(a.htmlopen,"htmlopen").isString().default("true"));a.htmlwait=_$(a.htmlwait,"htmlwait").isNumber().default(2500);a.htmlopen&&(d=io.createTempFile("oafp_",".html"));ow.loadTemplate();isString(b)?(b=ow.template.html.genStaticVersion(ow.template.parseMD2HTML(b,!toBoolean(a.htmlpart),!toBoolean(a.htmlcompact))),
b=b.replace("<html>",'<html><meta charset="utf-8">')):(b=ow.template.html.parseMap(b,!0),b='<html><meta charset="utf-8"><style>'+b.css+"</style><body>"+b.out+"</body></html>");a.htmlopen&&(io.writeFileString(d,b),c=openInBrowser("file:///"+d.replace(/\\/g,"/")));c?sleep(a.htmlwait,!0):print(b)}],["ctable",(b,c)=>{$o(b,c)}],["stable",(b,c)=>{$o(b,c)}],["table",(b,c)=>{$o(b,c)}],["log",(b,c)=>{isString(b)&&toBoolean(a.logprintall)?print(b.replace(/\n$/,"")):(c=b,isMap(b)&&(c=[b]),isArray(c)&&c.forEach(d=>
{if(isMap(d)){let e=isDef(d["@timestamp"])?d["@timestamp"]:__,f=isDef(d.level)?d.level:__;d=isDef(d.message)?d.message:__;let h;isDef(f)&&(0<=f.toLowerCase().indexOf("err")&&(h="RED,BOLD"),0<=f.toLowerCase().indexOf("warn")&&(h="YELLOW"));isDef(e)&&24<e.length&&(e=e.substring(0,23)+"Z");(isDef(d)||isDef(e))&&print(ansiColor("BOLD",e)+(isDef(f)?" | "+ansiColor(h,f):"")+" | "+ansiColor(h,d))}}))}],["raw",(b,c)=>{isString(b)?print(b):sprint(b)}],["ini",(b,c)=>{isString(b)||(ow.loadJava(),c=new ow.java.ini,
print(c.put(b).save()))}],["mdyaml",(b,c)=>{isArray(b)?b.forEach((d,e)=>{$o(d,merge(c,{__format:"yaml"}));e<b.length-1&&print("---\n")}):$o(b,merge(c,{__format:"yaml"}))}],["mdtable",(b,c)=>{isArray(b)&&(ow.loadTemplate(),print(ow.template.md.table(b)))}],["template",(b,c)=>{isString(b)||(ow.loadTemplate(),ow.template.addConditionalHelpers(),ow.template.addOpenAFHelpers(),ow.template.addFormatHelpers(),isUnDef(a.template)&&k(-1,"For output=handlebars you need to provide a template=someFile.hbs"),
tprint(io.readFileString(a.template),b))}],["openmetrics",(b,c)=>{isString(b)||(ow.loadMetrics(),b=ow.metrics.fromObj2OpenMetrics(b,a.metricsprefix,a.metricstimestamp),b=b.split("\n").map(d=>{0<=d.indexOf('{_id="')&&(d=d.replace(/{_id="\d+",/,"{"));0<=d.indexOf(',_id="')&&(d=d.replace(/,_id="\d+"}/,"}"));0<=d.indexOf('_id="')&&(d=d.replace(/,_id="\d+",/,","));return d}).join("\n"),$o(b,c))}],["pjson",(b,c)=>{c.__format="prettyjson";$o(b,c)}],["base64",(b,c)=>{b=isString(b)?b:stringify(b);toBoolean(a.base64gzip)?
print(af.fromBytes2String(af.toBase64Bytes(io.gzip(af.fromString2Bytes(b))))):print(af.fromBytes2String(af.toBase64Bytes(b)))}],["chart",(b,c)=>{isUnDef(a.chart)&&k(-1,'For output=chart you need to provide a chart="<units> [<path[:color][:legend]>...]"');isUnDef(splitBySepWithEnc)&&k(-1,"Output=chart is not supported in this version of OpenAF");c=splitBySepWithEnc(a.chart," ",[['"','"'],["'","'"]]);let d=[];if(1<c.length){for(let e=0;e<c.length;e++)if(0==e)d.push(c[e]);else{let f=splitBySepWithEnc(c[e],
":",[['"','"'],["'","'"]]).map((h,g)=>{if(0==g){if(h.startsWith("-"))return h;global["_oafp_fn_"+e]=()=>$path(b,h);return"_oafp_fn_"+e}return h}).join(":");d.push(f)}toBoolean(a.chartcls)&&cls();print(printChart("oafp "+d.join(" ")))}}],["ch",(b,c)=>{isUnDef(a.ch)&&k(-1,'For output=ch you need to provide a ch="(type: ...)"');isUnDef(a.chkey)&&k(-1,'For output=ch you need to provide a chkey="key1, key2"');b=isMap(b)?[b]:b;a.ch=t(a.ch);isMap(a.ch)?(isUnDef(a.ch.type)&&k(-1,"ch.type is not defined."),
isDef(a.ch.lib)&&loadLib(a.ch.lib),"remote"==a.ch.type?$ch("oafp::outdata").createRemote(a.ch.url):$ch("oafp::outdata").create(a.ch.type,a.ch.options),toBoolean(a.chunset)?$ch("oafp::outdata").unsetAll(a.chkey.split(",").map(d=>d.trim()),b):$ch("oafp::outdata").setAll(a.chkey.split(",").map(d=>d.trim()),b),$ch("oafp::outdata").destroy()):k(-1,"Invalid ch parameter")}],["db",(b,c)=>{(!isArray(b)||1>b.length)&&k(-1,"db is only supported for filled arrays/lists");a.dbtable=_$(a.dbtable,"outdbtable").isString().default("data");
a.dbnocreate=toBoolean(_$(a.dbnocreate,"outdbnocreate").isString().default("false"));a.dbicase=toBoolean(_$(a.dbicase,"outdbicase").isString().default("false"));a.dbbatchsize=_$(a.dbbatchsize,"dbbatchsize").isNumber().default(__);ow.loadObj();try{isString(a.dbjdbc)||k(-1,"dbjdbc URL is not defined.");isDef(a.dblib)&&loadLib("jdbc-"+a.dblib+".js");var d=new DB(a.dbjdbc,a.dbuser,a.dbpass,a.dbtimeout);if(!a.dbnocreate)try{var e=ow.obj.fromObj2DBTableCreate(a.dbtable,b,__,!a.dbicase);d.u(e);d.commit()}catch(m){d.rollback(),
k(-1,"Error creating table: "+m)}var f=Object.keys(ow.obj.flatMap(b[0]));var h=a.dbicase?f.join(",").toUpperCase():'"'+f.join('", "')+'"';let n="";var g=b.map(m=>{var p=ow.obj.flatMap(m);m=[];for(var u in f)m.push(p[f[u]]);u=f.map(y=>String(p[y]));m="INSERT INTO "+(a.dbicase?a.dbtable:'"'+a.dbtable+'"')+" ("+h+") VALUES ("+u.map(y=>"?").join(", ")+")";m.length>n.length&&(n=String(m));return u});d.usArray(n,g,a.dbbatchsize)}catch(n){isDef(d)&&d.rollback(),printErr(n),k(-1,"Error connecting to the database: "+
n)}finally{isDef(d)&&(d.commit(),d.close())}}],["sql",(b,c)=>{(!isArray(b)||1>b.length)&&k(-1,"sql is only supported for filled arrays/lists");a.sqltable=_$(a.sqltable,"sqltable").isString().default("data");a.sqlicase=toBoolean(_$(a.sqlicase,"sqlicase").isString().default("false"));a.sqlnocreate=toBoolean(_$(a.sqlnocreate,"sqlnocreate").isString().default("false"));ow.loadObj();a.sqlnocreate||print(ow.obj.fromObj2DBTableCreate(a.sqltable,b,__,!a.sqlicase)+";\n");var d=Object.keys(ow.obj.flatMap(b[0]));
var e=a.sqlicase?d.join(",").toUpperCase():'"'+d.join('", "')+'"';print(b.map(f=>{var h=ow.obj.flatMap(f);f=[];for(var g in d)f.push(h[d[g]]);g=d.map(n=>{n=h[n];isString(n)&&(n="'"+n.replace(/'/g,"''")+"'");isNull(n)&&(n="null");return n});return"INSERT INTO "+(a.sqlicase?a.sqltable:'"'+a.sqltable+'"')+" ("+e+") VALUES ("+g.join(",")+");"}).join("\n"))}],["xls",(b,c)=>{if(!isString(b)){try{includeOPack("plugin-XLS")}catch(h){k(-1,"plugin-XLS not found. You need to install it to use the XLS output (opack install plugin-XLS)")}plugin("XLS");
if(isMap(b)){ow.loadObj();var d=ow.obj.flatMap(b);var e=Object.keys(d).map(h=>({key:h,value:d[h]}))}isArray(b)&&(e=b);traverse(e,(h,g,n,m)=>{isString(g)&&g.startsWith("=")&&(m[h]="'"+g)});b=!1;c=a.xlsfile;isUnDef(a.xlsfile)&&(b=!0,a.xlsfile=io.createTempFile("oafp",".xlsx"));c=new XLS(isDef(c)&&io.fileExists(c)?c:__);var f=c.getSheet(_$(a.xlssheet,"xlssheet").isString().default("data"));a.xlsformat=_$(a.xlsformat,"xlsformat").isString().default('(bold: true, borderBottom: "medium", borderBottomColor: "red")');
a.xlsformat=t(a.xlsformat);ow.format.xls.setTable(c,f,"A",1,e,__,a.xlsformat);c.writeFile(a.xlsfile);c.close();a.xlsopenwait=_$(a.xlsopenwait,"xlsopenwait").isNumber().default(5E3);a.xlsopen=toBoolean(_$(a.xlsopen,"xlsopen").isString().default("true"));a.xlsopen&&(ow.format.isWindows()?($sh("start "+a.xlsfile).exec(),b&&sleep(a.xlsopenwait,!0)):ow.format.getOS().startsWith("Mac")&&($sh("open "+a.xlsfile).exec(),b&&sleep(a.xlsopenwait,!0)))}}]]),x=new Map([["?",(b,c)=>{b=Array.from(x.keys()).filter(d=>
"?"!=d).sort();l(b,c)}],["pm",(b,c)=>{printErrnl(_$(void 0).default("(processing data...)"));isDef(__pm._map)&&(b=__pm._map);isDef(__pm._list)&&(b=__pm._list);l(b,c)}],["jsonschema",(b,c)=>{printErrnl(_$(void 0).default("(processing data...)"));b=jsonParse(b,__,__,!0);isMap(b)||k(-1,"jsonschema is only supported with a map.");ow.loadObj();b=ow.obj.schemaSampleGenerator(b);l(b,c)}],["yaml",(b,c)=>{printErrnl(_$(void 0).default("(processing data...)"));b=af.fromYAML(b);l(b,c)}],["xml",(b,c)=>{printErrnl(_$(void 0).default("(processing data...)"));
a.xmlignored=_$(a.xmlignored,"xmlignored").isString().default(__);a.xmlprefix=_$(a.xmlprefix,"xmlprefix").isString().default(__);a.xmlfiltertag=toBoolean(_$(a.xmlfiltertag,"xmlfiltertag").isString().default(__));0<=b.indexOf("<?xml")&&(b=b.substring(b.indexOf("?>")+2).trim());0<=b.indexOf("<!DOCTYPE")&&(b=b.substring(b.indexOf(">")+1).trim());b=af.fromXML2Obj(b,a.xmlignored,a.xmlprefix,!a.xmlfiltertag);l(b,c)}],["lines",(b,c)=>{isBoolean(a.linesjoin)||(a.linesjoin=toBoolean(_$(a.linesjoin,"linesjoin").isString().default(__)));
printErrnl(_$(void 0).default("(processing data...)"));let d=__,e=[],f=g=>{g=g.split("\n").map(m=>{let p="",u=0;for(let y=0;y<m.length;y++)if("\t"===m[y]){let J=8-u%8;p+=" ".repeat(J);u+=J}else p+=m[y],u++;return p}).join("\n");if(isUnDef(d))return d=[],lastPos=0,isUnDef(a.linesvisualsepre)&&(a.linesvisualsepre=" \\s+"),g.split(new RegExp(a.linesvisualsepre)).forEach(m=>{d.push(m);m=g.substring(lastPos).match(new RegExp(ow.format.escapeRE(m)+"("+a.linesvisualsepre+"|$)"));!isNull(m)&&isDef(m.index)?
(e.push(lastPos+m.index),lastPos=m.index):k(-1,"Problem with linesvisual to find header positioning.")}),__;var n={};e.forEach((m,p)=>{n[d[p]]=g.substring(m,p+1<e.length?e[p+1]-1:__).trim()});return n};if(a.linesjoin)if(isDef(a.file)&&isUnDef(a.cmd)&&(b=io.readFileString(a.file)),isDef(a.cmd)&&(b=r(a.cmd,!0)),b=b.split(/\r?\n/),toBoolean(a.linesvisual)){var h=[];b.forEach(g=>{0!=g.length&&(g=f(g),isDef(g)&&h.push(g))});l(h,c)}else l(b,c);else b=isDef(a.file)&&isUnDef(a.cmd)?io.readFileStream(a.file):
isDef(a.cmd)?af.fromBytes2InputStream(r(a.cmd)):af.fromString2InputStream(b),ioStreamReadLines(b,g=>{toBoolean(a.linesvisual)?(g=f(g),isDef(g)&&l(g,clone(c),!0)):l(g,clone(c),!0)}),b.close()}],["ndjson",(b,c)=>{isBoolean(a.ndjsonjoin)||(a.ndjsonjoin=toBoolean(_$(a.ndjsonjoin,"ndjsonjoin").isString().default(__)));printErrnl(_$(void 0).default("(processing data...)"));global.__ndjsonbuf=__;var d=(f,h)=>{isUnDef(global.__ndjsonbuf)&&0!=f.length&&f.trim().startsWith("{")&&(global.__ndjsonbuf="");if(isDef(global.__ndjsonbuf)){if(0!=
f.length&&!f.trim().endsWith("}")){global.__ndjsonbuf+=f.trim();return}0<global.__ndjsonbuf.length&&(f=global.__ndjsonbuf+f,global.__ndjsonbuf=__)}0==f.length||0<f.length&&"{"!=f.trim().substring(0,1)?(h(f),global.__ndjsonbuf=__):h(f)},e=f=>{var h=[];f.split("\n").filter(g=>0<g.length).forEach(g=>d(g,n=>h.push(jsonParse(n,__,__,toBoolean(a.ndjsonfilter)))));return h};a.ndjsonjoin?(isDef(a.file)&&isUnDef(a.cmd)&&(b=io.readFileString(a.file)),isDef(a.cmd)&&(b=r(a.cmd,!0)),l(e(b),c)):(b=isDef(a.file)&&
isUnDef(a.cmd)?io.readFileStream(a.file):isDef(a.cmd)?af.fromBytes2InputStream(r(a.cmd)):af.fromString2InputStream(b),ioStreamReadLines(b,f=>{d(f,h=>l(jsonParse(h,__,__,!0),clone(c),!0))}),b.close())}],["md",(b,c)=>{printErrnl(_$(void 0).default("(processing data...)"));__conConsole=__ansiColorFlag=!0;isUnDef(a.format)&&isUnDef(c.__format)&&(a.format="md",c.__format="md");l(b,c)}],["mdtable",(b,c)=>{printErrnl(_$(void 0).default("(processing data...)"));ow.loadTemplate();b=ow.template.md.fromTable(b);
l(b,c)}],["raw",(b,c)=>{printErrnl(_$(void 0).default("(processing data...)"));l(b,c)}],["ini",(b,c)=>{printErrnl(_$(void 0).default("(processing data...)"));ow.loadJava();var d=new ow.java.ini;b=isDef(a.file)?d.loadFile(a.file).get():d.load(b).get();l(b,c)}],["sql",(b,c)=>{isString(b)?l(af.fromSQL(b).ast,c):l(b,c)}],["openmetrics",(b,c)=>{isString(b)?(ow.loadMetrics(),l(ow.metrics.fromOpenMetrics2Array(b),c)):l(b,c)}],["ch",(b,c)=>{printErrnl(_$(void 0).default("(processing data...)"));isUnDef(a.inch)&&
k(-1,"inch is not defined.");a.inch=t(a.inch);if(isMap(a.inch)){isUnDef(a.inch.type)&&k(-1,"inch.type is not defined.");isDef(a.inch.lib)&&loadLib(a.inch.lib);"remote"==a.inch.type?$ch("oafp::indata").createRemote(a.inch.url):$ch("oafp::indata").create(a.inch.type,a.inch.options);var d=t(b);toBoolean(a.inchall)||0==b.trim().length?l($ch("oafp::indata").getAll(isMap(d)?d:__),c):l($ch("oafp::indata").get(isMap(d)?d:__),c);$ch("oafp::indata").destroy()}else k(-1,"inch is not a valid map.")}],["db",(b,
c)=>{if(isString(b)){printErrnl(_$(void 0).default("(processing data...)"));isString(a.indbjdbc)||k(-1,"indbjdbc URL is not defined.");try{isDef(a.indblib)&&loadLib("jdbc-"+a.indblib+".js");var d=new DB(a.indbjdbc,a.indbuser,a.indbpass,a.indbtimeout);d.convertDates(!0);if(toBoolean(a.indbexec)){var e=d.u(b);l({affectedRows:e},c);d.commit()}else e=d.q(b),isMap(e)&&isArray(e.results)?l(e.results,c):k(-1,"Invalid DB result: "+stringify(e))}catch(f){printErr(f.message),isDef(d)&&d.rollback(),k(-1,"Error executing SQL: "+
f.message)}finally{isDef(d)&&(d.rollback(),d.close())}}else k(-1,"db is only supported with a SQL string.")}],["xls",(b,c)=>{printErrnl(_$(void 0).default("(processing data...)"));try{includeOPack("plugin-XLS")}catch(e){k(-1,"plugin-XLS not found. You need to install it to use the XLS output (opack install plugin-XLS)")}a.xlssheet=_$(a.xlssheet,"xlssheet").isString().default(0);a.xlsevalformulas=toBoolean(_$(a.xlsevalformulas,"xlsevalformulas").isString().default(!0));a.xlscol=_$(a.xlscol,"xlscol").isString().default("A");
a.xlsrow=_$(a.xlsrow,"xlsrow").isString().default(1);plugin("XLS");if(isDef(a.file)||isDef(a.cmd)){b=new XLS(isDef(a.cmd)?r(a.cmd):a.file);var d=b.getSheet(a.xlssheet);d=b.getTable(d,a.xlsevalformulas,a.xlscol,a.xlsrow);b.close();isDef(d)&&isMap(d)&&(d=d.table);l(d,c)}else k(-1,"XLS is only support with 'file' or 'cmd' defined. Please provide a file=... or a cmd=...")}],["csv",(b,c)=>{printErrnl(_$(void 0).default("(processing data...)"));if(isDef(a.file)||isDef(a.cmd)){var d=isDef(a.cmd)?af.fromBytes2InputStream(r(a.cmd)):
io.readFileStream(a.file);b=$csv(a.inputcsv).fromInStream(d).toOutArray();d.close()}else b=$csv(a.inputcsv).fromInString(b).toOutArray();l(b,c)}],["hsperf",(b,c)=>{if(isDef(a.file)||isDef(a.cmd)){printErrnl(_$(void 0).default("(processing data...)"));ow.loadJava();var d=isDef(a.cmd)?ow.java.parseHSPerf(r(a.cmd)):ow.java.parseHSPerf(a.file);d.__ts=new Date;var e=0,f=0;d.sun.gc.generation.forEach(h=>{h.space.forEach(g=>{f+=Number(g.used);e=isNumber(g.capacity)?e+Number(g.capacity):e;d.sun.gc["__percUsed_"+
g.name]=100*g.used/g.capacity})});d.sun.gc.__percUsed_meta=100*d.sun.gc.metaspace.used/d.sun.gc.metaspace.capacity;d.sun.gc.__percUsed_ccs=100*d.sun.gc.compressedclassspace.used/d.sun.gc.compressedclassspace.capacity;b=$from(d.sun.gc.collector).equals("name","PSScavenge").at(0);d.sun.gc.__ygc=isDef(b)?Number(b.invocations):0;d.sun.gc.__ygct=isDef(b)?Number(b.time/1E9):0;b=$from(d.sun.gc.collector).equals("name","PSParallelCompact").orEquals("name","").at(0);d.sun.gc.__fgc=isDef(b)?Number(b.invocations):
0;d.sun.gc.__fgct=isDef(b)?Number(b.time/1E9):0;d.sun.gc.__gct=$from(d.sun.gc.collector).sum("time")/1E9;d.java.__mem={total:e,used:f,free:e-f,metaMax:d.sun.gc.metaspace.maxCapacity,metaTotal:d.sun.gc.metaspace.capacity,metaUsed:d.sun.gc.metaspace.used,metaFree:d.sun.gc.metaspace.capacity-d.sun.gc.metaspace.used};l(d,c)}else k(-1,"hsperf is only supported with either 'file' or 'cmd' defined.")}],["base64",(b,c)=>{printErrnl(_$(void 0).default("(processing data...)"));b=toBoolean(a.base64gzip)?af.fromBytes2String(io.gunzip(af.fromBase64(b,
!0))):af.fromBytes2String(af.fromBase64(b));l(b,c)}],["llm",(b,c)=>{a.llmenv=_$(a.llmenv,"llmenv").isString().default("OAFP_MODEL");a.llmoptions=_$(a.llmoptions,"llmoptions").isString().default(__);isUnDef(a.llmoptions)&&!isString(getEnv(a.llmenv))&&k(-1,"llmoptions not defined and "+a.llmenv+" not found.");printErrnl(_$(void 0).default("(processing data...)"));var d=$llm(isDef(a.llmoptions)?a.llmoptions:$sec("system","envs").get(a.llmenv));d="md"==a.output||"mdtable"==a.output||"raw"==a.output?d.prompt(b):
d.promptJSON(b);l(jsonParse(d,__,__,isString(d)),c)}],["slon",(b,c)=>{printErrnl(_$(void 0).default("(processing data...)"));l(af.fromSLON(b),c)}],["json",(b,c)=>{printErrnl(_$(void 0).default("(processing data...)"));l(jsonParse(b,__,__,isString(b)),c)}]]),w={};isString(a.libs)&&(a.libs=a.libs.split(",").map(b=>b.trim()).filter(b=>0<b.length));isDef(__flags.OAFP)&&isArray(__flags.OAFP.libs)&&isArray(a.libs)?a.libs=__flags.OAFP.libs.concat(a.libs):a.libs=isDef(__flags.OAFP)?__flags.OAFP.libs:[];isArray(a.libs)&&
a.libs.forEach(b=>{try{var c=require("oafp_"+b+".js");if(isDef(c.oafplib)){var d=c.oafplib(clone(a),l,$o,this);isMap(d)&&(isArray(d.fileExtensions)&&d.fileExtensions.forEach(e=>{var f=e.ext;e=e.type;C.has(f)?printErr("WARN: Extension '"+f+"' already exists."):C.set(f,e)}),isArray(d.fileExtensionsNoMem)&&d.fileExtensionsNoMem.forEach(e=>{e=e.ext;F.has(e)?printErr("WARN: Extension '"+e+"' already exists."):F.add(e)}),isArray(d.input)&&d.input.forEach(e=>{var f=e.type;e=e.fn;x.has(f)?printErr("WARN: Input type '"+
f+"' already exists."):x.set(f,e)}),isArray(d.inputLine)&&d.inputLine.forEach(e=>{var f=e.type;e=e.fn;isUnDef(_inputLinesFns[f])?G[f]=e:printErr("WARN: Input type '"+f+"' already exists.")}),isArray(d.transform)&&d.transform.forEach(e=>{var f=e.type;e=e.fn;isUnDef(v[f])?v[f]=e:printErr("WARN: Transform '"+f+"' already exists.")}),isArray(d.output)&&d.output.forEach(e=>{var f=e.type;e=e.fn;z.has(f)?printErr("WARN: Output type '"+f+"' already exists."):z.set(f,e)}),isString(d.help)&&(w[b.toLowerCase()]=
d.help))}else printErr("WARN: Library '"+b+"' does not have oafplib.")}catch(e){printErr("WARN: Library '"+b+"' error: "+e)}});(""==a["-h"]||isString(a.help)&&0<a.help.length)&&B();a.format=_$(a.format,"format").isString().default(__);__initializeCon();String(java.lang.System.getProperty("os.name")).match(/Windows/)||__con.getTerminal().settings.set("sane");if(isDef(a.secKey)){toBoolean(a.secEnv)&&(a.secRepo="system",a.secBucket="envs");a.secRepo=_$(a.secRepo,"secRepo").isString().default(getEnv("OAFP_SECREPO"));
a.secBucket=_$(a.secBucket,"secBucket").isString().default(getEnv("OAFP_SECBUCKET"));a.secPass=_$(a.secPass,"secPass").isString().default(getEnv("OAFP_SECPASS"));a.secMainPass=_$(a.secMainPass,"secMainPass").isString().default(getEnv("OAFP_SECMAINPASS"));a.secFile=_$(a.secFile,"secFile").isString().default(getEnv("OAFP_SECFILE"));let b=$sec(a.secRepo,a.secBucket,a.secPass,a.secMainPass,a.secFile).get(secKey);isDef(b)&&Object.keys(b).forEach(c=>a[c]=b[c])}var H={__format:a.format,__from:a.from,__ifrom:a.ifrom,
__isql:a.isql,__sql:a.sql,__path:a.path,__opath:a.opath,__csv:a.csv,__pause:a.pause,__key:a.__key};isDef(a.inputcsv)&&(a.inputcsv=t(a.inputcsv));isDef(a.incsv)&&(a.incsv=t(a.incsv));isDef(a.csv)&&(a.csv=t(a.csv));var K=!1;if(""==a["-v"]||isString(a.version)&&0<a.version.length)K=!0,I();var q="",D=!1;B=()=>{if(K)q=I();else if(a.jsonprefix=_$(a.jsonprefix,"jsonprefix").isString().default(__),a.jsondesc=toBoolean(_$(a.jsondesc,"jsondesc").default("false")),isDef(a.file)){if(0>a.file.indexOf("::")&&!io.fileExists(a.file)&&
k(-1,"ERROR: File not found: '"+a.file+"'"),!F.has(a.type))if("json"==a.type||isUnDef(a.type))if(a.jsondesc){var b=new Set;io.readStreamJSON(a.file,d=>{d=d.substring(2);isDef(a.jsonprefix)?d.startsWith(a.jsonprefix)&&b.add(d):b.add(d);return!1});q=stringify(Array.from(b),__,"")}else if(isDef(a.jsonprefix)){var c=io.readStreamJSON(a.file,d=>d.substring(2).startsWith(a.jsonprefix));q=stringify(c,__,"")}else q=io.readFileString(a.file);else q=io.readFileString(a.file)}else a.jsondesc&&k(-1,"ERROR: jsondesc only available for file input."),
a.jsonprefix&&k(-1,"ERROR: jsonprefix only available for file input."),isDef(a.cmd)?q=r(a.cmd,!0):isString(a.data)?q=a.data:"pm"!=a.input&&(q=[],io.pipeLn(d=>{isDef(G[a.type])?G[a.type](E(d),clone(H))&&q.push(d):q.push(d);return!1}),q=q.join("\n"));D||(isUnDef(a.type)&&(isDef(a.file)&&(c=a.file.substring(a.file.lastIndexOf(".")),C.has(c)&&(a.type=C.get(c))),isUnDef(a.type)&&(c=q.trim(),c.startsWith("{")||c.startsWith("[")?a.type="json":c.startsWith("(")?a.type="slon":c.startsWith("<")?a.type="xml":
isString(c)&&0<c.length?1<c.substring(0,c.indexOf("\n")).split(",").length?a.type="csv":c.substring(0,0<c.indexOf(": "))&&(a.type="yaml"):k(-1,"Please provide the input type."))),isDef(a.type)&&x.has(a.type)?x.get(a.type)(q,H):(isString(a.type)&&printErr("WARN: "+a.type+" input type not supported. Using json."),x.get("json")(q,H)))};isDef(a["-debug"])&&printErr("DEBUG: "+stringify(a,__,""));if(isNumber(a.loop))for(;;)toBoolean(a.loopcls)&&cls(),B(),sleep(1E3*a.loop,!0);else B()}};oafp(params);
