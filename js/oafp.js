var params=processExpr(" ");
// (author: Nuno Aguiar, version: 20240925, license: Apache 2.0, url: https://github.com/openaf/oafp)
// ---
const _oafphelp={'docs/EXAMPLES.md':af.fromBytes2String(io.gunzip(af.fromBase64("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"))),
'docs/TEMPLATE.md':af.fromBytes2String(io.gunzip(af.fromBase64("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"))),
'docs/USAGE.md':af.fromBytes2String(io.gunzip(af.fromBase64("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"))),
'docs/FILTERS.md':af.fromBytes2String(io.gunzip(af.fromBase64("")))};

const oafp=b=>{if(!isUnDef(b)&&!isDef(b.____ojob)){Object.keys(b).forEach(a=>{if(0<b[a].length){var c=a.toLowerCase();a!=c&&isUnDef(b[c])&&(b[c]=b[a],delete b[a])}});var N=a=>{for(var c=Object.keys(E),d=0;d<c.length;d++){var f=c[d];isDef(b[f])&&(a=E[f](a))}return a},J=(a,c)=>{b.__origr=a;c.__ifrom&&(a=$from(a).query(af.fromNLinq(c.__ifrom.trim())),delete c.__ifrom);if(c.__isql){var d=__;if(isString(b.sqlfilter))switch(b.sqlfilter.toLowerCase()){case "simple":d="nlinq";break;case "advanced":d="h2";
break;default:d=__}if(isArray(a)&&0<a.length)if(isString(b.isqlfiltertables)){var f=$sql();d=v(b.isqlfiltertables);isArray(d)&&(d.forEach(e=>{isUnDef(e.table)&&k(-1,"One 'table' not defined in isqlfiltertables");e.path=_$(e.path,"isqlfiltertables table "+e.table+" path").isString().default("@");var g=$path(a,e.path);isArray(g)&&(f=f.table(e.table,g))}),a=f.closeQuery(c.__isql.trim()))}else a=$sql(a,c.__isql.trim(),d);delete c.__isql}c.__path&&(a=$path(a,c.__path.trim()),delete c.__path);if(isString(a))return N(a);
a=N(a);c.__from&&(a=$from(a).query(af.fromNLinq(c.__from.trim())),delete c.__from);if(c.__sql){d=__;if(isString(b.sqlfilter))switch(b.sqlfilter.toLowerCase()){case "simple":d="nlinq";break;case "advanced":d="h2";break;default:d=__}isArray(a)&&0<a.length&&(isString(b.sqlfiltertables)?(f=$sql(),d=v(b.sqlfiltertables),isArray(d)&&(d.forEach(e=>{isUnDef(e.table)&&k(-1,"One 'table' not defined in sqlfiltertables");e.path=_$(e.path,"sqlfiltertables table "+e.table+" path").isString().default("@");var g=
$path(a,e.path);isArray(g)&&(f=f.table(e.table,g))}),a=f.closeQuery(c.__sql.trim()))):a=$sql(a,c.__sql.trim(),d));delete c.__sql}c.__opath&&(a=$path(a,c.__opath.trim()),delete c.__opath);return a},l=(a,c,d)=>{c=clone(c);toBoolean(b.color)?__conConsole=!0:isDef(b.color)&&(__conAnsi=!1);a=isString(a)?a.trim().startsWith("{")&&a.trim().endsWith("}")?J(jsonParse(a,__,__,!0),c):J(a,c):d?J([a],c)[0]:J(a,c);isDef(b.outputkey)&&(a=$$({}).set(b.outputkey,a));isDef(b.outkey)&&(a=$$({}).set(b.outkey,a));Q();
isUnDef(c.__format)&&(c.__format=getEnvsDef("OAFP_OUTPUT",c.__format,"tree"));G.has(c.__format)?G.get(c.__format)(a,c):q(a,c,__)},C=(a,c)=>{var d=af.fromString2Bytes(""),f=af.newOutputStream();$sh(a).cb((e,g,h)=>{ioStreamCopy(f,e);e=f.toByteArray();0<e.length&&(d=e)}).get();return c?af.fromBytes2String(d):d},v=a=>{if(!isString(a)||""==a||isNull(a))return"";a=a.trim();return isDef(af.fromJSSLON)?af.fromJSSLON(a):a.startsWith("{")?jsonParse(a,__,__,!0):af.fromSLON(a)},K=(a,c,d,f)=>{d=_$(d).isString().default("_oafp_fn_");
c=splitBySepWithEnc(c," ",[['"','"'],["'","'"]]);let e=[];$ch("__oaf::chart").create();if(1<c.length){for(let g=0;g<c.length;g++)if(0==g)e.push(c[g]);else{let h=splitBySepWithEnc(c[g],":",[['"','"'],["'","'"]]).map((m,n)=>{if(0==n){if(m.startsWith("-"))return m;global[d+g]=()=>{if(isString(f)){var r=$ch("__oaf::chart").get({name:f});r=isUnDef(r)?[]:r.data;var w=$path(a,m);if(isArray(w))return w.forEach((A,y)=>{isArray(r[y])?r[y].push(A):r[y]=[A]}),w=r.pop(),$ch("__oaf::chart").set({name:f},{name:f,
data:r}),w[0]}else return $path(a,m)};return d+g}return m}).join(":");e.push(h)}return e.join(" ")}return""},p=a=>{"undefined"!==typeof a&&("undefined"===typeof b.outfile?(toBoolean(b.loopcls)&&cls(),print(a)):("undefined"===typeof global.__oafp_streams&&(global.__oafp_streams={}),"undefined"!==typeof global.__oafp_streams[b.outfile]&&ioStreamWrite(global.__oafp_streams[b.outfile].s,a+(toBoolean(b.outfileappend)?"\n":""))))},q=(a,c,d)=>{"undefined"!==typeof a&&(a=$o(a,c,d,!0),isDef(a)&&p(a))},t=a=>
{"grid"==b.out||b.__inception||toBoolean(b.loopcls)||toBoolean(b.chartcls)||printErrnl(_$(a).default("(processing data...)"))},Q=a=>{"grid"==b.out||b.__inception||toBoolean(b.loopcls)||toBoolean(b.chartcls)||printErrnl("\r"+" ".repeat(_$(a).default("(processing data...)").length)+"\r")},k=(a,c)=>{isUnDef(c)&&(c="exit: "+a);if(isUnDef(ow.oJob)&&!toBoolean(b.noexit))0!=a&&printErr(c),exit(a);else throw c;},x=()=>{__initializeCon();b.help=_$(b.help,"help").isString().default("");switch(b.help.toLowerCase()){case "filters":var a=
"docs/FILTERS.md";break;case "template":a="docs/TEMPLATE.md";break;case "examples":a="docs/EXAMPLES.md";break;case "readme":case "usage":a="docs/USAGE.md";break;default:a=b.help.toLowerCase(),a=isDef(D[a])?"docs/"+a+".md":"docs/USAGE.md"}var c=(getOPackPath("oafproc")||".")+"/"+a;let d="";if("docs/USAGE.md"==a&&0<Object.keys(D).length){d="\n---\n\n## \ud83d\udcda Libs help documents\n\n| Lib | Help |\n| --- | --- |\n";for(let f in D)d+="| "+f+" | help="+f+" |\n"}isDef(c)&&io.fileExists(c)?(__conConsole=
__ansiColorFlag=!0,isDef(ow.format.string.pauseString)&&toBoolean(b.pause)?ow.format.string.pauseString(ow.format.withMD(io.readFileString(c)+d)):p(isDef(b.out)&&"raw"==b.out?io.readFileString(c)+d:ow.format.withMD(io.readFileString(c)+d))):isDef(global._oafphelp)&&isDef(global._oafphelp[a])?(__conConsole=__ansiColorFlag=!0,isDef(ow.format.string.pauseString)&&toBoolean(b.pause)?ow.format.string.pauseString(ow.format.withMD(global._oafphelp[a]+d)):p(isDef(b.out)&&"raw"==b.out?global._oafphelp[a]+
d:ow.format.withMD(global._oafphelp[a]+d))):isString(D[b.help])?(__conConsole=__ansiColorFlag=!0,isDef(ow.format.string.pauseString)&&toBoolean(b.pause)?ow.format.string.pauseString(ow.format.withMD(D[b.help])):p(isDef(b.out)&&"raw"==b.out?D[b.help]:ow.format.withMD(D[b.help]))):p("Check https://github.com/OpenAF/oafp/blob/master/src/"+a);k(0)},R=()=>{var a=(getOPackPath("oafproc")||".")+"/.package.yaml";a={oafp:{version:io.fileExists(a)?io.readFileYAML(a).version:"(not available/embedded)",inputs:Array.from(F.keys()).filter(c=>
"?"!=c).sort(),transforms:Object.keys(E).filter(c=>"transforms"!=c).sort(),outputs:Array.from(G.keys()).filter(c=>"?"!=c).sort(),flags:__flags.OAFP},openaf:{version:getVersion(),distribution:getDistribution(),home:getOpenAFPath(),opacks:$from($m4a(getOPackLocalDB())).notEquals("name","OpenAF").sort("name").select({name:"",version:""})},java:{version:ow.format.getJavaVersion(),home:ow.format.getJavaHome(),vendor:String(java.lang.System.getProperty("java.vendor")),params:af.fromJavaArray(java.lang.management.ManagementFactory.getRuntimeMXBean().getInputArguments())},
os:{name:String(java.lang.System.getProperty("os.name")),version:String(java.lang.System.getProperty("os.version")),arch:ow.format.getOSArch(),cpuCores:getNumberOfCores(!0),mem:{max:Number(java.lang.Runtime.getRuntime().maxMemory()),total:Number(java.lang.Runtime.getRuntime().totalMemory())},store:{tmpDirPath:String(java.lang.System.getProperty("java.io.tmpdir")),freeTmpDirBytes:Number(java.nio.file.Files.getFileStore(java.nio.file.Paths.get(java.lang.System.getProperty("java.io.tmpdir"))).getUsableSpace())}}};
return stringify(a,__,"")};ow.loadFormat();b.format=b.output||b.format||b.out;b.type=b.input||b.type||b.in;b.out=b.format;b.output=b.format;b.in=b.type;b.input=b.type;if(isUnDef(b.file)&&isUnDef(b.cmd)){var H=__;for(let a in b)if(""===b[a]&&"-debug"!=a&&"-v"!=a&&"-examples"!=a){H=a;break}b.file=H}"[object Object]"==Object.prototype.toString.call(b.data)&&(b.data=stringify(b.data,__,""));var L=new Map([[".json","json"],[".ndjson","ndjson"],[".slon","slon"],[".yaml","yaml"],[".xml","xml"],[".csv","csv"],
[".ini","ini"],[".md","md"],[".xls","xls"],[".xlsx","xls"],[".sql","sql"],[".toml","toml"],[".jwt","jwt"]]),O=new Set(["csv","ndjson"]),P={lines:(a,c)=>{isBoolean(b.linesjoin)||(b.linesjoin=toBoolean(_$(b.linesjoin,"linesjoin").isString().default(__)));if(!b.linesjoin&&isString(a))0!=a.trim().length&&(0<a.trim().length&&(a=a.trim().split(/\r?\n/)),l(a,c,!0)),M=!0;else return!0},ndjson:(a,c)=>{isBoolean(b.ndjsonjoin)||(b.ndjsonjoin=toBoolean(_$(b.ndjsonjoin,"ndjsonjoin").isString().default(__)));if(b.ndjsonjoin)return!0;
isUnDef(global.__ndjsonbuf)&&0!=a.length&&a.trim().startsWith("{")&&(global.__ndjsonbuf="");if(isDef(global.__ndjsonbuf)){if(0!=a.length&&!a.trim().endsWith("}")){global.__ndjsonbuf+=a.trim();return}0<global.__ndjsonbuf.length&&(a=global.__ndjsonbuf+a,global.__ndjsonbuf=__)}0==a.length||0<a.length&&"{"!=a.trim().substring(0,1)?(l(jsonParse(global.__ndjsonbuf,__,__,!0),c,!0),M=!0,global.__ndjsonbuf=__):(l(jsonParse(a,__,__,!0),c,!0),M=!0)}},E={transforms:a=>{if(toBoolean(b.transforms))return Object.keys(E).filter(c=>
"transforms"!=c).sort()},cmlt:a=>{if(toBoolean(b.cmlt)){a=isArray(a)?a:[a];b.cmltch=_$(b.cmltch,"cmltch").default("(type: simple)");var c=v(b.cmltch);if(isMap(c))return isUnDef(c.type)&&k(-1,"cmltch.type is not defined."),isDef(c.lib)&&loadLib(c.lib),0>$ch().list().indexOf("oafp::cmltdata")&&("remote"==c.type?$ch("oafp::cmltdata").createRemote(c.url):$ch("oafp::cmltdata").create(c.type,c.options),c=Number(_$(b.cmltsize,"cmltsize").isNumber().default(100))-1,0<c&&$ch("oafp::cmltdata").subscribe(ow.ch.utils.getHousekeepSubscriber("oafp::cmltdata",
c))),a.forEach(d=>$ch("oafp::cmltdata").set({t:nowNano()},d)),$ch("oafp::cmltdata").getAll();k(-1,"Invalid cmltch parameter")}},diff:a=>{var c=v(b.diff);if(isMap(c)){isDef(c.filea)&&isDef(c.fileb)||isDef(c.a)&&isDef(c.b)||k(-1,"diff.a path and diff.b path are required.");loadDiff();let d=$path(a,c.a);a=$path(a,c.b);let f=__;toBoolean(b.color)&&(isUnDef(b.difftheme)&&isDef(getEnv("OAFP_DIFFTHEME"))&&(b.difftheme=getEnv("OAFP_DIFFTHEME")),f=v(_$(b.difftheme,"difftheme").isString().default("")),f=merge({added:"GREEN",
removed:"RED",common:"FAINT",linenum:"ITALIC",linediv:"FAINT",linesep:"|"},f));let e=(g,h)=>{if(toBoolean(b.color)){isUnDef(h)&&(h="");var m=new Set;if(isArray(g)){let n=1,r=toBoolean(b.diffnlines),w=0;r&&(g.forEach(y=>{w+=y.value.split("\n").length}),w=String(w).length+1);let A=y=>{let z;z=r&&""!=h?ansiColor(f.linenum,0<y?$ft("% "+w+"d",n):" ".repeat(w))+ansiColor(f.linediv,`${f.linesep}`):"";n+=y;return z};g.forEach((y,z)=>{z=y.value;isString(z)&&(""!=h?(z=z.split(h),""==z[z.length-1]&&z.pop()):
z=[z]);m.add(y.added?z.map(I=>A(1)+ansiColor(f.added,(""!=h?"+":"")+I)).join(ansiColor("RESET",h)):y.removed?z.map(I=>A(0)+ansiColor(f.removed,(""!=h?"-":"")+I)).join(ansiColor("RESET",h)):z.map(I=>A(1)+ansiColor(f.common,(""!=h?" ":"")+I)).join(ansiColor("RESET",h)))})}return Array.from(m).join(ansiColor("RESET",h))}return $from(g).select({count:__,added:!1,removed:!1,value:[]})};return isString(d)&&isString(a)?toBoolean(b.diffwords)?e(JsDiff.diffWords(d,a,c.options)):toBoolean(b.diffwordswithspace)?
e(JsDiff.diffWordsWithSpace(d,a,c.options)):toBoolean(b.difflines)?e(JsDiff.diffLines(d,a,c.options),"\n"):toBoolean(b.diffsentences)?e(JsDiff.diffSentences(d,a,c.options),"\n"):e(JsDiff.diffChars(d,a,c.options)):isArray(d)&&isArray(a)&&!toBoolean(b.color)?e(JsDiff.diffArrays(d,a,c.options)):e(JsDiff.diffJson(d,a,c.options),"\n")}},jsonschemagen:a=>{if(toBoolean(b.jsonschemagen))return ow.loadObj(),ow.obj.schemaGenerator(a)},jsonschemacmd:a=>E.jsonschema(a),jsonschema:a=>{isMap(a)||k(-1,"jsonschema is only supported with a map.");
isUnDef(b.jsonschema)&&isUnDef(b.jsonschemacmd)&&k(-1,"You need to provide a jsonschema=someFile.json or jsonschemacmd=someCommand");ow.loadObj();var c;if(isDef(b.jsonschemacmd)){var d=$sh(b.jsonschemacmd).getJson(0);0==d.exitcode?c=d.stdout:k(-1,"Error executing the command '"+b.jsonschemacmd+"': "+d.stderr)}else c=io.readFileJSON(b.jsonschema);isMap(c)||k(-1,"The schema provided is not a valid JSON schema.");ow.obj.schemaInit({allErrors:!0});c=ow.obj.schemaCompile(c);return{valid:c(a),errors:c.errors}},
sortmapkeys:a=>{if(toBoolean(b.sortmapkeys)&&isObject(a)){let c=(d,f)=>{let e=Object.keys(d).sort(),g={};for(let h=0;h<e.length;h++){let m=e[h],n=d[m];Array.isArray(n)?g[m]=n.map(r=>"object"===typeof r&&null!==r&&void 0!==r?sortMapKeys(r,f):r):g[m]=f&&"object"===typeof n&&null!==n&&void 0!==n?c(n,f):n}return g};return c(a,!0)}return a},searchkeys:a=>isObject(a)?searchKeys(a,b.searchkeys):a,searchvalues:a=>isObject(a)?searchValues(a,b.searchvalues):a,maptoarray:a=>toBoolean(b.maptoarray)&&isMap(a)?
$m4a(a,b.maptoarraykey):a,arraytomap:a=>toBoolean(b.arraytomap)&&isArray(a)?$a4m(a,b.arraytomapkey,toBoolean(b.arraytomapkeepkey)):a,flatmap:a=>toBoolean(b.flatmap)&&isObject(a)?ow.loadObj().flatMap(a,b.flatmapsep):a,merge:a=>{if(toBoolean(b.merge)&&isArray(a)&&1<a.length){for(var c,d=0;d<a.length;d++)c=0==d?a[d]:merge(c,a[d]);return c}return a},correcttypes:a=>{toBoolean(b.correcttypes)&&isObject(a)&&traverse(a,(c,d,f,e)=>{switch(descType(d)){case "number":isString(d)&&(e[c]=Number(d));break;case "string":"true"==
d.trim().toLowerCase()||"false"==d.trim().toLowerCase()?e[c]=toBoolean(d):d.trim().match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$/)?e[c]=new Date(d):d.trim().match(/^\d{4}-\d{2}-\d{2}$/)?e[c]=new Date(d):d.trim().match(/^\d{2}:\d{2}:\d{2}$/)?e[c]=new Date(d):d.trim().match(/^\d{2}:\d{2}$/)&&(e[c]=new Date(d))}});return a},removenulls:a=>{toBoolean(b.removenulls)&&traverse(a,(c,d,f,e)=>{(isNull(d)||isUnDef(d))&&delete e[c]});return a},trim:a=>{toBoolean(b.trim)&&traverse(a,(c,d,f,e)=>{isString(d)&&
(e[c]=d.trim())});return a},removedups:a=>{if(toBoolean(b.removedups)){if(isArray(a)){var c=new Set,d=[];a.forEach(f=>{var e=f;isObject(f)&&(e=sortMapKeys(e));e=stringify(e,__,!0);c.has(e)||(c.add(e),d.push(f))});return d}k(-1,"removedups is only supported for arrays")}return a},llmprompt:a=>{if(isString(b.llmprompt)){b.llmenv=_$(b.llmenv,"llmenv").isString().default("OAFP_MODEL");b.llmoptions=_$(b.llmoptions,"llmoptions").isString().default(__);var c=$llm(isDef(b.llmoptions)?b.llmoptions:$sec("system",
"envs").get(b.llmenv));isDef(b.llmconversation)&&io.fileExists(b.llmconversation)&&c.getGPT().setConversation(io.readFileJSON(b.llmconversation));var d="json",f=!0;isString(b.input)&&("md"==b.input&&(d="markdown",f=!1),"mdtable"==b.input&&(d="markdown table",f=!1),"hsperf"==b.input&&(d="java hsperf file"),"raw"==b.input&&(d="raw",f=!1));c=c.withContext(f?stringify(a,__,!0):a,isDef(b.llmcontext)?b.llmcontext:`${d} input data`);if(isString(b.output)&&("md"==b.output||"mdtable"==b.output||"raw"==b.output))return a=
c.prompt(b.llmprompt),isDef(b.llmconversation)&&io.writeFileJSON(b.llmconversation,c.getGPT().getConversation(),""),a;a=c.promptJSON(b.llmprompt);isDef(b.llmconversation)&&io.writeFileJSON(b.llmconversation,c.getGPT().getConversation(),"");return a}return a},splitlines:a=>toBoolean(b.splitlines)&&isString(a)?a.split(/\r?\n/):a,regression:a=>{if(isString(b.regression)){ow.loadAI();var c=ow.ai.regression(),d=_$(b.regressionpath,"regressionpath").isString().default("@");let f=v(_$(b.regressionoptions,
"regressionoptions").isString().default("{order:2,precision:5}"));d=$path(a,d);if(isArray(d)){if(isString(b.regressionx)){let g=$path(a,b.regressionx);d=d.map((h,m)=>[g[m],h])}else d=d.map((g,h)=>[h+1,g]);let e;switch(b.regression){case "exp":e=c.exponential(d,f);break;case "poly":e=c.polynomial(d,f);break;case "power":e=c.power(d,f);break;case "log":e=c.logarithmic(d,f);break;default:e=c.linear(d,f)}return isDef(e)&&isDef(e.points)?(isString(b.regressionforecast)&&(a=$path(a,b.regressionforecast),
isArray(a)?a.forEach(g=>{e.points.push(e.predict(g))}):k(-1,"Invalid array of x for regression forecast")),e.points.map(g=>({x:g[0],y:g[1]}))):e}k(-1,"Invalid data for regression analysis")}return a},normalize:a=>{if(isString(b.normalize)){var c=v(b.normalize);if(isMap(c)){ow.loadAI();if(isMap(a))return ow.ai.normalize.withSchema(a,c,!0);if(isArray(a))return a.map(d=>ow.ai.normalize.withSchema(d,c,!0))}else k(-1,"Invalid normalize schema")}else k(-1,"Invalid normalize schema")},denormalize:a=>{if(isString(b.denormalize)){var c=
v(b.denormalize);if(isMap(c)){ow.loadAI();isUnDef(ow.ai.normalize.denormalizeWithSchema)&&k(-1,"This version of OpenAF does not support denormalizeWithSchema");if(isMap(a))return ow.ai.normalize.denormalizeWithSchema(a,c,!1);if(isArray(a))return a.map(d=>ow.ai.normalize.denormalizeWithSchema(d,c,!1))}else k(-1,"Invalid denormalize schema")}else k(-1,"Invalid denormalize schema")},kmeans:a=>{isNumber(b.kmeans)||(b.kmeans=5);isArray(a)||k(-1,"For kmeans transform you need to provide an array as input");
ow.loadAI();return ow.ai.cluster({type:"kmeans",numberOfClusters:Number(b.kmeans)}).classify(a)},getlist:a=>{if(isObject(a)&&(toBoolean(b.getlist)||isNumber(b.getlist))){var c=!1,d,f=isNumber(b.getlist)?b.getlist:1;traverse(a,(e,g,h,m)=>{!c&&isArray(g)&&(f--,0==f&&(c=!0),d=g)});return c?d:a}}},G=new Map([["?",(a,c)=>{a=Array.from(G.keys()).filter(d=>"?"!=d).sort();q(a,c)}],["pm",(a,c)=>{q(a,c)}],["key",(a,c)=>{q(a,c)}],["html",(a,c)=>{let d;c=!1;b.htmlopen=toBoolean(_$(b.htmlopen,"htmlopen").isString().default("true"));
b.htmlwait=_$(b.htmlwait,"htmlwait").isNumber().default(2500);b.htmlopen&&(d=io.createTempFile("oafp_",".html"));ow.loadTemplate();isString(a)?(a=ow.template.html.genStaticVersion(ow.template.parseMD2HTML(a,!toBoolean(b.htmlpart),!toBoolean(b.htmlcompact))),a=a.replace("<html>",'<html><meta charset="utf-8">')):(a=ow.template.html.parseMap(a,!0),a='<html><meta charset="utf-8"><style>'+a.css+"</style><body>"+a.out+"</body></html>");b.htmlopen&&(io.writeFileString(d,a),c=openInBrowser("file:///"+d.replace(/\\/g,
"/")));c?sleep(b.htmlwait,!0):p(a)}],["ctable",(a,c)=>{q(a,c)}],["stable",(a,c)=>{q(a,c)}],["table",(a,c)=>{q(a,c)}],["json",(a,c)=>{q(a,c)}],["yaml",(a,c)=>{q(a,c)}],["cyaml",(a,c)=>{q(a,c)}],["cjson",(a,c)=>{q(a,c)}],["slon",(a,c)=>{q(a,c)}],["cslon",(a,c)=>{q(a,c)}],["ctree",(a,c)=>{q(a,c)}],["tree",(a,c)=>{q(a,c)}],["res",(a,c)=>{q(a,c)}],["key",(a,c)=>{q(a,c)}],["text",(a,c)=>{q(a,c)}],["csv",(a,c)=>{q(a,c)}],["map",(a,c)=>{q(a,c)}],["md",(a,c)=>{q(toBoolean(b.mdtemplate)?$t(a):a,c)}],["log",
(a,c)=>{if(isString(a)&&toBoolean(b.logprintall))p(a.replace(/\n$/,""));else if(c=a,isMap(a)&&(c=[a]),isArray(c)){isUnDef(b.logtheme)&&isDef(getEnv("OAFP_LOGTHEME"))&&(b.logtheme=getEnv("OAFP_LOGTHEME"));let d=v(_$(b.logtheme,"logtheme").isString().default(""));d=merge({errorLevel:"RED,BOLD",warnLevel:"YELLOW",timestamp:"BOLD"},d);c.forEach(f=>{if(isMap(f)){let e=isDef(f["@timestamp"])?f["@timestamp"]:__,g=isDef(f.level)?f.level:__;f=isDef(f.message)?f.message:__;let h;isDef(g)&&(0<=g.toLowerCase().indexOf("err")&&
(h=d.errorLevel),0<=g.toLowerCase().indexOf("warn")&&(h=d.warnLevel));isDef(e)&&24<e.length&&(e=e.substring(0,23)+"Z");(isDef(f)||isDef(e))&&p(ansiColor(d.timestamp,e)+(isDef(g)?" | "+ansiColor(h,g):"")+" | "+ansiColor(h,f))}})}}],["raw",(a,c)=>{isString(a)?p(a):p(stringify(a))}],["lines",(a,c)=>{isArray(a)?a.forEach(d=>p(d)):p(a)}],["ini",(a,c)=>{isString(a)||(ow.loadJava(),c=new ow.java.ini,p(c.put(a).save()))}],["toml",(a,c)=>{isUnDef(af.toTOML)&&k(-1,"TOML support not found.");if(isMap(a))p(af.toTOML(a));
else if(isArray(a))p(af.toTOML({list:a}));else return __}],["mdyaml",(a,c)=>{isArray(a)?a.forEach((d,f)=>{q(d,merge(c,{__format:"yaml"}));f<a.length-1&&p("---\n")}):q(a,merge(c,{__format:"yaml"}))}],["mdtable",(a,c)=>{isArray(a)&&(ow.loadTemplate(),p(ow.template.md.table(a)))}],["template",(a,c)=>{isString(a)||(ow.loadTemplate(),ow.template.addConditionalHelpers(),ow.template.addOpenAFHelpers(),ow.template.addFormatHelpers(),isUnDef(b.template)&&isUnDef(b.templatepath)&&k(-1,"For out=template you need to provide a template=someFile.hbs or templatepath=..."),
b.templatedata=_$(b.templatedata,"templatedata").isString().default("@"),c=isDef(b.template)?toBoolean(b.templatetmpl)?b.template:io.readFileString(b.template):$path(b.__origr,b.templatepath),p($t(c,$path(a,b.templatedata))))}],["openmetrics",(a,c)=>{isString(a)?k(-1,"For out=openmetrics input needs to be an array or map."):(ow.loadMetrics(),a=ow.metrics.fromObj2OpenMetrics(a,b.metricsprefix,b.metricstimestamp),a=a.split("\n").map(d=>{0<=d.indexOf('{_id="')&&(d=d.replace(/{_id="\d+",/,"{"));0<=d.indexOf(',_id="')&&
(d=d.replace(/,_id="\d+"}/,"}"));0<=d.indexOf('_id="')&&(d=d.replace(/,_id="\d+",/,","));return d}).join("\n"),p(a))}],["pjson",(a,c)=>{c.__format="prettyjson";q(a,c)}],["ndjson",(a,c)=>{isArray(a)?a.forEach(d=>p(stringify(d,__,""))):isMap(a)?p(stringify(a,__,"")):q(a,c)}],["base64",(a,c)=>{a=isString(a)?a:stringify(a);toBoolean(b.base64gzip)?p(af.fromBytes2String(af.toBase64Bytes(io.gzip(af.fromString2Bytes(a))))):p(af.fromBytes2String(af.toBase64Bytes(a)))}],["gb64json",(a,c)=>{a=isString(a)?a:
stringify(a);p(af.fromBytes2String(af.toBase64Bytes(io.gzip(af.fromString2Bytes(a)))))}],["jwt",(a,c)=>{isMap(a)?(isUnDef(b.jwtsecret)&&isUnDef(b.jwtprivkey)&&k(-1,"For out=jwt you need to provide a jwtsecret or a jwtprivkey"),ow.loadServer(),isDef(b.jwtprivkey)?(ow.loadJava(),c=new ow.java.cipher,p(ow.server.jwt.sign(c.readKey4File(b.jwtprivkey,!0,b.jwtalg),a))):p(ow.server.jwt.sign(b.jwtsecret,a))):k(-1,"For out=jwt input needs to be a map.")}],["grid",(a,c)=>{isUnDef(b.grid)&&k(-1,"For out=grid you need to provide a grid=...");
c=v(_$(b.grid,"grid").isString().$_());isArray(c)&&0<c.length&&isArray(c[0])?(c.forEach((d,f)=>{d.forEach((e,g)=>{if(isUnDef(e.type)||"empty"!=e.type){if(isDef(e.cmd)){var h=$sh(e.cmd).getJson(0);h=isDef(h)&&isDef(h.stdout)?h.stdout:""}else h=a;if("chart"==e.type||"bar"==e.type)g="_chrt"+(f+1)+"."+(g+1),e.obj=("chart"==e.type?g+" ":"")+K(h,e.obj,g),isUnDef(e.title)&&(e.title="Chart "+g);isDef(e.path)?(e.obj=$path(h,e.path),isUnDef(e.title)&&(e.title=e.path)):isString(h)?e.obj=h:isObject(h)&&"chart"!=
e.type&&(e.obj=$path(h,"@"))}else e.obj=""})}),c=ow.format.string.grid(c,__,__," ",!0),p(c)):k(-1,"Invalid grid parameter: '"+stringify(b.grid,__,"")+"'")}],["envs",(a,c)=>{a=isArray(a)?a.map(e=>isObject(e)?ow.loadObj().flatMap(e,"_"):e):ow.loadObj().flatMap(a,"_");c=e=>0<=String(e).indexOf(" ")?'"'+e+'"':e;isUnDef(b.envscmd)&&(b.envscmd=ow.format.isWindows()?"set":"export");b.envscmd=String(b.envscmd);isUnDef(b.envsprefix)&&(b.envsprefix="_OAFP_");b.envsprefix=String(b.envsprefix);var d=new Set,
f;for(f in a)d.add(b.envscmd+(0<b.envscmd.length?" ":"")+(b.envsprefix+f.replace(/[^a-zA-Z0-9_]/g,"_"))+"="+c(a[f]));p(Array.from(d).join("\n"))}],["cmd",(a,c)=>{isString(b.outcmd)||k(-1,'For out=cmd you need to provide a outcmd="..."');toBoolean(b.outcmdtmpl)&&(ow.loadTemplate(),ow.template.addConditionalHelpers(),ow.template.addOpenAFHelpers(),ow.template.addFormatHelpers());let d=f=>{var e=isString(f)?f:stringify(f,__,"");if(toBoolean(b.outcmdparam))try{var g=$sh(b.outcmd.replace(/([^\\]?){}/g,
"$1"+e)).get(0)}catch(h){sprintErr(h)}else g=toBoolean(b.outcmdtmpl)?$sh($t(b.outcmd,f)).get(0):$sh(b.outcmd,e).get(0);toBoolean(b.outcmdnl)?(0<g.stdout.length&&print(g.stdout),0<g.stderr.length&&printErr(g.stderr)):(0<g.stdout.length&&printnl(g.stdout),0<g.stderr.length&&printErrnl(g.stderr))};isArray(a)?toBoolean(b.outcmdjoin)?d(a):toBoolean(b.outcmdseq)?a.forEach(d):isDef(pForEach)?pForEach(a,f=>{d(f)}):parallel4Array(a,f=>{d(f)}):(isString(a),d(a))}],["chart",(a,c)=>{isUnDef(b.chart)&&k(-1,'For out=chart you need to provide a chart="<units> [<path[:color][:legend]>...]"');
isUnDef(splitBySepWithEnc)&&k(-1,"output=chart is not supported in this version of OpenAF");a=K(a,b.chart);0<a.length&&(a=printChart("oafp "+a),toBoolean(b.chartcls)&&cls(),p(a))}],["schart",(a,c)=>{isUnDef(b.schart)&&k(-1,'For out=schart you need to provide a schart="<units> [<path[:color][:legend]>...]"');isUnDef(splitBySepWithEnc)&&k(-1,"Output=schart is not supported in this version of OpenAF");a=K(a,b.schart,"_oafp_sfn_","soafp");0<a.length&&p(printChart("soafp "+a))}],["ch",(a,c)=>{isUnDef(b.ch)&&
k(-1,'For out=ch you need to provide a ch="(type: ...)"');isUnDef(b.chkey)&&k(-1,'For out=ch you need to provide a chkey="key1, key2"');a=isMap(a)?[a]:a;b.ch=v(b.ch);isMap(b.ch)?(isUnDef(b.ch.type)&&k(-1,"ch.type is not defined."),isDef(b.ch.lib)&&loadLib(b.ch.lib),"remote"==b.ch.type?$ch("oafp::outdata").createRemote(b.ch.url):$ch("oafp::outdata").create(b.ch.type,b.ch.options),toBoolean(b.chunset)?$ch("oafp::outdata").unsetAll(b.chkey.split(",").map(d=>d.trim()),a):$ch("oafp::outdata").setAll(b.chkey.split(",").map(d=>
d.trim()),a),$ch("oafp::outdata").destroy()):k(-1,"Invalid ch parameter")}],["db",(a,c)=>{(!isArray(a)||1>a.length)&&k(-1,"db is only supported for filled arrays/lists");b.dbtable=_$(b.dbtable,"outdbtable").isString().default("data");b.dbnocreate=toBoolean(_$(b.dbnocreate,"outdbnocreate").isString().default("false"));b.dbicase=toBoolean(_$(b.dbicase,"outdbicase").isString().default("false"));b.dbbatchsize=_$(b.dbbatchsize,"dbbatchsize").isNumber().default(__);ow.loadObj();try{isString(b.dbjdbc)||
k(-1,"dbjdbc URL is not defined.");isDef(b.dblib)&&loadLib("jdbc-"+b.dblib+".js");var d=new DB(b.dbjdbc,b.dbuser,b.dbpass,b.dbtimeout);if(!b.dbnocreate)try{var f=ow.obj.fromObj2DBTableCreate(b.dbtable,a,__,!b.dbicase);d.u(f);d.commit()}catch(n){d.rollback(),k(-1,"Error creating table: "+n)}var e=Object.keys(ow.obj.flatMap(a[0]));var g=b.dbicase?e.join(",").toUpperCase():'"'+e.join('", "')+'"';let m="";var h=a.map(n=>{var r=ow.obj.flatMap(n);n=[];for(var w in e)n.push(r[e[w]]);w=e.map(A=>String(r[A]));
n="INSERT INTO "+(b.dbicase?b.dbtable:'"'+b.dbtable+'"')+" ("+g+") VALUES ("+w.map(A=>"?").join(", ")+")";n.length>m.length&&(m=String(n));return w});d.usArray(m,h,b.dbbatchsize)}catch(m){isDef(d)&&d.rollback(),printErr(m),k(-1,"Error connecting to the database: "+m)}finally{isDef(d)&&(d.commit(),d.close())}}],["sql",(a,c)=>{(!isArray(a)||1>a.length)&&k(-1,"sql is only supported for filled arrays/lists");b.sqltable=_$(b.sqltable,"sqltable").isString().default("data");b.sqlicase=toBoolean(_$(b.sqlicase,
"sqlicase").isString().default("false"));b.sqlnocreate=toBoolean(_$(b.sqlnocreate,"sqlnocreate").isString().default("false"));ow.loadObj();b.sqlnocreate||p(ow.obj.fromObj2DBTableCreate(b.sqltable,a,__,!b.sqlicase)+";\n");var d=Object.keys(ow.obj.flatMap(a[0]));var f=b.sqlicase?d.join(",").toUpperCase():'"'+d.join('", "')+'"';p(a.map(e=>{var g=ow.obj.flatMap(e);e=[];for(var h in d)e.push(g[d[h]]);h=d.map(m=>{m=g[m];isString(m)&&(m="'"+m.replace(/'/g,"''")+"'");isNull(m)&&(m="null");return m});return"INSERT INTO "+
(b.sqlicase?b.sqltable:'"'+b.sqltable+'"')+" ("+f+") VALUES ("+h.join(",")+");"}).join("\n"))}],["xml",(a,c)=>{q(a,c)}],["pxml",(a,c)=>{a=af.fromObj2XML(a,!0);p('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n'+new XMLList(a))}],["xls",(a,c)=>{if(!isString(a)){try{includeOPack("plugin-XLS")}catch(g){k(-1,"plugin-XLS not found. You need to install it to use the XLS output (opack install plugin-XLS)")}plugin("XLS");if(isMap(a)){ow.loadObj();var d=ow.obj.flatMap(a);var f=Object.keys(d).map(g=>
({key:g,value:d[g]}))}isArray(a)&&(f=a);traverse(f,(g,h,m,n)=>{isString(h)&&h.startsWith("=")&&(n[g]="'"+h)});a=!1;c=b.xlsfile;isUnDef(b.xlsfile)&&(a=!0,b.xlsfile=io.createTempFile("oafp",".xlsx"));c=new XLS(isDef(c)&&io.fileExists(c)?c:__);var e=c.getSheet(_$(b.xlssheet,"xlssheet").isString().default("data"));b.xlsformat=_$(b.xlsformat,"xlsformat").isString().default('(bold: true, borderBottom: "medium", borderBottomColor: "red")');b.xlsformat=v(b.xlsformat);ow.format.xls.setTable(c,e,"A",1,f,__,
b.xlsformat);c.writeFile(b.xlsfile);c.close();b.xlsopenwait=_$(b.xlsopenwait,"xlsopenwait").isNumber().default(5E3);b.xlsopen=toBoolean(_$(b.xlsopen,"xlsopen").isString().default("true"));b.xlsopen&&(ow.format.isWindows()?($sh("start "+b.xlsfile).exec(),a&&sleep(b.xlsopenwait,!0)):ow.format.getOS().startsWith("Mac")&&($sh("open "+b.xlsfile).exec(),a&&sleep(b.xlsopenwait,!0)))}}]]),F=new Map([["?",(a,c)=>{a=Array.from(F.keys()).filter(d=>"?"!=d).sort();l(a,c)}],["pm",(a,c)=>{t();isDef(__pm._map)&&
(a=__pm._map);isDef(__pm._list)&&(a=__pm._list);l(a,c)}],["key",(a,c)=>{t();isString(a)||k(-1,"key is only supported with a string.");l($get(a),c)}],["jsonschema",(a,c)=>{t();a=jsonParse(a,__,__,!0);isMap(a)||k(-1,"jsonschema is only supported with a map.");ow.loadObj();a=ow.obj.schemaSampleGenerator(a);l(a,c)}],["yaml",(a,c)=>{t();a=af.fromYAML(a);l(a,c)}],["xml",(a,c)=>{t();b.xmlignored=_$(b.xmlignored,"xmlignored").isString().default(__);b.xmlprefix=_$(b.xmlprefix,"xmlprefix").isString().default(__);
b.xmlfiltertag=toBoolean(_$(b.xmlfiltertag,"xmlfiltertag").isString().default(__));0<=a.indexOf("<?xml")&&(a=a.substring(a.indexOf("?>")+2).trim());0<=a.indexOf("<!DOCTYPE")&&(a=a.substring(a.indexOf(">")+1).trim());a=af.fromXML2Obj(a,b.xmlignored,b.xmlprefix,!b.xmlfiltertag);l(a,c)}],["lines",(a,c)=>{isBoolean(b.linesjoin)||(b.linesjoin=toBoolean(_$(b.linesjoin,"linesjoin").isString().default(__)));t();let d=__,f=[],e=h=>{h=h.split("\n").map(n=>{let r="",w=0;for(let A=0;A<n.length;A++)if("\t"===
n[A]){let y=8-w%8;r+=" ".repeat(y);w+=y}else r+=n[A],w++;return r}).join("\n");if(isUnDef(d))return d=[],lastPos=0,isUnDef(b.linesvisualsepre)&&(b.linesvisualsepre=" \\s+"),h.split(new RegExp(b.linesvisualsepre)).forEach(n=>{0!=n.trim().length&&(d.push(n),n=h.substring(lastPos).match(new RegExp(ow.format.escapeRE(n)+"("+b.linesvisualsepre+"|$)")),!isNull(n)&&isDef(n.index)?(f.push(lastPos+n.index),lastPos=n.index):k(-1,"Problem with linesvisual to find header positioning."))}),__;var m={};f.forEach((n,
r)=>{m[d[r]]=h.substring(n,r+1<f.length?f[r+1]-1:__).trim()});return m};if(b.linesjoin)if(isDef(b.file)&&isUnDef(b.cmd)&&(a=io.readFileString(b.file)),isDef(b.cmd)&&(a=C(b.cmd,!0)),a=a.split(/\r?\n/),toBoolean(b.linesvisual)){var g=[];a.forEach(h=>{0!=h.length&&(h=e(h),isDef(h)&&g.push(h))});l(g,c)}else l(a,c);else a=isDef(b.file)&&isUnDef(b.cmd)?io.readFileStream(b.file):isDef(b.cmd)?af.fromBytes2InputStream(C(b.cmd)):af.fromString2InputStream(a),ioStreamReadLines(a,h=>{toBoolean(b.linesvisual)?
(h=e(h),isDef(h)&&l(h,clone(c),!0)):l(h,clone(c),!0)}),a.close()}],["ndjson",(a,c)=>{isBoolean(b.ndjsonjoin)||(b.ndjsonjoin=toBoolean(_$(b.ndjsonjoin,"ndjsonjoin").isString().default(__)));t();global.__ndjsonbuf=__;var d=(e,g)=>{isUnDef(global.__ndjsonbuf)&&0!=e.length&&e.trim().startsWith("{")&&(global.__ndjsonbuf="");if(isDef(global.__ndjsonbuf)){if(0!=e.length&&!e.trim().endsWith("}")){global.__ndjsonbuf+=e.trim();return}0<global.__ndjsonbuf.length&&(e=global.__ndjsonbuf+e,global.__ndjsonbuf=__)}0==
e.length||0<e.length&&"{"!=e.trim().substring(0,1)?(g(e),global.__ndjsonbuf=__):g(e)},f=e=>{var g=[];e.split("\n").filter(h=>0<h.length).forEach(h=>d(h,m=>g.push(jsonParse(m,__,__,toBoolean(b.ndjsonfilter)))));return g};b.ndjsonjoin?(isDef(b.file)&&isUnDef(b.cmd)&&(a=io.readFileString(b.file)),isDef(b.cmd)&&(a=C(b.cmd,!0)),l(f(a),c)):(a=isDef(b.file)&&isUnDef(b.cmd)?io.readFileStream(b.file):isDef(b.cmd)?af.fromBytes2InputStream(C(b.cmd)):af.fromString2InputStream(a),ioStreamReadLines(a,e=>{d(e,g=>
l(jsonParse(g,__,__,!0),clone(c),!0))}),a.close())}],["md",(a,c)=>{t();__conConsole=__ansiColorFlag=!0;isUnDef(b.format)&&isUnDef(c.__format)&&(b.format="md",c.__format="md");l(a,c)}],["mdtable",(a,c)=>{t();ow.loadTemplate();if(toBoolean(b.inmdtablejoin)){var d=new Set,f=new Set,e=()=>{0<f.size&&(d.add(ow.template.md.fromTable(Array.from(f).join("\n"))),f.clear())};a.split("\n").forEach(g=>{/^\|.+\|$/.test(g.trim())?f.add(g.trim()):e()});e();l(Array.from(d),c)}else f=ow.template.md.fromTable(a),l(f,
c)}],["ask",(a,c)=>{var d=[];a=af.fromJSSLON(a);isDef(askStruct)&&isArray(a)&&(__conConsole=!0,__con.getTerminal().settings.set("-icanon min 1 -echo"),d=askStruct(a),__con.getTerminal().settings.set("icanon echo"),print(""));l(d,c)}],["raw",(a,c)=>{t();l(a,c)}],["ini",(a,c)=>{t();ow.loadJava();var d=new ow.java.ini;a=isDef(b.file)?d.loadFile(b.file).get():d.load(a).get();l(a,c)}],["jwt",(a,c)=>{ow.loadServer();if(toBoolean(b.injwtverify)){isUnDef(b.injwtsecret)&&isUnDef(b.injwtpubkey)&&k(-1,"injwtsecret or injwtpubkey is not defined.");
try{if(isDef(b.injwtpubkey)){ow.loadJava();var d=new ow.java.cipher;ow.server.jwt.verify(d.readKey4File(b.injwtpubkey,!1,b.injwtalg),a.trim())}else ow.server.jwt.verify(b.injwtsecret,a.trim());var f=!0}catch(e){isDef(e.javaException)&&printErr(e.javaException.getMessage()),f=!1}}a=ow.server.jwt.decode(a);isDef(f)&&(a.__verified=f);!toBoolean(b.injwtraw)&&isDef(a)&&isMap(a.claims)&&(isDef(a.claims.exp)&&(a.claims.exp=new Date(1E3*a.claims.exp)),isDef(a.claims.iat)&&(a.claims.iat=new Date(1E3*a.claims.iat)),
isDef(a.claims.nbf)&&(a.claims.nbf=new Date(1E3*a.claims.nbf)));l(a,c)}],["sql",(a,c)=>{isString(a)?toBoolean(b.sqlparse)?(isUnDef(ow.format.sqlFormat)&&k(-1,"SQL parse not available."),l(ow.format.sqlFormat(a,isDef(b.sqloptions)?v(b.sqloptions):__),c)):l(af.fromSQL(a).ast,c):l(a,c)}],["openmetrics",(a,c)=>{isString(a)?(ow.loadMetrics(),l(ow.metrics.fromOpenMetrics2Array(a),c)):l(a,c)}],["ch",(a,c)=>{t();isUnDef(b.inch)&&k(-1,"inch is not defined.");b.inch=v(b.inch);if(isMap(b.inch)){isUnDef(b.inch.type)&&
k(-1,"inch.type is not defined.");isDef(b.inch.lib)&&loadLib(b.inch.lib);"remote"==b.inch.type?$ch("oafp::indata").createRemote(b.inch.url):$ch("oafp::indata").create(b.inch.type,b.inch.options);var d=v(a);toBoolean(b.inchall)||0==a.trim().length?l($ch("oafp::indata").getAll(isMap(d)?d:__),c):l($ch("oafp::indata").get(isMap(d)?d:__),c);$ch("oafp::indata").destroy()}else k(-1,"inch is not a valid map.")}],["db",(a,c)=>{if(isString(a)){t();isString(b.indbjdbc)||k(-1,"indbjdbc URL is not defined.");
try{isDef(b.indblib)&&loadLib("jdbc-"+b.indblib+".js");var d=new DB(b.indbjdbc,b.indbuser,b.indbpass,b.indbtimeout);d.convertDates(!0);if(toBoolean(b.indbexec)){var f=d.u(a);l({affectedRows:f},c);d.commit()}else f=d.q(a),isMap(f)&&isArray(f.results)?l(f.results,c):k(-1,"Invalid DB result: "+stringify(f))}catch(e){printErr(e.message),isDef(d)&&d.rollback(),k(-1,"Error executing SQL: "+e.message)}finally{isDef(d)&&(d.rollback(),d.close())}}else k(-1,"db is only supported with a SQL string.")}],["xls",
(a,c)=>{t();try{includeOPack("plugin-XLS")}catch(f){k(-1,"plugin-XLS not found. You need to install it to use the XLS output (opack install plugin-XLS)")}b.xlssheet=_$(b.xlssheet,"xlssheet").isString().default(0);b.xlsevalformulas=toBoolean(_$(b.xlsevalformulas,"xlsevalformulas").isString().default(!0));b.xlscol=_$(b.xlscol,"xlscol").isString().default("A");b.xlsrow=_$(b.xlsrow,"xlsrow").isString().default(1);plugin("XLS");if(isDef(b.file)||isDef(b.cmd)){a=new XLS(isDef(b.cmd)?C(b.cmd):b.file);var d=
a.getSheet(b.xlssheet);d=a.getTable(d,b.xlsevalformulas,b.xlscol,b.xlsrow);a.close();isDef(d)&&isMap(d)&&(d=d.table);l(d,c)}else k(-1,"XLS is only support with 'file' or 'cmd' defined. Please provide a file=... or a cmd=...")}],["csv",(a,c)=>{t();isUnDef(b.inputcsv)&&isDef(b.incsv)&&(b.inputcsv=b.incsv);if(isDef(b.file)||isDef(b.cmd)){var d=isDef(b.cmd)?af.fromBytes2InputStream(C(b.cmd)):io.readFileStream(b.file);a=$csv(b.inputcsv).fromInStream(d).toOutArray();d.close()}else a=$csv(b.inputcsv).fromInString(a).toOutArray();
l(a,c)}],["hsperf",(a,c)=>{if(isDef(b.file)||isDef(b.cmd)){t();ow.loadJava();var d=isDef(b.cmd)?ow.java.parseHSPerf(C(b.cmd)):ow.java.parseHSPerf(b.file);d.__ts=new Date;var f=0,e=0;d.sun.gc.generation.forEach(g=>{g.space.forEach(h=>{e+=Number(h.used);f=isNumber(h.capacity)?f+Number(h.capacity):f;d.sun.gc["__percUsed_"+h.name]=100*h.used/h.capacity})});d.sun.gc.__percUsed_meta=100*d.sun.gc.metaspace.used/d.sun.gc.metaspace.capacity;d.sun.gc.__percUsed_ccs=100*d.sun.gc.compressedclassspace.used/d.sun.gc.compressedclassspace.capacity;
a=$from(d.sun.gc.collector).equals("name","PSScavenge").at(0);d.sun.gc.__ygc=isDef(a)?Number(a.invocations):0;d.sun.gc.__ygct=isDef(a)?Number(a.time/1E9):0;a=$from(d.sun.gc.collector).equals("name","PSParallelCompact").orEquals("name","").at(0);d.sun.gc.__fgc=isDef(a)?Number(a.invocations):0;d.sun.gc.__fgct=isDef(a)?Number(a.time/1E9):0;d.sun.gc.__gct=$from(d.sun.gc.collector).sum("time")/1E9;d.java.__mem={total:f,used:e,free:f-e,metaMax:d.sun.gc.metaspace.maxCapacity,metaTotal:d.sun.gc.metaspace.capacity,
metaUsed:d.sun.gc.metaspace.used,metaFree:d.sun.gc.metaspace.capacity-d.sun.gc.metaspace.used};l(d,c)}else k(-1,"hsperf is only supported with either 'file' or 'cmd' defined.")}],["rawhex",(a,c)=>{b.inrawhexline=_$(b.inrawhexline,"inrawhexline").isNumber().default(__);t();a=isDef(b.file)||isDef(b.cmd)?isDef(b.cmd)?C(b.cmd):io.readFileBytes(b.file):af.fromString2Bytes(a);a=ow.format.string.toHexArray(a,b.inrawhexline);a.forEach(d=>{d.characters=d.characters.replace(/[\x00-\x1F\x80-\xFF]/g,".")});l(a,
c)}],["base64",(a,c)=>{t();a=toBoolean(b.base64gzip)?af.fromBytes2String(io.gunzip(af.fromBase64(a,!0))):af.fromBytes2String(af.fromBase64(a));l(a,c)}],["gb64json",(a,c)=>{t();a=af.fromBytes2String(io.gunzip(af.fromBase64(a,!0)));l(a,c)}],["oaf",(a,c)=>{isString(a)||k(-1,"oaf is only supported with a string.");t();a=af.eval(a);l(a,c)}],["oafp",(a,c)=>{b.__inception=!0;a=v(a);var d="_oafp_key_"+genUUID();if(isMap(a))a.out="key",a.__key=d,a.__inception=!0,oafp(a),a=$get(d),$unset(d),l(a,c);else if(isArray(a)){ow.loadObj();
$set(d,!0);var f=new ow.obj.syncArray;a=a.map((e,g)=>{var h=d+"_"+String(g);e.out="key";e.__key=h;e.__inception=!0;return $do(()=>{oafp(e);f.add($get(h));$unset(h)}).catch(m=>{sprintErr(m)})});$doWait($doAll(a));l(f.toArray(),c)}else k(-1,"oafp input data needs to be a map or an array.")}],["sh",(a,c)=>{t();a=v(a);if(isString(a))a=$sh(a).get(0);else{isMap(a)||k(-1,"For in=sh the input data needs to a string or a map");var d=$sh();isUnDef(a.cmd)&&k(-1,"For in=sh the input data needs to a string or a map with the a 'cmd'");
d=d.sh(a.cmd);isDef(a.envs)&&(d=d.envs(a.envs,a.envsall));isDef(a.prefix)&&(d=d.prefix(a.prefix));isDef(a.pwd)&&(d=d.pwd(a.pwd));switch(b.inshformat){case "raw":a=d.get(0);break;case "yaml":a=d.getYaml(0);break;default:a=d.getJson(0)}}l(a,c)}],["llm",(a,c)=>{b.llmenv=_$(b.llmenv,"llmenv").isString().default("OAFP_MODEL");b.llmoptions=_$(b.llmoptions,"llmoptions").isString().default(__);isUnDef(b.llmoptions)&&!isString(getEnv(b.llmenv))&&k(-1,"llmoptions not defined and "+b.llmenv+" not found.");t();
var d=$llm(isDef(b.llmoptions)?v(b.llmoptions):$sec("system","envs").get(b.llmenv));isDef(b.llmconversation)&&io.fileExists(b.llmconversation)&&d.getGPT().setConversation(io.readFileJSON(b.llmconversation));let f;isString(b.llmimage)&&(b.llmimage.toLowerCase().match(/^https?:\/\//)?f=af.fromBytes2String(af.toBase64Bytes(af.fromInputStream2Bytes($rest().get2Stream(b.llmimage)))):io.fileExists(b.llmimage)&&(f=af.fromBytes2String(af.toBase64Bytes(io.readFileBytes(b.llmimage)))));a="md"==b.output||"mdtable"==
b.output||"raw"==b.output?isDef(f)?d.promptImage(a,f):d.prompt(a):isDef(f)?d.promptImage(a,f,__,__,__,__,!0):d.promptJSON(a);isDef(b.llmconversation)&&(d=d.getGPT().getConversation(),d.push({role:"assistant",content:stringify(a,__,"")}),io.writeFileJSON(b.llmconversation,d,""));l(jsonParse(a,__,__,isString(a)),c)}],["llmmodels",(a,c)=>{b.llmenv=_$(b.llmenv,"llmenv").isString().default("OAFP_MODEL");b.llmoptions=_$(b.llmoptions,"llmoptions").isString().default(__);isUnDef(b.llmoptions)&&!isString(getEnv(b.llmenv))&&
k(-1,"llmoptions not defined and "+b.llmenv+" not found.");t();a=$llm(isDef(b.llmoptions)?v(b.llmoptions):$sec("system","envs").get(b.llmenv));isUnDef(a.getModels)&&k(-1,"OpenAF support for llm model listing API not found.");l(a.getModels(),c)}],["ls",(a,c)=>{t();if(isString(a)){var d=toBoolean(b.lsposix);isDef(b.file)&&(a=b.file);var f=io.fileExists(a),e;f&&(e=io.fileInfo(a));if(f&&e.isFile)switch(isDef(b.lsext)?b.lsext:e.filename.replace(/^.*\./,"").toLowerCase()){case "tgz":case "gz":a=io.listFilesTAR(a,
!0);break;case "tar":a=io.listFilesTAR(a);break;default:plugin("ZIP"),a=$m4a((new ZIP).list(a))}else a=toBoolean(b.lsrecursive)?listFilesRecursive(a,d):io.listFiles(a,d).files;l(a,c)}else k(-1,"ls is only supported with a string.")}],["toml",(a,c)=>{t();isUnDef(af.fromTOML)&&k(-1,"TOML support not found.");l(af.fromTOML(a),c)}],["slon",(a,c)=>{t();l(af.fromSLON(a),c)}],["json",(a,c)=>{t();l(jsonParse(a,__,__,isString(a)),c)}]]),D={};isString(b.libs)&&(b.libs=b.libs.split(",").map(a=>a.trim()).filter(a=>
0<a.length));isDef(__flags.OAFP)&&isArray(__flags.OAFP.libs)&&isArray(b.libs)?b.libs=__flags.OAFP.libs.concat(b.libs):b.libs=isDef(__flags.OAFP)?__flags.OAFP.libs:[];isArray(b.libs)&&b.libs.forEach(a=>{try{var c=require("oafp_"+a+".js");if(isDef(c.oafplib)){var d=c.oafplib(clone(b),l,q,{_runCmd2Bytes:C,_fromJSSLON:v,_msg:"(processing data...)",_showTmpMsg:t,_clearTmpMsg:Q,_chartPathParse:K,_exit:k,_print:p,_o$o:q});isMap(d)&&(isArray(d.fileExtensions)&&d.fileExtensions.forEach(f=>{var e=f.ext;f=f.type;
L.has(e)?printErr("WARN: Extension '"+e+"' already exists."):L.set(e,f)}),isArray(d.fileExtensionsNoMem)&&d.fileExtensionsNoMem.forEach(f=>{f=f.ext;O.has(f)?printErr("WARN: Extension '"+f+"' already exists."):O.add(f)}),isArray(d.input)&&d.input.forEach(f=>{var e=f.type;f=f.fn;F.has(e)?printErr("WARN: Input type '"+e+"' already exists."):F.set(e,f)}),isArray(d.inputLine)&&d.inputLine.forEach(f=>{var e=f.type;f=f.fn;isUnDef(_inputLinesFns[e])?P[e]=f:printErr("WARN: Input type '"+e+"' already exists.")}),
isArray(d.transform)&&d.transform.forEach(f=>{var e=f.type;f=f.fn;isUnDef(E[e])?E[e]=f:printErr("WARN: Transform '"+e+"' already exists.")}),isArray(d.output)&&d.output.forEach(f=>{var e=f.type;f=f.fn;G.has(e)?printErr("WARN: Output type '"+e+"' already exists."):G.set(e,f)}),isString(d.help)&&(D[a.toLowerCase()]=d.help))}else printErr("WARN: Library '"+a+"' does not have oafplib.")}catch(f){printErr("WARN: Library '"+a+"' error: "+f)}});(""==b["-h"]||isString(b.help)&&0<b.help.length)&&x();b.format=
_$(b.format,"format").isString().default(__);__initializeCon();x=!String(java.lang.System.getProperty("os.name")).match(/Windows/);H=getEnv("OAFP_RESET");isDef(H)&&(x=toBoolean(H)?!1:!0);x&&isDef(__con)&&__con.getTerminal().settings.set("sane");if(isDef(b.secKey)){toBoolean(b.secEnv)&&(b.secRepo="system",b.secBucket="envs");b.secRepo=_$(b.secRepo,"secRepo").isString().default(getEnv("OAFP_SECREPO"));b.secBucket=_$(b.secBucket,"secBucket").isString().default(getEnv("OAFP_SECBUCKET"));b.secPass=_$(b.secPass,
"secPass").isString().default(getEnv("OAFP_SECPASS"));b.secMainPass=_$(b.secMainPass,"secMainPass").isString().default(getEnv("OAFP_SECMAINPASS"));b.secFile=_$(b.secFile,"secFile").isString().default(getEnv("OAFP_SECFILE"));let a=$sec(b.secRepo,b.secBucket,b.secPass,b.secMainPass,b.secFile).get(secKey);isDef(a)&&Object.keys(a).forEach(c=>b[c]=a[c])}var B={__format:b.format,__from:b.from,__ifrom:b.ifrom,__isql:b.isql,__sql:b.sql,__path:b.path,__opath:b.opath,__csv:b.csv,__pause:b.pause,__key:b.__key};
isDef(b.inputcsv)&&(b.inputcsv=v(b.inputcsv));isDef(b.incsv)&&(b.incsv=v(b.incsv));isDef(b.csv)&&(b.csv=v(b.csv));var S=!1;if(""==b["-v"]||isString(b.version)&&0<b.version.length)S=!0,R();if(""==b["-examples"]||isString(b.examples)&&0<b.examples.length)b.url="https://ojob.io/oafp-examples.yaml",b.in="yaml",isString(b.examples)&&0<b.examples.length?("?"!=b.examples.trim()&&(B.__format="template"),B.__path="data",b.templatepath="tmpl",0<b.examples.indexOf("::")?(x=b.examples.split("::").filter(a=>0<
a.length),B.__sql=1==x.length?"select * where c like '"+x[0]+"'":"select * where c like '"+x[0]+"' and s like '"+x[1]+"'"):"?"==b.examples.trim()?(B.__path="data.sort(map(&concat(c,concat('::',s)),[]))",b.removedups=!0):B.__sql="select * where d like '%"+b.examples+"%' or s like '%"+b.examples+"%' or c like '%"+b.examples+"%'"):(B.__path="data[].{category:c,subCategory:s,description:d}",B.__from="sort(category,subCategory,description)",B.__format="ctable"),delete b["-examples"];var u="",M=!1;isDef(b.outfile)&&
("undefined"===typeof global.__oafp_streams&&(global.__oafp_streams={}),"undefined"===typeof global.__oafp_streams[b.outfile]&&(global.__oafp_streams[b.outfile]={s:io.writeFileStream(b.outfile,toBoolean(b.outfileappend))}));isString(b.chs)&&(x=af.fromJSSLON(b.chs),isArray(x)||(x=[x]),x.forEach(a=>{isMap(a)?isString(a.name)&&isString(a.type)?$ch(a.name).create(a.type,a.options):k(-1,"ERROR: chs must have a name and a type."):k(-1,"ERROR: chs must be an object or array of objects with name and a type")}));
x=()=>{if(S)u=R();else if(b.jsonprefix=_$(b.jsonprefix,"jsonprefix").isString().default(__),b.jsondesc=toBoolean(_$(b.jsondesc,"jsondesc").default("false")),isDef(b.insecure)&&toBoolean(b.insecure)&&ow.loadJava().setIgnoreSSLDomains(),isDef(b.file)){if(0>b.file.indexOf("::")&&!io.fileExists(b.file)&&k(-1,"ERROR: File not found: '"+b.file+"'"),!O.has(b.type))if("json"==b.type||isUnDef(b.type))if(b.jsondesc){var a=new Set;io.readStreamJSON(b.file,d=>{d=d.substring(2);isDef(b.jsonprefix)?d.startsWith(b.jsonprefix)&&
a.add(d):a.add(d);return!1});u=stringify(Array.from(a),__,"")}else if(isDef(b.jsonprefix)){var c=io.readStreamJSON(b.file,d=>d.substring(2).startsWith(b.jsonprefix));u=stringify(c,__,"")}else u=io.readFileString(b.file),toBoolean(b._shebang)&&(u=u.replace(/^#!.*\n/,""));else u=io.readFileString(b.file),toBoolean(b._shebang)&&(u=u.replace(/^#!.*\n/,""))}else if(b.jsondesc&&k(-1,"ERROR: jsondesc only available for file input."),b.jsonprefix&&k(-1,"ERROR: jsonprefix only available for file input."),
isDef(b.cmd))u=C(b.cmd,!0);else if(isString(b.data))u=b.data;else if(isDef(b.url)){b.urlmethod=_$(b.urlmethod,"urlmethod").isString().default("GET");c=v(_$(b.urlparams).isString().default("{}"));let d;isDef(b.urldata)&&(d=v(b.urldata));switch(b.urlmethod.toLowerCase()){case "post":u=$rest(c).post(b.url,d);break;case "put":u=$rest(c).put(b.url,d);break;case "delete":u=$rest(c).delete(b.url,d);break;default:u=$rest(c).get(b.url)}isObject(u)&&(u=stringify(u,__,""))}else"pm"!=b.input&&(u=[],io.pipeLn(d=>
{isDef(P[b.type])?P[b.type](N(d),clone(B))&&u.push(d):u.push(d);return!1}),u=u.join("\n"));M||(isUnDef(b.type)&&(isDef(b.file)&&(c=b.file.substring(b.file.lastIndexOf(".")),L.has(c)&&(b.type=L.get(c))),isUnDef(b.type)&&(c=u.trim(),c.startsWith("{")||c.startsWith("[")?b.type="json":c.startsWith("(")?b.type="slon":c.startsWith("<")?b.type="xml":isString(c)&&0<c.length?1<c.substring(0,c.indexOf("\n")).split(",").length?b.type="csv":c.substring(0,0<c.indexOf(": "))&&(b.type="yaml"):k(-1,"Please provide the input type."))),
isDef(b.type)&&F.has(b.type)?F.get(b.type)(u,B):(isString(b.type)&&printErr("WARN: "+b.type+" input type not supported. Using json."),F.get("json")(u,B)),delete b.__origr)};isDef(b["-debug"])&&printErr("DEBUG: "+colorify(b));if(isNumber(b.loop))for(;;)toBoolean(b.loopcls)&&isDef(b.outfile)&&(global.__oafp_streams[b.outfile].close(),global.__oafp_streams[b.outfile]=io.writeFileStream(b.outfile,toBoolean(b.outfileappend))),x(),sleep(1E3*b.loop,!0);else x();isDef(global.__oafp_streams)&&Object.keys(global.__oafp_streams).forEach(a=>
global.__oafp_streams[a].s.close())}};oafp(params);
