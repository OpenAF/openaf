var params=processExpr(" ");
// (author: Nuno Aguiar, version: 20241117, license: Apache 2.0, url: https://github.com/openaf/oafp)
// ---
const _oafphelp={'docs/EXAMPLES.md':af.fromBytes2String(io.gunzip(af.fromBase64("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"))),
'docs/TEMPLATE.md':af.fromBytes2String(io.gunzip(af.fromBase64("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"))),
'docs/USAGE.md':af.fromBytes2String(io.gunzip(af.fromBase64(""))),
'docs/FILTERS.md':af.fromBytes2String(io.gunzip(af.fromBase64("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")))};
var _params=processExpr(" ");
const oafp=b=>{if(!isUnDef(b)&&!isDef(b.____ojob)){isDef($sec().procMap)&&(b=$sec().procMap(b));Object.keys(b).forEach(a=>{if(0<b[a].length){var c=a.toLowerCase();a!=c&&isUnDef(b[c])&&(b[c]=b[a],delete b[a])}});var N=a=>{for(var c=Object.keys(E),d=0;d<c.length;d++){var f=c[d];isDef(b[f])&&(a=E[f](a))}return a},J=(a,c)=>{b.__origr=a;c.__ifrom&&(a=$from(a).query(af.fromNLinq(c.__ifrom.trim())),delete c.__ifrom);if(c.__isql){var d=__;if(isString(b.sqlfilter))switch(b.sqlfilter.toLowerCase()){case "simple":d="nlinq";
break;case "advanced":d="h2";break;default:d=__}if(isArray(a)&&0<a.length)if(isString(b.isqlfiltertables)){var f=$sql();d=u(b.isqlfiltertables);isArray(d)&&(d.forEach(e=>{isUnDef(e.table)&&k(-1,"One 'table' not defined in isqlfiltertables");e.path=_$(e.path,"isqlfiltertables table "+e.table+" path").isString().default("@");var g=$path(a,e.path);isArray(g)&&(f=f.table(e.table,g))}),a=f.closeQuery(c.__isql.trim()))}else a=$sql(a,c.__isql.trim(),d);delete c.__isql}c.__path&&(a=$path(a,c.__path.trim()),
delete c.__path);if(isString(a))return N(a);a=N(a);c.__from&&(a=$from(a).query(af.fromNLinq(c.__from.trim())),delete c.__from);if(c.__sql){d=__;if(isString(b.sqlfilter))switch(b.sqlfilter.toLowerCase()){case "simple":d="nlinq";break;case "advanced":d="h2";break;default:d=__}isArray(a)&&0<a.length&&(isString(b.sqlfiltertables)?(f=$sql(),d=u(b.sqlfiltertables),isArray(d)&&(d.forEach(e=>{isUnDef(e.table)&&k(-1,"One 'table' not defined in sqlfiltertables");e.path=_$(e.path,"sqlfiltertables table "+e.table+
" path").isString().default("@");var g=$path(a,e.path);isArray(g)&&(f=f.table(e.table,g))}),a=f.closeQuery(c.__sql.trim()))):a=$sql(a,c.__sql.trim(),d));delete c.__sql}c.__opath&&(a=$path(a,c.__opath.trim()),delete c.__opath);return a},l=(a,c,d)=>{c=clone(c);toBoolean(b.color)?__conConsole=!0:isDef(b.color)&&(__conAnsi=!1);a=isString(a)?a.trim().startsWith("{")&&a.trim().endsWith("}")?J(jsonParse(a,__,__,!0),c):J(a,c):d?J([a],c)[0]:J(a,c);isDef(b.outputkey)&&(a=$$({}).set(b.outputkey,a));isDef(b.outkey)&&
(a=$$({}).set(b.outkey,a));Q();isUnDef(c.__format)&&(c.__format=getEnvsDef("OAFP_OUTPUT",c.__format,"tree"));G.has(c.__format)?G.get(c.__format)(a,c):t(a,c,__)},C=(a,c)=>{var d=af.fromString2Bytes(""),f=af.newOutputStream();$sh(a).cb((e,g,h)=>{ioStreamCopy(f,e);e=f.toByteArray();0<e.length&&(d=e)}).get();return c?af.fromBytes2String(d):d},u=a=>{if(!isString(a)||""==a||isNull(a))return"";a=a.trim();return isDef(af.fromJSSLON)?af.fromJSSLON(a):a.startsWith("{")?jsonParse(a,__,__,!0):af.fromSLON(a)},
K=(a,c,d,f)=>{d=_$(d).isString().default("_oafp_fn_");c=splitBySepWithEnc(c," ",[['"','"'],["'","'"]]);let e=[];$ch("__oaf::chart").create();if(1<c.length){for(let g=0;g<c.length;g++)if(0==g)e.push(c[g]);else{let h=splitBySepWithEnc(c[g],":",[['"','"'],["'","'"]]).map((m,n)=>{if(0==n){if(m.startsWith("-"))return m;global[d+g]=()=>{if(isString(f)){var q=$ch("__oaf::chart").get({name:f});q=isUnDef(q)?[]:q.data;var x=$path(a,m);if(isArray(x))return x.forEach((v,z)=>{isArray(q[z])?q[z].push(v):q[z]=[v]}),
x=q.pop(),$ch("__oaf::chart").set({name:f},{name:f,data:q}),x[0]}else return $path(a,m)};return d+g}return m}).join(":");e.push(h)}return e.join(" ")}return""},p=a=>{"undefined"!==typeof a&&("undefined"===typeof b.outfile?(toBoolean(b.loopcls)&&cls(),print(a)):("undefined"===typeof global.__oafp_streams&&(global.__oafp_streams={}),"undefined"!==typeof global.__oafp_streams[b.outfile]&&ioStreamWrite(global.__oafp_streams[b.outfile].s,a+(toBoolean(b.outfileappend)?"\n":""))))},t=(a,c,d)=>{"undefined"!==
typeof a&&(a=$o(a,c,d,!0),isDef(a)&&p(a))},r=a=>{"grid"==b.out||b.__inception||toBoolean(b.loopcls)||toBoolean(b.chartcls)||printErrnl(_$(a).default("(processing data...)"))},Q=a=>{"grid"==b.out||b.__inception||toBoolean(b.loopcls)||toBoolean(b.chartcls)||printErrnl("\r"+" ".repeat(_$(a).default("(processing data...)").length)+"\r")},k=(a,c)=>{isUnDef(c)&&(c="exit: "+a);if(isUnDef(ow.oJob)&&!toBoolean(b.noexit))0!=a&&printErr(c),exit(a);else throw c;},y=()=>{__initializeCon();b.help=_$(b.help,"help").isString().default("");
switch(b.help.toLowerCase()){case "filters":var a="docs/FILTERS.md";break;case "template":a="docs/TEMPLATE.md";break;case "examples":a="docs/EXAMPLES.md";break;case "readme":case "usage":a="docs/USAGE.md";break;default:a=b.help.toLowerCase(),a=isDef(D[a])?"docs/"+a+".md":"docs/USAGE.md"}var c=(getOPackPath("oafproc")||".")+"/"+a;let d="";if("docs/USAGE.md"==a&&0<Object.keys(D).length){d="\n---\n\n## \ud83d\udcda Libs help documents\n\n| Lib | Help |\n| --- | --- |\n";for(let f in D)d+="| "+f+" | help="+
f+" |\n"}isDef(c)&&io.fileExists(c)?(__conConsole=__ansiColorFlag=!0,isDef(ow.format.string.pauseString)&&toBoolean(b.pause)?ow.format.string.pauseString(ow.format.withMD(io.readFileString(c)+d)):p(isDef(b.out)&&"raw"==b.out?io.readFileString(c)+d:ow.format.withMD(io.readFileString(c)+d))):isDef(global._oafphelp)&&isDef(global._oafphelp[a])?(__conConsole=__ansiColorFlag=!0,isDef(ow.format.string.pauseString)&&toBoolean(b.pause)?ow.format.string.pauseString(ow.format.withMD(global._oafphelp[a]+d)):
p(isDef(b.out)&&"raw"==b.out?global._oafphelp[a]+d:ow.format.withMD(global._oafphelp[a]+d))):isString(D[b.help])?(__conConsole=__ansiColorFlag=!0,isDef(ow.format.string.pauseString)&&toBoolean(b.pause)?ow.format.string.pauseString(ow.format.withMD(D[b.help])):p(isDef(b.out)&&"raw"==b.out?D[b.help]:ow.format.withMD(D[b.help]))):p("Check https://github.com/OpenAF/oafp/blob/master/src/"+a);k(0)},R=()=>{var a=(getOPackPath("oafproc")||".")+"/.package.yaml";a={oafp:{version:io.fileExists(a)?io.readFileYAML(a).version:
"(not available/embedded)",inputs:Array.from(F.keys()).filter(c=>"?"!=c).sort(),transforms:Object.keys(E).filter(c=>"transforms"!=c).sort(),outputs:Array.from(G.keys()).filter(c=>"?"!=c).sort(),flags:__flags.OAFP},openaf:{version:getVersion(),distribution:getDistribution(),home:getOpenAFPath(),opacks:$from($m4a(getOPackLocalDB())).notEquals("name","OpenAF").sort("name").select({name:"",version:""})},java:{version:ow.format.getJavaVersion(),home:ow.format.getJavaHome(),vendor:String(java.lang.System.getProperty("java.vendor")),
params:af.fromJavaArray(java.lang.management.ManagementFactory.getRuntimeMXBean().getInputArguments())},os:{name:String(java.lang.System.getProperty("os.name")),version:String(java.lang.System.getProperty("os.version")),arch:ow.format.getOSArch(),cpuCores:getNumberOfCores(!0),mem:{max:Number(java.lang.Runtime.getRuntime().maxMemory()),total:Number(java.lang.Runtime.getRuntime().totalMemory())},store:{tmpDirPath:String(java.lang.System.getProperty("java.io.tmpdir")),freeTmpDirBytes:Number(java.nio.file.Files.getFileStore(java.nio.file.Paths.get(java.lang.System.getProperty("java.io.tmpdir"))).getUsableSpace())}}};
return stringify(a,__,"")};ow.loadFormat();b.format=b.output||b.format||b.out;b.type=b.input||b.type||b.in;b.out=b.format;b.output=b.format;b.in=b.type;b.input=b.type;if(isUnDef(b.file)&&isUnDef(b.cmd)){var H=__;for(let a in b)if(""===b[a]&&"-debug"!=a&&"-v"!=a&&"-examples"!=a){H=a;break}b.file=H}"[object Object]"==Object.prototype.toString.call(b.data)&&(b.data=stringify(b.data,__,""));var L=new Map([[".json","json"],[".ndjson","ndjson"],[".slon","slon"],[".yaml","yaml"],[".xml","xml"],[".csv","csv"],
[".ini","ini"],[".md","md"],[".xls","xls"],[".xlsx","xls"],[".sql","sql"],[".toml","toml"],[".jwt","jwt"]]),O=new Set(["csv","ndjson"]),P={lines:(a,c)=>{isBoolean(b.linesjoin)||(b.linesjoin=toBoolean(_$(b.linesjoin,"linesjoin").isString().default(__)));if(!b.linesjoin&&isString(a))0!=a.trim().length&&(0<a.trim().length&&(a=a.trim().split(/\r?\n/)),l(a,c,!0)),M=!0;else return!0},ndjson:(a,c)=>{isBoolean(b.ndjsonjoin)||(b.ndjsonjoin=toBoolean(_$(b.ndjsonjoin,"ndjsonjoin").isString().default(__)));if(b.ndjsonjoin)return!0;
isUnDef(global.__ndjsonbuf)&&0!=a.length&&a.trim().startsWith("{")&&(global.__ndjsonbuf="");if(isDef(global.__ndjsonbuf)){if(0!=a.length&&!a.trim().endsWith("}")){global.__ndjsonbuf+=a.trim();return}0<global.__ndjsonbuf.length&&(a=global.__ndjsonbuf+a,global.__ndjsonbuf=__)}0==a.length||0<a.length&&"{"!=a.trim().substring(0,1)?(l(jsonParse(global.__ndjsonbuf,__,__,!0),c,!0),M=!0,global.__ndjsonbuf=__):(l(jsonParse(a,__,__,!0),c,!0),M=!0)}},E={transforms:a=>{if(toBoolean(b.transforms))return Object.keys(E).filter(c=>
"transforms"!=c).sort()},cmlt:a=>{if(toBoolean(b.cmlt)){a=isArray(a)?a:[a];b.cmltch=_$(b.cmltch,"cmltch").default("(type: simple)");var c=u(b.cmltch);if(isMap(c))return isUnDef(c.type)&&k(-1,"cmltch.type is not defined."),isDef(c.lib)&&loadLib(c.lib),0>$ch().list().indexOf("oafp::cmltdata")&&("remote"==c.type?$ch("oafp::cmltdata").createRemote(c.url):$ch("oafp::cmltdata").create(c.type,c.options),c=Number(_$(b.cmltsize,"cmltsize").isNumber().default(100))-1,0<c&&$ch("oafp::cmltdata").subscribe(ow.ch.utils.getHousekeepSubscriber("oafp::cmltdata",
c))),a.forEach(d=>$ch("oafp::cmltdata").set({t:nowNano()},d)),$ch("oafp::cmltdata").getAll();k(-1,"Invalid cmltch parameter")}},diff:a=>{var c=u(b.diff);if(isMap(c)){isDef(c.a)&&isDef(c.b)||k(-1,"diff.a path and diff.b path are required.");loadDiff();let d=$path(a,c.a);a=$path(a,c.b);let f=__;toBoolean(b.color)&&(isUnDef(b.difftheme)&&isDef(getEnv("OAFP_DIFFTHEME"))&&(b.difftheme=getEnv("OAFP_DIFFTHEME")),f=u(_$(b.difftheme,"difftheme").isString().default("")),f=merge({added:"GREEN",removed:"RED",
common:"FAINT",linenum:"ITALIC",linediv:"FAINT",linesep:"|"},f));let e=(g,h)=>{if(toBoolean(b.color)){isUnDef(h)&&(h="");var m=new Set;if(isArray(g)){let n=1,q=toBoolean(b.diffnlines),x=0;q&&(g.forEach(z=>{x+=z.value.split("\n").length}),x=String(x).length+1);let v=z=>{let A;A=q&&""!=h?ansiColor(f.linenum,0<z?$ft("% "+x+"d",n):" ".repeat(x))+ansiColor(f.linediv,`${f.linesep}`):"";n+=z;return A};g.forEach((z,A)=>{A=z.value;isString(A)&&(""!=h?(A=A.split(h),""==A[A.length-1]&&A.pop()):A=[A]);m.add(z.added?
A.map(I=>v(1)+ansiColor(f.added,(""!=h?"+":"")+I)).join(ansiColor("RESET",h)):z.removed?A.map(I=>v(0)+ansiColor(f.removed,(""!=h?"-":"")+I)).join(ansiColor("RESET",h)):A.map(I=>v(1)+ansiColor(f.common,(""!=h?" ":"")+I)).join(ansiColor("RESET",h)))})}return Array.from(m).join(ansiColor("RESET",h))}return $from(g).select({count:__,added:!1,removed:!1,value:[]})};return isString(d)&&isString(a)?toBoolean(b.diffwords)?e(JsDiff.diffWords(d,a,c.options)):toBoolean(b.diffwordswithspace)?e(JsDiff.diffWordsWithSpace(d,
a,c.options)):toBoolean(b.difflines)?e(JsDiff.diffLines(d,a,c.options),"\n"):toBoolean(b.diffsentences)?e(JsDiff.diffSentences(d,a,c.options),"\n"):e(JsDiff.diffChars(d,a,c.options)):isArray(d)&&isArray(a)&&!toBoolean(b.color)?e(JsDiff.diffArrays(d,a,c.options)):e(JsDiff.diffJson(d,a,c.options),"\n")}},jsonschemagen:a=>{if(toBoolean(b.jsonschemagen))return ow.loadObj(),ow.obj.schemaGenerator(a)},jsonschemacmd:a=>E.jsonschema(a),jsonschema:a=>{isMap(a)||k(-1,"jsonschema is only supported with a map.");
isUnDef(b.jsonschema)&&isUnDef(b.jsonschemacmd)&&k(-1,"You need to provide a jsonschema=someFile.json or jsonschemacmd=someCommand");ow.loadObj();var c;if(isDef(b.jsonschemacmd)){var d=$sh(b.jsonschemacmd).getJson(0);0==d.exitcode?c=d.stdout:k(-1,"Error executing the command '"+b.jsonschemacmd+"': "+d.stderr)}else c=io.readFileJSON(b.jsonschema);isMap(c)||k(-1,"The schema provided is not a valid JSON schema.");ow.obj.schemaInit({allErrors:!0});c=ow.obj.schemaCompile(c);return{valid:c(a),errors:c.errors}},
sortmapkeys:a=>{if(toBoolean(b.sortmapkeys)&&isObject(a)){let c=(d,f)=>{let e=Object.keys(d).sort(),g={};for(let h=0;h<e.length;h++){let m=e[h],n=d[m];Array.isArray(n)?g[m]=n.map(q=>"object"===typeof q&&null!==q&&void 0!==q?sortMapKeys(q,f):q):g[m]=f&&"object"===typeof n&&null!==n&&void 0!==n?c(n,f):n}return g};return c(a,!0)}return a},searchkeys:a=>isObject(a)?searchKeys(a,b.searchkeys):a,searchvalues:a=>isObject(a)?searchValues(a,b.searchvalues):a,maptoarray:a=>toBoolean(b.maptoarray)&&isMap(a)?
$m4a(a,b.maptoarraykey):a,arraytomap:a=>toBoolean(b.arraytomap)&&isArray(a)?$a4m(a,b.arraytomapkey,toBoolean(b.arraytomapkeepkey)):a,flatmap:a=>toBoolean(b.flatmap)&&isObject(a)?ow.loadObj().flatMap(a,b.flatmapsep):a,merge:a=>{if(toBoolean(b.merge)&&isArray(a)&&1<a.length){for(var c,d=0;d<a.length;d++)c=0==d?a[d]:merge(c,a[d]);return c}return a},correcttypes:a=>{toBoolean(b.correcttypes)&&isObject(a)&&traverse(a,(c,d,f,e)=>{switch(descType(d)){case "number":isString(d)&&(e[c]=Number(d));break;case "string":"true"==
d.trim().toLowerCase()||"false"==d.trim().toLowerCase()?e[c]=toBoolean(d):d.trim().match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$/)?e[c]=new Date(d):d.trim().match(/^\d{4}-\d{2}-\d{2}$/)?e[c]=new Date(d):d.trim().match(/^\d{2}:\d{2}:\d{2}$/)?e[c]=new Date(d):d.trim().match(/^\d{2}:\d{2}$/)&&(e[c]=new Date(d))}});return a},removenulls:a=>{toBoolean(b.removenulls)&&traverse(a,(c,d,f,e)=>{(isNull(d)||isUnDef(d))&&delete e[c]});return a},trim:a=>{toBoolean(b.trim)&&traverse(a,(c,d,f,e)=>{isString(d)&&
(e[c]=d.trim())});return a},removedups:a=>{if(toBoolean(b.removedups)){if(isArray(a)){var c=new Set,d=[];a.forEach(f=>{var e=f;isObject(f)&&(e=sortMapKeys(e));e=stringify(e,__,!0);c.has(e)||(c.add(e),d.push(f))});return d}k(-1,"removedups is only supported for arrays")}return a},llmprompt:a=>{if(isString(b.llmprompt)){b.llmenv=_$(b.llmenv,"llmenv").isString().default("OAFP_MODEL");b.llmoptions=_$(b.llmoptions,"llmoptions").isString().default(__);var c=$llm(isDef(b.llmoptions)?b.llmoptions:$sec("system",
"envs").get(b.llmenv));isDef(b.llmconversation)&&io.fileExists(b.llmconversation)&&c.getGPT().setConversation(io.readFileJSON(b.llmconversation));var d="json",f=!0;isString(b.input)&&("md"==b.input&&(d="markdown",f=!1),"mdtable"==b.input&&(d="markdown table",f=!1),"hsperf"==b.input&&(d="java hsperf file"),"raw"==b.input&&(d="raw",f=!1));c=c.withContext(f?stringify(a,__,!0):a,isDef(b.llmcontext)?b.llmcontext:`${d} input data`);if(isString(b.output)&&("md"==b.output||"mdtable"==b.output||"raw"==b.output))return a=
c.prompt(b.llmprompt),isDef(b.llmconversation)&&io.writeFileJSON(b.llmconversation,c.getGPT().getConversation(),""),a;a=c.promptJSON(b.llmprompt);isDef(b.llmconversation)&&io.writeFileJSON(b.llmconversation,c.getGPT().getConversation(),"");return a}return a},splitlines:a=>toBoolean(b.splitlines)&&isString(a)?a.split(/\r?\n/):a,regression:a=>{if(isString(b.regression)){ow.loadAI();var c=ow.ai.regression(),d=_$(b.regressionpath,"regressionpath").isString().default("@");let f=u(_$(b.regressionoptions,
"regressionoptions").isString().default("{order:2,precision:5}"));d=$path(a,d);if(isArray(d)){if(isString(b.regressionx)){let g=$path(a,b.regressionx);d=d.map((h,m)=>[g[m],h])}else d=d.map((g,h)=>[h+1,g]);let e;switch(b.regression){case "exp":e=c.exponential(d,f);break;case "poly":e=c.polynomial(d,f);break;case "power":e=c.power(d,f);break;case "log":e=c.logarithmic(d,f);break;default:e=c.linear(d,f)}return isDef(e)&&isDef(e.points)?(isString(b.regressionforecast)&&(a=$path(a,b.regressionforecast),
isArray(a)?a.forEach(g=>{e.points.push(e.predict(g))}):k(-1,"Invalid array of x for regression forecast")),e.points.map(g=>({x:g[0],y:g[1]}))):e}k(-1,"Invalid data for regression analysis")}return a},normalize:a=>{if(isString(b.normalize)){var c=u(b.normalize);if(isMap(c)){ow.loadAI();if(isMap(a))return ow.ai.normalize.withSchema(a,c,!0);if(isArray(a))return a.map(d=>ow.ai.normalize.withSchema(d,c,!0))}else k(-1,"Invalid normalize schema")}else k(-1,"Invalid normalize schema")},denormalize:a=>{if(isString(b.denormalize)){var c=
u(b.denormalize);if(isMap(c)){ow.loadAI();isUnDef(ow.ai.normalize.denormalizeWithSchema)&&k(-1,"This version of OpenAF does not support denormalizeWithSchema");if(isMap(a))return ow.ai.normalize.denormalizeWithSchema(a,c,!1);if(isArray(a))return a.map(d=>ow.ai.normalize.denormalizeWithSchema(d,c,!1))}else k(-1,"Invalid denormalize schema")}else k(-1,"Invalid denormalize schema")},kmeans:a=>{isNumber(b.kmeans)||(b.kmeans=5);isArray(a)||k(-1,"For kmeans transform you need to provide an array as input");
ow.loadAI();return ow.ai.cluster({type:"kmeans",numberOfClusters:Number(b.kmeans)}).classify(a)},getlist:a=>{if(isObject(a)&&(toBoolean(b.getlist)||isNumber(b.getlist))){var c=!1,d,f=isNumber(b.getlist)?b.getlist:1;traverse(a,(e,g,h,m)=>{!c&&isArray(g)&&(f--,0==f&&(c=!0),d=g)});return c?d:a}},set:a=>{var c=u(b.set);!isMap(c)&&isUnDef(c.a)&&isUnDef(c.b)&&k(-1,"set.a path and set.b path are required.");isUnDef(pForEach)&&k(-1,"This version of OpenAF does not support the set transform");isString(c.a)||
k(-1,"set.a path is not a string.");isString(c.b)||k(-1,"set.b path is not a string.");let d=$path(a,c.a);a=$path(a,c.b);isArray(d)||k(-1,"set.a path result is not an array.");isArray(a)||k(-1,"set.b path result is not an array.");let f;if(isString(b.setkeys)){ow.loadObj();var e=b.setkeys.split(",").map(g=>g.trim());f=g=>stringify(isObject(g)?sortMapKeys(ow.obj.filterKeys(e,g),!0):g,__,"");c=g=>pForEach(g,f).reduce((h,m)=>h.concat(m),[])}else f=g=>stringify(isObject(g)?sortMapKeys(g,!0):g,__,""),
c=g=>pForEach(g,f).reduce((h,m)=>h.concat(m),[]);switch(b.setop){case "union":let g=new Set(c(d));return d.concat(a.filter(v=>!g.has(f(v))));case "diffa":let h=new Set(c(a));return d.filter(v=>!h.has(f(v)));case "diffb":let m=new Set(c(d));return a.filter(v=>!m.has(f(v)));case "diffab":let n=new Set(c(d)),q=new Set(c(a));return d.filter(v=>!q.has(f(v))).concat(a.filter(v=>!n.has(f(v))));default:let x=new Set(c(a));return d.filter(v=>x.has(f(v)))}},forcearray:a=>isMap(a)?[a]:a},G=new Map([["?",(a,
c)=>{a=Array.from(G.keys()).filter(d=>"?"!=d).sort();t(a,c)}],["pm",(a,c)=>{t(a,c)}],["key",(a,c)=>{t(a,c)}],["html",(a,c)=>{let d;c=!1;b.htmlopen=toBoolean(_$(b.htmlopen,"htmlopen").isString().default("true"));b.htmlwait=_$(b.htmlwait,"htmlwait").isNumber().default(2500);b.htmlopen&&(d=io.createTempFile("oafp_",".html"));ow.loadTemplate();isString(a)?(a=ow.template.html.genStaticVersion(ow.template.parseMD2HTML(a,!toBoolean(b.htmlpart),!toBoolean(b.htmlcompact))),a=a.replace("<html>",'<html><meta charset="utf-8">')):
(a=ow.template.html.parseMap(a,!0),a='<html><meta charset="utf-8"><style>'+a.css+"</style><body>"+a.out+"</body></html>");b.htmlopen&&(io.writeFileString(d,a),c=openInBrowser("file:///"+d.replace(/\\/g,"/")));c?sleep(b.htmlwait,!0):p(a)}],["ctable",(a,c)=>{t(a,c)}],["stable",(a,c)=>{t(a,c)}],["table",(a,c)=>{t(a,c)}],["json",(a,c)=>{t(a,c)}],["yaml",(a,c)=>{t(a,c)}],["cyaml",(a,c)=>{t(a,c)}],["cjson",(a,c)=>{t(a,c)}],["slon",(a,c)=>{t(a,c)}],["cslon",(a,c)=>{t(a,c)}],["ctree",(a,c)=>{t(a,c)}],["tree",
(a,c)=>{t(a,c)}],["res",(a,c)=>{t(a,c)}],["key",(a,c)=>{t(a,c)}],["text",(a,c)=>{t(a,c)}],["csv",(a,c)=>{t(a,c)}],["map",(a,c)=>{t(a,c)}],["md",(a,c)=>{t(toBoolean(b.mdtemplate)?$t(a):a,c)}],["log",(a,c)=>{if(isString(a)&&toBoolean(b.logprintall))p(a.replace(/\n$/,""));else if(c=a,isMap(a)&&(c=[a]),isArray(c)){isUnDef(b.logtheme)&&isDef(getEnv("OAFP_LOGTHEME"))&&(b.logtheme=getEnv("OAFP_LOGTHEME"));let d=u(_$(b.logtheme,"logtheme").isString().default(""));d=merge({errorLevel:"RED,BOLD",warnLevel:"YELLOW",
timestamp:"BOLD"},d);c.forEach(f=>{if(isMap(f)){let e=isDef(f["@timestamp"])&&isString(f["@timestamp"])?f["@timestamp"]:__,g=isDef(f.level)?f.level:__;f=isDef(f.message)?f.message:__;let h;isDef(g)&&(0<=g.toLowerCase().indexOf("err")&&(h=d.errorLevel),0<=g.toLowerCase().indexOf("warn")&&(h=d.warnLevel));isDef(e)&&24<e.length&&(e=e.substring(0,23)+"Z");(isDef(f)||isDef(e))&&p(ansiColor(d.timestamp,e)+(isDef(g)?" | "+ansiColor(h,g):"")+" | "+ansiColor(h,f))}})}}],["raw",(a,c)=>{isString(a)?p(a):p(stringify(a))}],
["lines",(a,c)=>{isArray(a)?a.forEach(d=>p(d)):p(a)}],["ini",(a,c)=>{isString(a)||(ow.loadJava(),c=new ow.java.ini,p(c.put(a).save()))}],["toml",(a,c)=>{isUnDef(af.toTOML)&&k(-1,"TOML support not found.");if(isMap(a))p(af.toTOML(a));else if(isArray(a))p(af.toTOML({list:a}));else return __}],["mdyaml",(a,c)=>{isArray(a)?a.forEach((d,f)=>{t(d,merge(c,{__format:"yaml"}));f<a.length-1&&p("---\n")}):t(a,merge(c,{__format:"yaml"}))}],["mdtable",(a,c)=>{isArray(a)&&(ow.loadTemplate(),p(ow.template.md.table(a)))}],
["template",(a,c)=>{isString(a)||(ow.loadTemplate(),ow.template.addConditionalHelpers(),ow.template.addOpenAFHelpers(),ow.template.addFormatHelpers(),isUnDef(b.template)&&isUnDef(b.templatepath)&&k(-1,"For out=template you need to provide a template=someFile.hbs or templatepath=..."),b.templatedata=_$(b.templatedata,"templatedata").isString().default("@"),c=isDef(b.template)?toBoolean(b.templatetmpl)?b.template:io.readFileString(b.template):$path(b.__origr,b.templatepath),p($t(c,$path(a,b.templatedata))))}],
["openmetrics",(a,c)=>{isString(a)?k(-1,"For out=openmetrics input needs to be an array or map."):(ow.loadMetrics(),a=ow.metrics.fromObj2OpenMetrics(a,b.metricsprefix,b.metricstimestamp),a=a.split("\n").map(d=>{0<=d.indexOf('{_id="')&&(d=d.replace(/{_id="\d+",/,"{"));0<=d.indexOf(',_id="')&&(d=d.replace(/,_id="\d+"}/,"}"));0<=d.indexOf('_id="')&&(d=d.replace(/,_id="\d+",/,","));return d}).join("\n"),p(a))}],["pjson",(a,c)=>{c.__format="prettyjson";t(a,c)}],["ndjson",(a,c)=>{isArray(a)?a.forEach(d=>
p(stringify(d,__,""))):isMap(a)?p(stringify(a,__,"")):t(a,c)}],["base64",(a,c)=>{a=isString(a)?a:stringify(a);toBoolean(b.base64gzip)?p(af.fromBytes2String(af.toBase64Bytes(io.gzip(af.fromString2Bytes(a))))):p(af.fromBytes2String(af.toBase64Bytes(a)))}],["gb64json",(a,c)=>{a=isString(a)?a:stringify(a);p(af.fromBytes2String(af.toBase64Bytes(io.gzip(af.fromString2Bytes(a)))))}],["jwt",(a,c)=>{isMap(a)?(isUnDef(b.jwtsecret)&&isUnDef(b.jwtprivkey)&&k(-1,"For out=jwt you need to provide a jwtsecret or a jwtprivkey"),
ow.loadServer(),isDef(b.jwtprivkey)?(ow.loadJava(),c=new ow.java.cipher,p(ow.server.jwt.sign(c.readKey4File(b.jwtprivkey,!0,b.jwtalg),a))):p(ow.server.jwt.sign(b.jwtsecret,a))):k(-1,"For out=jwt input needs to be a map.")}],["grid",(a,c)=>{isUnDef(b.grid)&&k(-1,"For out=grid you need to provide a grid=...");c=u(_$(b.grid,"grid").isString().$_());isArray(c)&&0<c.length&&isArray(c[0])?(c.forEach((d,f)=>{d.forEach((e,g)=>{if(isUnDef(e.type)||"empty"!=e.type){if(isDef(e.cmd)){var h=$sh(e.cmd).getJson(0);
h=isDef(h)&&isDef(h.stdout)?h.stdout:""}else h=a;if("chart"==e.type||"bar"==e.type)g="_chrt"+(f+1)+"."+(g+1),e.obj=("chart"==e.type?g+" ":"")+K(h,e.obj,g),isUnDef(e.title)&&(e.title="Chart "+g);isDef(e.path)?(e.obj=$path(h,e.path),isUnDef(e.title)&&(e.title=e.path)):isString(h)?e.obj=h:isObject(h)&&"chart"!=e.type&&(e.obj=$path(h,"@"))}else e.obj=""})}),c=ow.format.string.grid(c,__,__," ",!0),p(c)):k(-1,"Invalid grid parameter: '"+stringify(b.grid,__,"")+"'")}],["envs",(a,c)=>{a=isArray(a)?a.map(e=>
isObject(e)?ow.loadObj().flatMap(e,"_"):e):ow.loadObj().flatMap(a,"_");c=e=>0<=String(e).indexOf(" ")?'"'+e+'"':e;isUnDef(b.envscmd)&&(b.envscmd=ow.format.isWindows()?"set":"export");b.envscmd=String(b.envscmd);isUnDef(b.envsprefix)&&(b.envsprefix="_OAFP_");b.envsprefix=String(b.envsprefix);toBoolean(b.envsnoprefix)&&(b.envsprefix="");var d=new Set,f;for(f in a)d.add(b.envscmd+(0<b.envscmd.length?" ":"")+(b.envsprefix+f.replace(/[^a-zA-Z0-9_]/g,"_"))+"="+c(a[f]));p(Array.from(d).join("\n"))}],["cmd",
(a,c)=>{isString(b.outcmd)||k(-1,'For out=cmd you need to provide a outcmd="..."');toBoolean(b.outcmdtmpl)&&(ow.loadTemplate(),ow.template.addConditionalHelpers(),ow.template.addOpenAFHelpers(),ow.template.addFormatHelpers());let d=f=>{var e=isString(f)?f:stringify(f,__,"");if(toBoolean(b.outcmdparam))try{var g=$sh(b.outcmd.replace(/([^\\]?){}/g,"$1"+e)).get(0)}catch(h){sprintErr(h)}else g=toBoolean(b.outcmdtmpl)?$sh($t(b.outcmd,f)).get(0):$sh(b.outcmd,e).get(0);toBoolean(b.outcmdnl)?(0<g.stdout.length&&
print(g.stdout),0<g.stderr.length&&printErr(g.stderr)):(0<g.stdout.length&&printnl(g.stdout),0<g.stderr.length&&printErrnl(g.stderr))};isArray(a)?toBoolean(b.outcmdjoin)?d(a):toBoolean(b.outcmdseq)?a.forEach(d):isDef(pForEach)?pForEach(a,f=>{d(f)}):parallel4Array(a,f=>{d(f)}):(isString(a),d(a))}],["chart",(a,c)=>{isUnDef(b.chart)&&k(-1,'For out=chart you need to provide a chart="<units> [<path[:color][:legend]>...]"');isUnDef(splitBySepWithEnc)&&k(-1,"output=chart is not supported in this version of OpenAF");
a=K(a,b.chart);0<a.length&&(a=printChart("oafp "+a),toBoolean(b.chartcls)&&cls(),p(a))}],["schart",(a,c)=>{isUnDef(b.schart)&&k(-1,'For out=schart you need to provide a schart="<units> [<path[:color][:legend]>...]"');isUnDef(splitBySepWithEnc)&&k(-1,"Output=schart is not supported in this version of OpenAF");a=K(a,b.schart,"_oafp_sfn_","soafp");0<a.length&&p(printChart("soafp "+a))}],["ch",(a,c)=>{isUnDef(b.ch)&&k(-1,'For out=ch you need to provide a ch="(type: ...)"');isUnDef(b.chkey)&&k(-1,'For out=ch you need to provide a chkey="key1, key2"');
a=isMap(a)?[a]:a;b.ch=u(b.ch);isMap(b.ch)?(isUnDef(b.ch.type)&&k(-1,"ch.type is not defined."),isDef(b.ch.lib)&&loadLib(b.ch.lib),"remote"==b.ch.type?$ch("oafp::outdata").createRemote(b.ch.url):$ch("oafp::outdata").create(b.ch.type,isDef($sec().procMap)?$sec().procMap(b.ch.options):b.ch.options),toBoolean(b.chunset)?$ch("oafp::outdata").unsetAll(b.chkey.split(",").map(d=>d.trim()),a):$ch("oafp::outdata").setAll(b.chkey.split(",").map(d=>d.trim()),a),$ch("oafp::outdata").destroy()):k(-1,"Invalid ch parameter")}],
["db",(a,c)=>{(!isArray(a)||1>a.length)&&k(-1,"db is only supported for filled arrays/lists");b.dbtable=_$(b.dbtable,"outdbtable").isString().default("data");b.dbnocreate=toBoolean(_$(b.dbnocreate,"outdbnocreate").isString().default("false"));b.dbicase=toBoolean(_$(b.dbicase,"outdbicase").isString().default("false"));b.dbbatchsize=_$(b.dbbatchsize,"dbbatchsize").isNumber().default(__);ow.loadObj();try{isString(b.dbjdbc)||k(-1,"dbjdbc URL is not defined.");isDef(b.dblib)&&loadLib("jdbc-"+b.dblib+".js");
var d=new DB(b.dbjdbc,b.dbuser,b.dbpass,b.dbtimeout);if(!b.dbnocreate)try{var f=ow.obj.fromObj2DBTableCreate(b.dbtable,a,__,!b.dbicase);d.u(f);d.commit()}catch(n){d.rollback(),k(-1,"Error creating table: "+n)}var e=Object.keys(ow.obj.flatMap(a[0]));var g=b.dbicase?e.join(",").toUpperCase():'"'+e.join('", "')+'"';let m="";var h=a.map(n=>{var q=ow.obj.flatMap(n);n=[];for(var x in e)n.push(q[e[x]]);x=e.map(v=>String(q[v]));n="INSERT INTO "+(b.dbicase?b.dbtable:'"'+b.dbtable+'"')+" ("+g+") VALUES ("+
x.map(v=>"?").join(", ")+")";n.length>m.length&&(m=String(n));return x});d.usArray(m,h,b.dbbatchsize)}catch(m){isDef(d)&&d.rollback(),printErr(m),k(-1,"Error connecting to the database: "+m)}finally{isDef(d)&&(d.commit(),d.close())}}],["sql",(a,c)=>{(!isArray(a)||1>a.length)&&k(-1,"sql is only supported for filled arrays/lists");b.sqltable=_$(b.sqltable,"sqltable").isString().default("data");b.sqlicase=toBoolean(_$(b.sqlicase,"sqlicase").isString().default("false"));b.sqlnocreate=toBoolean(_$(b.sqlnocreate,
"sqlnocreate").isString().default("false"));ow.loadObj();b.sqlnocreate||p(ow.obj.fromObj2DBTableCreate(b.sqltable,a,__,!b.sqlicase)+";\n");var d=Object.keys(ow.obj.flatMap(a[0]));var f=b.sqlicase?d.join(",").toUpperCase():'"'+d.join('", "')+'"';p(a.map(e=>{var g=ow.obj.flatMap(e);e=[];for(var h in d)e.push(g[d[h]]);h=d.map(m=>{m=g[m];isString(m)&&(m="'"+m.replace(/'/g,"''")+"'");isNull(m)&&(m="null");return m});return"INSERT INTO "+(b.sqlicase?b.sqltable:'"'+b.sqltable+'"')+" ("+f+") VALUES ("+h.join(",")+
");"}).join("\n"))}],["xml",(a,c)=>{p(af.fromObj2XML(a,!0,b.outxmlprefix))}],["pxml",(a,c)=>{a=af.fromObj2XML(a,!0,b.pxmlprefix);p('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n'+new XMLList(a))}],["xls",(a,c)=>{if(!isString(a)){try{includeOPack("plugin-XLS")}catch(g){k(-1,"plugin-XLS not found. You need to install it to use the XLS output (opack install plugin-XLS)")}plugin("XLS");if(isMap(a)){ow.loadObj();var d=ow.obj.flatMap(a);var f=Object.keys(d).map(g=>({key:g,value:d[g]}))}isArray(a)&&
(f=a);traverse(f,(g,h,m,n)=>{isString(h)&&h.startsWith("=")&&(n[g]="'"+h)});a=!1;c=b.xlsfile;isUnDef(b.xlsfile)&&(a=!0,b.xlsfile=io.createTempFile("oafp",".xlsx"));c=new XLS(isDef(c)&&io.fileExists(c)?c:__);var e=c.getSheet(_$(b.xlssheet,"xlssheet").isString().default("data"));b.xlsformat=_$(b.xlsformat,"xlsformat").isString().default('(bold: true, borderBottom: "medium", borderBottomColor: "red")');b.xlsformat=u(b.xlsformat);ow.format.xls.setTable(c,e,"A",1,f,__,b.xlsformat);c.writeFile(b.xlsfile);
c.close();b.xlsopenwait=_$(b.xlsopenwait,"xlsopenwait").isNumber().default(5E3);b.xlsopen=toBoolean(_$(b.xlsopen,"xlsopen").isString().default("true"));b.xlsopen&&(ow.format.isWindows()?($sh("start "+b.xlsfile).exec(),a&&sleep(b.xlsopenwait,!0)):ow.format.getOS().startsWith("Mac")&&($sh("open "+b.xlsfile).exec(),a&&sleep(b.xlsopenwait,!0)))}}]]),F=new Map([["?",(a,c)=>{a=Array.from(F.keys()).filter(d=>"?"!=d).sort();l(a,c)}],["pm",(a,c)=>{r();isDef(__pm._map)&&(a=__pm._map);isDef(__pm._list)&&(a=
__pm._list);l(a,c)}],["key",(a,c)=>{r();isString(a)||k(-1,"key is only supported with a string.");l($get(a),c)}],["jsonschema",(a,c)=>{r();a=jsonParse(a,__,__,!0);isMap(a)||k(-1,"jsonschema is only supported with a map.");ow.loadObj();a=ow.obj.schemaSampleGenerator(a);l(a,c)}],["yaml",(a,c)=>{r();a=af.fromYAML(a);l(a,c)}],["xml",(a,c)=>{r();b.xmlignored=_$(b.xmlignored,"xmlignored").isString().default(__);b.xmlprefix=_$(b.xmlprefix,"xmlprefix").isString().default(__);b.xmlfiltertag=toBoolean(_$(b.xmlfiltertag,
"xmlfiltertag").isString().default(__));0<=a.indexOf("<?xml")&&(a=a.substring(a.indexOf("?>")+2).trim());0<=a.indexOf("<!DOCTYPE")&&(a=a.substring(a.indexOf(">")+1).trim());a=af.fromXML2Obj(a,b.xmlignored,b.xmlprefix,!b.xmlfiltertag);l(a,c)}],["lines",(a,c)=>{isBoolean(b.linesjoin)||(b.linesjoin=toBoolean(_$(b.linesjoin,"linesjoin").isString().default(__)));r();let d=__,f=[],e=h=>{h=h.split("\n").map(n=>{let q="",x=0;for(let v=0;v<n.length;v++)if("\t"===n[v]){let z=8-x%8;q+=" ".repeat(z);x+=z}else q+=
n[v],x++;return q}).join("\n");if(isUnDef(d))return d=[],lastPos=0,isUnDef(b.linesvisualsepre)&&(b.linesvisualsepre=" \\s+"),h.split(new RegExp(b.linesvisualsepre)).forEach(n=>{0!=n.trim().length&&(d.push(n),n=h.substring(lastPos).match(new RegExp(ow.format.escapeRE(n)+"("+b.linesvisualsepre+"|$)")),!isNull(n)&&isDef(n.index)?(f.push(lastPos+n.index),lastPos=n.index):k(-1,"Problem with linesvisual to find header positioning."))}),__;var m={};f.forEach((n,q)=>{m[d[q]]=h.substring(n,q+1<f.length?f[q+
1]-1:__).trim()});return m};if(b.linesjoin)if(isDef(b.file)&&isUnDef(b.cmd)&&(a=io.readFileString(b.file)),isDef(b.cmd)&&(a=C(b.cmd,!0)),a=a.split(/\r?\n/),toBoolean(b.linesvisual)){var g=[];a.forEach(h=>{0!=h.length&&(h=e(h),isDef(h)&&g.push(h))});l(g,c)}else l(a,c);else a=isDef(b.file)&&isUnDef(b.cmd)?io.readFileStream(b.file):isDef(b.cmd)?af.fromBytes2InputStream(C(b.cmd)):af.fromString2InputStream(a),ioStreamReadLines(a,h=>{toBoolean(b.linesvisual)?(h=e(h),isDef(h)&&l(h,clone(c),!0)):l(h,clone(c),
!0)}),a.close()}],["ndjson",(a,c)=>{isBoolean(b.ndjsonjoin)||(b.ndjsonjoin=toBoolean(_$(b.ndjsonjoin,"ndjsonjoin").isString().default(__)));r();global.__ndjsonbuf=__;var d=(e,g)=>{isUnDef(global.__ndjsonbuf)&&0!=e.length&&e.trim().startsWith("{")&&(global.__ndjsonbuf="");if(isDef(global.__ndjsonbuf)){if(0!=e.length&&!e.trim().endsWith("}")){global.__ndjsonbuf+=e.trim();return}0<global.__ndjsonbuf.length&&(e=global.__ndjsonbuf+e,global.__ndjsonbuf=__)}0==e.length||0<e.length&&"{"!=e.trim().substring(0,
1)?(g(e),global.__ndjsonbuf=__):g(e)},f=e=>{var g=[];e.split("\n").filter(h=>0<h.length).forEach(h=>d(h,m=>g.push(jsonParse(m,__,__,toBoolean(b.ndjsonfilter)))));return g};b.ndjsonjoin?(isDef(b.file)&&isUnDef(b.cmd)&&(a=io.readFileString(b.file)),isDef(b.cmd)&&(a=C(b.cmd,!0)),l(f(a),c)):(a=isDef(b.file)&&isUnDef(b.cmd)?io.readFileStream(b.file):isDef(b.cmd)?af.fromBytes2InputStream(C(b.cmd)):af.fromString2InputStream(a),ioStreamReadLines(a,e=>{d(e,g=>l(jsonParse(g,__,__,!0),clone(c),!0))}),a.close())}],
["md",(a,c)=>{r();__conConsole=__ansiColorFlag=!0;isUnDef(b.format)&&isUnDef(c.__format)&&(b.format="md",c.__format="md");l(a,c)}],["mdtable",(a,c)=>{r();ow.loadTemplate();if(toBoolean(b.inmdtablejoin)){var d=new Set,f=new Set,e=()=>{0<f.size&&(d.add(ow.template.md.fromTable(Array.from(f).join("\n"))),f.clear())};a.split("\n").forEach(g=>{/^\|.+\|$/.test(g.trim())?f.add(g.trim()):e()});e();l(Array.from(d),c)}else f=ow.template.md.fromTable(a),l(f,c)}],["ask",(a,c)=>{var d=[];a=af.fromJSSLON(a);isDef(askStruct)&&
isArray(a)&&(__conConsole=!0,__con.getTerminal().settings.set("-icanon min 1 -echo"),d=askStruct(a),__con.getTerminal().settings.set("icanon echo"),print(""));l(d,c)}],["raw",(a,c)=>{r();l(a,c)}],["ini",(a,c)=>{r();ow.loadJava();var d=new ow.java.ini;a=isDef(b.file)?d.loadFile(b.file).get():d.load(a).get();l(a,c)}],["jwt",(a,c)=>{ow.loadServer();if(toBoolean(b.injwtverify)){isUnDef(b.injwtsecret)&&isUnDef(b.injwtpubkey)&&k(-1,"injwtsecret or injwtpubkey is not defined.");try{if(isDef(b.injwtpubkey)){ow.loadJava();
var d=new ow.java.cipher;ow.server.jwt.verify(d.readKey4File(b.injwtpubkey,!1,b.injwtalg),a.trim())}else ow.server.jwt.verify(b.injwtsecret,a.trim());var f=!0}catch(e){isDef(e.javaException)&&printErr(e.javaException.getMessage()),f=!1}}a=ow.server.jwt.decode(a);isDef(f)&&(a.__verified=f);!toBoolean(b.injwtraw)&&isDef(a)&&isMap(a.claims)&&(isDef(a.claims.exp)&&(a.claims.exp=new Date(1E3*a.claims.exp)),isDef(a.claims.iat)&&(a.claims.iat=new Date(1E3*a.claims.iat)),isDef(a.claims.nbf)&&(a.claims.nbf=
new Date(1E3*a.claims.nbf)));l(a,c)}],["sql",(a,c)=>{isString(a)?toBoolean(b.sqlparse)?(isUnDef(ow.format.sqlFormat)&&k(-1,"SQL parse not available."),l(ow.format.sqlFormat(a,isDef(b.sqloptions)?u(b.sqloptions):__),c)):l(af.fromSQL(a).ast,c):l(a,c)}],["openmetrics",(a,c)=>{isString(a)?(ow.loadMetrics(),l(ow.metrics.fromOpenMetrics2Array(a),c)):l(a,c)}],["ch",(a,c)=>{r();isUnDef(b.inch)&&k(-1,"inch is not defined.");b.inch=u(b.inch);if(isMap(b.inch)){isUnDef(b.inch.type)&&k(-1,"inch.type is not defined.");
isDef(b.inch.lib)&&loadLib(b.inch.lib);"remote"==b.inch.type?$ch("oafp::indata").createRemote(b.inch.url):$ch("oafp::indata").create(b.inch.type,isDef($sec().procMap)?$sec().procMap(b.inch.options):b.inch.options);var d=u(a);toBoolean(b.inchall)||0==a.trim().length?l($ch("oafp::indata").getAll(isMap(d)?d:__),c):l($ch("oafp::indata").get(isMap(d)?d:__),c);$ch("oafp::indata").destroy()}else k(-1,"inch is not a valid map.")}],["db",(a,c)=>{if(isString(a)){r();isString(b.indbjdbc)||k(-1,"indbjdbc URL is not defined.");
try{isDef(b.indblib)&&loadLib("jdbc-"+b.indblib+".js");var d=new DB(b.indbjdbc,b.indbuser,b.indbpass,b.indbtimeout);d.convertDates(!0);if(toBoolean(b.indbexec)){var f=d.u(a);l({affectedRows:f},c);d.commit()}else f=d.q(a),isMap(f)&&isArray(f.results)?l(f.results,c):k(-1,"Invalid DB result: "+stringify(f))}catch(e){printErr(e.message),isDef(d)&&d.rollback(),k(-1,"Error executing SQL: "+e.message)}finally{isDef(d)&&(d.rollback(),d.close())}}else k(-1,"db is only supported with a SQL string.")}],["xls",
(a,c)=>{r();try{includeOPack("plugin-XLS")}catch(f){k(-1,"plugin-XLS not found. You need to install it to use the XLS output (opack install plugin-XLS)")}b.inxlssheet=_$(b.inxlssheet||b.xlssheet,"xlssheet").isString().default(0);b.inxlsevalformulas=toBoolean(_$(b.inxlsevalformulas||b.xlsevalformulas,"xlsevalformulas").isString().default(!0));b.inxlscol=_$(b.inxlscol||b.xlscol,"xlscol").isString().default("A");b.inxlsrow=_$(b.inxlsrow||b.xlsrow,"xlsrow").isString().default(1);plugin("XLS");if(isDef(b.file)||
isDef(b.cmd)){a=new XLS(isDef(b.cmd)?C(b.cmd):b.file);var d=a.getSheet(b.inxlssheet);d=a.getTable(d,b.inxlsevalformulas,b.inxlscol,b.inxlsrow);a.close();isDef(d)&&isMap(d)&&(d=d.table);l(d,c)}else k(-1,"XLS is only support with 'file' or 'cmd' defined. Please provide a file=... or a cmd=...")}],["csv",(a,c)=>{r();isUnDef(b.inputcsv)&&isDef(b.incsv)&&(b.inputcsv=b.incsv);if(isDef(b.file)||isDef(b.cmd)){var d=isDef(b.cmd)?af.fromBytes2InputStream(C(b.cmd)):io.readFileStream(b.file);a=$csv(b.inputcsv).fromInStream(d).toOutArray();
d.close()}else a=$csv(b.inputcsv).fromInString(a).toOutArray();l(a,c)}],["hsperf",(a,c)=>{if(isDef(b.file)||isDef(b.cmd)){r();ow.loadJava();var d=isDef(b.cmd)?ow.java.parseHSPerf(C(b.cmd)):ow.java.parseHSPerf(b.file);d.__ts=new Date;var f=0,e=0;d.sun.gc.generation.forEach(g=>{g.space.forEach(h=>{e+=Number(h.used);f=isNumber(h.capacity)?f+Number(h.capacity):f;d.sun.gc["__percUsed_"+h.name]=100*h.used/h.capacity})});d.sun.gc.__percUsed_meta=100*d.sun.gc.metaspace.used/d.sun.gc.metaspace.capacity;d.sun.gc.__percUsed_ccs=
100*d.sun.gc.compressedclassspace.used/d.sun.gc.compressedclassspace.capacity;a=$from(d.sun.gc.collector).equals("name","PSScavenge").at(0);d.sun.gc.__ygc=isDef(a)?Number(a.invocations):0;d.sun.gc.__ygct=isDef(a)?Number(a.time/1E9):0;a=$from(d.sun.gc.collector).equals("name","PSParallelCompact").orEquals("name","").at(0);d.sun.gc.__fgc=isDef(a)?Number(a.invocations):0;d.sun.gc.__fgct=isDef(a)?Number(a.time/1E9):0;d.sun.gc.__gct=$from(d.sun.gc.collector).sum("time")/1E9;d.java.__mem={total:f,used:e,
free:f-e,metaMax:d.sun.gc.metaspace.maxCapacity,metaTotal:d.sun.gc.metaspace.capacity,metaUsed:d.sun.gc.metaspace.used,metaFree:d.sun.gc.metaspace.capacity-d.sun.gc.metaspace.used};l(d,c)}else k(-1,"hsperf is only supported with either 'file' or 'cmd' defined.")}],["rawhex",(a,c)=>{b.inrawhexline=_$(b.inrawhexline,"inrawhexline").isNumber().default(__);r();a=isDef(b.file)||isDef(b.cmd)?isDef(b.cmd)?C(b.cmd):io.readFileBytes(b.file):af.fromString2Bytes(a);a=ow.format.string.toHexArray(a,b.inrawhexline);
a.forEach(d=>{d.characters=d.characters.replace(/[\x00-\x1F\x80-\xFF]/g,".")});l(a,c)}],["base64",(a,c)=>{r();a=toBoolean(b.base64gzip)?af.fromBytes2String(io.gunzip(af.fromBase64(a,!0))):af.fromBytes2String(af.fromBase64(a));l(a,c)}],["gb64json",(a,c)=>{r();a=af.fromBytes2String(io.gunzip(af.fromBase64(a,!0)));l(a,c)}],["oaf",(a,c)=>{isString(a)||k(-1,"oaf is only supported with a string.");r();a=af.eval(a);l(a,c)}],["oafp",(a,c)=>{a=u(a);var d="_oafp_key_"+genUUID();isMap(a)?(a.out="key",a.__key=
d,a.__inception=!0,oafp(a),a=$get(d),$unset(d),l(a,c)):isArray(a)?($set(d,!0),a=pForEach(a,(f,e)=>{e=d+"_"+String(e);f.out="key";f.__key=e;f.__inception=!0;try{oafp(f);var g=$get(e);$unset(e)}catch(h){sprintErr(h)}finally{return g}}),l(a,c)):k(-1,"oafp input data needs to be a map or an array.")}],["sh",(a,c)=>{r();a=u(a);if(isString(a))a=$sh(a).get(0);else{isMap(a)||k(-1,"For in=sh the input data needs to a string or a map");var d=$sh();isUnDef(a.cmd)&&k(-1,"For in=sh the input data needs to a string or a map with the a 'cmd'");
d=d.sh(a.cmd);isDef(a.envs)&&(d=d.envs(a.envs,a.envsall));isDef(a.prefix)&&(d=d.prefix(a.prefix));isDef(a.pwd)&&(d=d.pwd(a.pwd));switch(b.inshformat){case "raw":a=d.get(0);break;case "yaml":a=d.getYaml(0);break;default:a=d.getJson(0)}}l(a,c)}],["llm",(a,c)=>{b.llmenv=_$(b.llmenv,"llmenv").isString().default("OAFP_MODEL");b.llmoptions=_$(b.llmoptions,"llmoptions").isString().default(__);isUnDef(b.llmoptions)&&!isString(getEnv(b.llmenv))&&k(-1,"llmoptions not defined and "+b.llmenv+" not found.");r();
var d=$llm(isDef(b.llmoptions)?u(b.llmoptions):$sec("system","envs").get(b.llmenv));isDef(b.llmconversation)&&io.fileExists(b.llmconversation)&&d.getGPT().setConversation(io.readFileJSON(b.llmconversation));let f;isString(b.llmimage)&&(b.llmimage.toLowerCase().match(/^https?:\/\//)?f=af.fromBytes2String(af.toBase64Bytes(af.fromInputStream2Bytes($rest().get2Stream(b.llmimage)))):io.fileExists(b.llmimage)&&(f=af.fromBytes2String(af.toBase64Bytes(io.readFileBytes(b.llmimage)))));a="md"==b.output||"mdtable"==
b.output||"raw"==b.output?isDef(f)?d.promptImage(a,f):d.prompt(a):isDef(f)?d.promptImage(a,f,__,__,__,__,!0):d.promptJSON(a);isDef(b.llmconversation)&&(d=d.getGPT().getConversation(),d.push({role:"assistant",content:stringify(a,__,"")}),io.writeFileJSON(b.llmconversation,d,""));l(jsonParse(a,__,__,isString(a)),c)}],["llmmodels",(a,c)=>{b.llmenv=_$(b.llmenv,"llmenv").isString().default("OAFP_MODEL");b.llmoptions=_$(b.llmoptions,"llmoptions").isString().default(__);isUnDef(b.llmoptions)&&!isString(getEnv(b.llmenv))&&
k(-1,"llmoptions not defined and "+b.llmenv+" not found.");r();a=$llm(isDef(b.llmoptions)?u(b.llmoptions):$sec("system","envs").get(b.llmenv));isUnDef(a.getModels)&&k(-1,"OpenAF support for llm model listing API not found.");l(a.getModels(),c)}],["ls",(a,c)=>{r();if(isString(a)){var d=toBoolean(b.lsposix);isDef(b.file)&&(a=b.file);var f=io.fileExists(a),e;f&&(e=io.fileInfo(a));if(f&&e.isFile)switch(isDef(b.lsext)?b.lsext:e.filename.replace(/^.*\./,"").toLowerCase()){case "tgz":case "gz":a=io.listFilesTAR(a,
!0);break;case "tar":a=io.listFilesTAR(a);break;default:plugin("ZIP"),a=$m4a((new ZIP).list(a))}else a=toBoolean(b.lsrecursive)?listFilesRecursive(a,d):io.listFiles(a,d).files;l(a,c)}else k(-1,"ls is only supported with a string.")}],["toml",(a,c)=>{r();isUnDef(af.fromTOML)&&k(-1,"TOML support not found.");l(af.fromTOML(a),c)}],["slon",(a,c)=>{r();l(af.fromSLON(a),c)}],["json",(a,c)=>{r();l(jsonParse(a,__,__,isString(a)),c)}]]),D={};isString(b.libs)&&(b.libs=b.libs.split(",").map(a=>a.trim()).filter(a=>
0<a.length));isDef(__flags.OAFP)&&isArray(__flags.OAFP.libs)&&isArray(b.libs)?b.libs=__flags.OAFP.libs.concat(b.libs):b.libs=isDef(__flags.OAFP)?__flags.OAFP.libs:[];isArray(b.libs)&&b.libs.forEach(a=>{try{if(a.startsWith("@"))if(/^@([^\/]+)\/(.+)\.js$/.test(a)){var c=a.match(/^@([^\/]+)\/(.+)\.js$/),d=getOPackPath(c[1])+"/"+c[2]+".js";io.fileExists(d)?loadLib(d):k(-1,"ERROR: Library '"+a+"' not found.")}else k(-1,"ERROR: Library '"+a+"' does not have the correct format (@oPack/library.js).");else{var f=
require("oafp_"+a+".js");if(isDef(f.oafplib)){var e=f.oafplib(clone(b),l,t,{_runCmd2Bytes:C,_fromJSSLON:u,_msg:"(processing data...)",_showTmpMsg:r,_clearTmpMsg:Q,_chartPathParse:K,_exit:k,_print:p,_o$o:t});isMap(e)&&(isArray(e.fileExtensions)&&e.fileExtensions.forEach(g=>{var h=g.ext;g=g.type;L.has(h)?printErr("WARN: Extension '"+h+"' already exists."):L.set(h,g)}),isArray(e.fileExtensionsNoMem)&&e.fileExtensionsNoMem.forEach(g=>{g=g.ext;O.has(g)?printErr("WARN: Extension '"+g+"' already exists."):
O.add(g)}),isArray(e.input)&&e.input.forEach(g=>{var h=g.type;g=g.fn;F.has(h)?printErr("WARN: Input type '"+h+"' already exists."):F.set(h,g)}),isArray(e.inputLine)&&e.inputLine.forEach(g=>{var h=g.type;g=g.fn;isUnDef(_inputLinesFns[h])?P[h]=g:printErr("WARN: Input type '"+h+"' already exists.")}),isArray(e.transform)&&e.transform.forEach(g=>{var h=g.type;g=g.fn;isUnDef(E[h])?E[h]=g:printErr("WARN: Transform '"+h+"' already exists.")}),isArray(e.output)&&e.output.forEach(g=>{var h=g.type;g=g.fn;G.has(h)?
printErr("WARN: Output type '"+h+"' already exists."):G.set(h,g)}),isString(e.help)&&(D[a.toLowerCase()]=e.help))}else printErr("WARN: Library '"+a+"' does not have oafplib.")}}catch(g){printErr("WARN: Library '"+a+"' error: "+g)}});(""==b["-h"]||isString(b.help)&&0<b.help.length)&&y();b.format=_$(b.format,"format").isString().default(__);__initializeCon();y=!String(java.lang.System.getProperty("os.name")).match(/Windows/);H=getEnv("OAFP_RESET");isDef(H)&&(y=toBoolean(H)?!1:!0);y&&isDef(__con)&&__con.getTerminal().settings.set("sane");
if(isDef(b.secKey)){toBoolean(b.secEnv)&&(b.secRepo="system",b.secBucket="envs");b.secRepo=_$(b.secRepo,"secRepo").isString().default(getEnv("OAFP_SECREPO"));b.secBucket=_$(b.secBucket,"secBucket").isString().default(getEnv("OAFP_SECBUCKET"));b.secPass=_$(b.secPass,"secPass").isString().default(getEnv("OAFP_SECPASS"));b.secMainPass=_$(b.secMainPass,"secMainPass").isString().default(getEnv("OAFP_SECMAINPASS"));b.secFile=_$(b.secFile,"secFile").isString().default(getEnv("OAFP_SECFILE"));let a=$sec(b.secRepo,
b.secBucket,b.secPass,b.secMainPass,b.secFile).get(secKey);isDef(a)&&Object.keys(a).forEach(c=>b[c]=a[c])}var B={__format:b.format,__from:b.from,__ifrom:b.ifrom,__isql:b.isql,__sql:b.sql,__path:b.path,__opath:b.opath,__csv:b.csv,__pause:b.pause,__key:b.__key};isDef(b.inputcsv)&&(b.inputcsv=u(b.inputcsv));isDef(b.incsv)&&(b.incsv=u(b.incsv));isDef(b.csv)&&(b.csv=u(b.csv));var S=!1;if(""==b["-v"]||isString(b.version)&&0<b.version.length)S=!0,R();if(""==b["-examples"]||isString(b.examples)&&0<b.examples.length)b.url=
"https://ojob.io/oafp-examples.yaml",b.in="yaml",isString(b.examples)&&0<b.examples.length?("?"!=b.examples.trim()&&(B.__format="template"),B.__path="data",b.templatepath="tmpl",0<b.examples.indexOf("::")?(y=b.examples.split("::").filter(a=>0<a.length),B.__sql=1==y.length?"select * where c like '"+y[0]+"'":"select * where c like '"+y[0]+"' and s like '"+y[1]+"'"):"?"==b.examples.trim()?(B.__path="data.sort(map(&concat(c,concat('::',s)),[]))",b.removedups=!0):B.__sql="select * where d like '%"+b.examples+
"%' or s like '%"+b.examples+"%' or c like '%"+b.examples+"%'"):(B.__path="data[].{category:c,subCategory:s,description:d}",B.__from="sort(category,subCategory,description)",B.__format="ctable"),delete b["-examples"];var w="",M=!1;isDef(b.outfile)&&("undefined"===typeof global.__oafp_streams&&(global.__oafp_streams={}),"undefined"===typeof global.__oafp_streams[b.outfile]&&(global.__oafp_streams[b.outfile]={s:io.writeFileStream(b.outfile,toBoolean(b.outfileappend))}));isString(b.chs)&&(y=af.fromJSSLON(b.chs),
isArray(y)||(y=[y]),y.forEach(a=>{isMap(a)?isString(a.name)&&isString(a.type)?$ch(a.name).create(a.type,a.options):k(-1,"ERROR: chs must have a name and a type."):k(-1,"ERROR: chs must be an object or array of objects with name and a type")}));y=()=>{if(S)w=R();else if(b.jsonprefix=_$(b.jsonprefix,"jsonprefix").isString().default(__),b.jsondesc=toBoolean(_$(b.jsondesc,"jsondesc").default("false")),isDef(b.insecure)&&toBoolean(b.insecure)&&ow.loadJava().setIgnoreSSLDomains(),isDef(b.file)){if(0>b.file.indexOf("::")&&
!io.fileExists(b.file)&&k(-1,"ERROR: File not found: '"+b.file+"'"),!O.has(b.type))if("json"==b.type||isUnDef(b.type))if(b.jsondesc){var a=new Set;io.readStreamJSON(b.file,d=>{d=d.substring(2);isDef(b.jsonprefix)?d.startsWith(b.jsonprefix)&&a.add(d):a.add(d);return!1});w=stringify(Array.from(a),__,"")}else if(isDef(b.jsonprefix)){var c=io.readStreamJSON(b.file,d=>d.substring(2).startsWith(b.jsonprefix));w=stringify(c,__,"")}else w=io.readFileString(b.file),toBoolean(b._shebang)&&(w=w.replace(/^#!.*\n/,
""));else w=io.readFileString(b.file),toBoolean(b._shebang)&&(w=w.replace(/^#!.*\n/,""))}else if(b.jsondesc&&k(-1,"ERROR: jsondesc only available for file input."),b.jsonprefix&&k(-1,"ERROR: jsonprefix only available for file input."),isDef(b.cmd))w=C(b.cmd,!0);else if(isString(b.data))w=b.data;else if(isDef(b.url)){b.urlmethod=_$(b.urlmethod,"urlmethod").isString().default("GET");c=u(_$(b.urlparams).isString().default("{}"));let d;isDef(b.urldata)&&(d=u(b.urldata));switch(b.urlmethod.toLowerCase()){case "post":w=
$rest(c).post(b.url,d);break;case "put":w=$rest(c).put(b.url,d);break;case "delete":w=$rest(c).delete(b.url,d);break;default:w=$rest(c).get(b.url)}isObject(w)&&(w=stringify(w,__,""))}else"pm"!=b.input&&(w=[],io.pipeLn(d=>{try{isDef(P[b.type])?P[b.type](N(d),clone(B))&&w.push(d):w.push(d)}catch(f){printErr("ERROR: "+f)}return!1}),w=w.join("\n"));M||(isUnDef(b.type)&&(isDef(b.file)&&(c=b.file.substring(b.file.lastIndexOf(".")),L.has(c)&&(b.type=L.get(c))),isUnDef(b.type)&&(c=w.trim(),c.startsWith("{")||
c.startsWith("[")?b.type="json":c.startsWith("(")?b.type="slon":c.startsWith("<")?b.type="xml":isString(c)&&0<c.length?1<c.substring(0,c.indexOf("\n")).split(",").length?b.type="csv":c.substring(0,0<c.indexOf(": "))&&(b.type="yaml"):k(-1,"Please provide the input type."))),isDef(b.type)&&F.has(b.type)?F.get(b.type)(w,B):(isString(b.type)&&printErr("WARN: "+b.type+" input type not supported. Using json."),F.get("json")(w,B)),delete b.__origr)};isDef(b["-debug"])&&printErr("DEBUG: "+colorify(b));if(isNumber(b.loop))for(;;)toBoolean(b.loopcls)&&
isDef(b.outfile)&&(global.__oafp_streams[b.outfile].close(),global.__oafp_streams[b.outfile]=io.writeFileStream(b.outfile,toBoolean(b.outfileappend))),y(),sleep(1E3*b.loop,!0);else y();isDef(global.__oafp_streams)&&Object.keys(global.__oafp_streams).forEach(a=>global.__oafp_streams[a].s.close())}};oafp(_params);
